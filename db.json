{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/stun-logo.svg","path":"images/icons/stun-logo.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Commonjs和Es Module.md","hash":"202e34dda8fee708aaefd84ec53fc717db26ae02","modified":1662138014180},{"_id":"source/_posts/Git常用命令.md","hash":"48b132bfbdb44a8536ee143fa5dca22f812f1999","modified":1662138032492},{"_id":"source/_posts/HTTP2.0.md","hash":"8af91a989fec58167acbd8e149fbe052b3356961","modified":1662138062021},{"_id":"source/_posts/JS简化技巧.md","hash":"2c7e79337e417baac384436d508f5e173ad97b3a","modified":1662138071298},{"_id":"source/_posts/hexo使用帮助.md","hash":"43bdac12214d6611b095a9c44e79518ec7d92a28","modified":1662138053508},{"_id":"source/_posts/Webpack基础配置.md","hash":"a7ea305fcd3c03e6119702f62711d61c2719bd27","modified":1662138101107},{"_id":"source/_posts/postman参数类型.md","hash":"2aea902b70a283e3017a49c06cbaf24118d17c63","modified":1662138090036},{"_id":"source/_posts/伪类和伪元素.md","hash":"c88497fdfedc1d286b909ec38854c3a4c1784e76","modified":1662137970832},{"_id":"source/_posts/正则表达式.md","hash":"5544c0ea6bddd86738654ed92bd8ae4ba0995300","modified":1662138004560},{"_id":"source/_posts/前端工程代码规范.md","hash":"b9b3e47722f9abc3280611f6b73cec4876d36ea7","modified":1662137946859},{"_id":"source/_posts/虚拟列表.md","hash":"23a13598bd171a62da6599c96ae73ae250a9b468","modified":1662137992913},{"_id":"themes/stun/.commitlintrc.js","hash":"4d6f90e0c056abfd011315003b47debd7b352e4f","modified":1645951562851},{"_id":"themes/stun/.eslintrc","hash":"eb9ab913dd95b3712f19b9b1f884f8fbceb6f72e","modified":1645951562851},{"_id":"themes/stun/.editorconfig","hash":"8a427ba0adde052cb562ee790bb6b80c270fa55a","modified":1645951562851},{"_id":"themes/stun/.cz-config.js","hash":"8b2799bd6d9c9069f5e8bad48a8b349344b9992f","modified":1645951562851},{"_id":"themes/stun/.prettierrc","hash":"a9a62bfb68859d94c9e8e153a6d6ab104c98dd60","modified":1645951562854},{"_id":"themes/stun/.stylintrc","hash":"5d6395f53b8f451986358a4c0326c48bb5cd5dd2","modified":1645951562854},{"_id":"themes/stun/.gitignore","hash":"6f961e080d4e0d167fc0459464d280d63e888195","modified":1645951562854},{"_id":"themes/stun/CHANGELOG.md","hash":"d14d98eeaba868bd363a35e9783a6a11a90ac259","modified":1645951562855},{"_id":"themes/stun/README_en-US.md","hash":"3c91201d354b1ef6fbd13b64ec6f07abc83d4099","modified":1645951562856},{"_id":"themes/stun/FAQ.md","hash":"8b6ea6b1dcfb80a8702eb730095f24de475f33da","modified":1645951562855},{"_id":"themes/stun/LICENSE","hash":"0758a784b2748505aaa2298c9d3af67a1a6563ba","modified":1645951562855},{"_id":"themes/stun/README.md","hash":"01fcb582da538f8055d7d93c750dbe9cc6c969ee","modified":1645951562856},{"_id":"themes/stun/_config.yml","hash":"932e35726b1b681ee5aa0c65e1f812d99759f4f9","modified":1661962067917},{"_id":"themes/stun/package.json","hash":"f286c08b2c5a82dd83d92b77082ddcdeb57c5038","modified":1645951562877},{"_id":"themes/stun/.github/FUNDING.yml","hash":"707c2ecd695c49e608916bf8c969241622404187","modified":1645951562852},{"_id":"themes/stun/languages/zh-CN.yml","hash":"fd940f01670c03025c4cf706ece7dc4d61e41d5c","modified":1654965434155},{"_id":"themes/stun/layout/_layout.pug","hash":"b74c668e278f3ce2262e85f6fefb9fdab79e3b8b","modified":1654965315607},{"_id":"themes/stun/layout/archive.pug","hash":"9aa9b30e43fa14dd01f55dcdc3ba379af1e884eb","modified":1645951562873},{"_id":"themes/stun/layout/index.pug","hash":"03287304c2614d0d4d60bc5d55266695c3b8f527","modified":1645951562873},{"_id":"themes/stun/layout/post.pug","hash":"6a27bd2c14e2ef20e4ff29d12ba9a813727c74c7","modified":1645951562874},{"_id":"themes/stun/layout/page.pug","hash":"55a96c04aac274088f0641e5c8a778c2756889ac","modified":1645951562873},{"_id":"themes/stun/layout/tag.pug","hash":"f26d4de2523946fff7fcfd6c701adda3c004c70e","modified":1645951562874},{"_id":"themes/stun/layout/category.pug","hash":"c849ba60901506bcc1b2e8293455f45f78a0a0ad","modified":1645951562873},{"_id":"themes/stun/scripts/merge-config.js","hash":"65dabee746834b112b2a496c9c7d4a90e6ed4970","modified":1645951562879},{"_id":"themes/stun/scripts/engine.js","hash":"41250b58e354d0500e2fffe9ad0ff9c99f534b50","modified":1645951562877},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/bug-report_en.md","hash":"c81aa8866f9d67d59af4174c79c11bc25b1dce66","modified":1645951562852},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/bug-report_zh.md","hash":"4f67fa27c6f0b149680abfe57f448851b9139ea8","modified":1645951562852},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/feature-request_en.md","hash":"597b8ae27ce734681a898cdfc66182deba91fcee","modified":1645951562852},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/feature-request_zh.md","hash":"662943353c4488450ed7ab164cdc9bd161ca1d80","modified":1645951562853},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/other_zh.md","hash":"90555989a81d8c16760779c450656bd73e989f0a","modified":1645951562853},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/other_en.md","hash":"20cd29abeefe18be3a374c78e63d69570fc1f5cd","modified":1645951562853},{"_id":"themes/stun/.github/workflows/files-shaking.yml","hash":"a417f17f752c4be06b29b01cb3dc4c7cdfd2aea1","modified":1645951562854},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"fdb9f7ecdecba26ccafb295063990807a66f3813","modified":1645951562858},{"_id":"themes/stun/.github/workflows/codeql-analysis.yml","hash":"6f6b55946dda82dc41f24af837dc4e1d47f436bf","modified":1645951562853},{"_id":"themes/stun/layout/_partials/config.pug","hash":"b7b5cc6740c6d4c2d4e97a68dd94e5f514c6adc6","modified":1645951562860},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"4a76652315e5ea734ca8eef4f87a1fce91d032ab","modified":1645951562858},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"9d31399baa47d599e3bd0f451004b256b6cc4254","modified":1645951562871},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"8c32cdbe8d5d8799d2e53bb8bd9a3fea6d060a6b","modified":1645951562859},{"_id":"themes/stun/layout/_mixins/meta-item.pug","hash":"333ad56f6fa8e93d27ae3b09ffc62269c82bca70","modified":1645951562859},{"_id":"themes/stun/layout/_mixins/timeline.pug","hash":"0108c63e79bf71b9744db1ffb749adc143a9c9bb","modified":1645951562859},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"b20216a1fe3c72f9b57119c25a9952ae8ab8f605","modified":1645951562866},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"edf08485d02f8f9efe902704bfabb34bb78ecd32","modified":1645951562872},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"782bdc337a76614f3291ff159cb669e322380065","modified":1645951562866},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"e4b415cdf9f61cfabff285a88b07454e984661c4","modified":1651854149135},{"_id":"themes/stun/scripts/tags/friends.js","hash":"8a5a38437d621845f1f9749d558d457360ccfc35","modified":1645951562879},{"_id":"themes/stun/scripts/tags/note.js","hash":"fb45de53daa8bd4b2dc910ae082ee9ccf15b20d4","modified":1645951562879},{"_id":"themes/stun/scripts/filters/image-setting.js","hash":"4434cb64de9bcc7f51427855ca3d49334ba19ae5","modified":1645951562878},{"_id":"themes/stun/scripts/tags/table.js","hash":"33120450cf9be28c9167417ea2ab8dc9bf8fc68c","modified":1645951562879},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"d5baf39faeff5368182be1f59fb598d023985cde","modified":1651853829771},{"_id":"themes/stun/source/css/index.styl","hash":"7abf7869aabb5f726093f4981b7a58ae2536d854","modified":1645951562895},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"c4fb7d225c095c7de0ab9fa51eaf8bac5f06ed4b","modified":1651853286174},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"b4fb3713f126b4970521ebdc71828d7b4f048322","modified":1651853315640},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"fcd26a87a024f719d0b3920a3e1734b04ef52c1b","modified":1645951562878},{"_id":"themes/stun/source/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1645951562895},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1645951562896},{"_id":"themes/stun/source/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1645951562896},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1645951562896},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1645951562895},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1645951562896},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1645951562896},{"_id":"themes/stun/source/js/header.js","hash":"efc852fd053ae6c8163f575cefc8c0a68bbf63e6","modified":1645951562898},{"_id":"themes/stun/source/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1645951562897},{"_id":"themes/stun/source/js/scroll.js","hash":"7b0342d95f7fe21e57b3ba093870f7b0bf7821a2","modified":1645951562898},{"_id":"themes/stun/source/js/sidebar.js","hash":"81d1b9313afcb75d4991d0f79a8bcbda49aa8129","modified":1645951562898},{"_id":"themes/stun/source/js/stun-boot.js","hash":"fb2737d595f4be58e3a4fc136c94b306942bae87","modified":1645951562899},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"df7a5a7b0b59da113ad8d702b42ce5da438cdae4","modified":1645951562859},{"_id":"themes/stun/source/js/utils.js","hash":"df9066589273219d78353291f6db0d0be101b63b","modified":1645951562899},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"f1ebea686f66165294643a03252650118a09c496","modified":1645951562860},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"98a1916db8df36f5174fc4bcdc36370a16138df9","modified":1645951562861},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"381afbb33e25171521eddb162ab4cbc11d76d98f","modified":1645951562861},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"258a97d25c610b2b17018951dece5f23f570cfa0","modified":1645951562862},{"_id":"themes/stun/layout/_partials/head/kill-old-ie.pug","hash":"cd384f25aba5beb774b8a010619c342c3ebfe596","modified":1645951562861},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"7da35d4ec40dcbfb9925ad592ec8f91239d905d1","modified":1645951562862},{"_id":"themes/stun/layout/_partials/search/assist-btns.pug","hash":"549a139a4deda9989527d20cf8da330cef8cb21a","modified":1645951562862},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"178d6eee822776ad80e384442b60fd9a68d35f28","modified":1645951562863},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"85a07868967a98a4223ab41bd804ac8237ce326d","modified":1645951562863},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"07fc07a80bde44ebc6684e921c4c1a4f7787733e","modified":1645951562864},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"871888f51bef0988b4e4a27d857689684e67f0ea","modified":1645951562863},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"273998efc25fadd7a819b055dd0414b687885827","modified":1645951562864},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"5ce95f71c91f4be3400c800e5dc31a820257367b","modified":1645951562864},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"1acace606b1348eaf7a4a32b97d85a717dbe93b8","modified":1645951562864},{"_id":"themes/stun/layout/_partials/widgets/night-mode.pug","hash":"3a6175601ada6ba2ca146607571456414de965c8","modified":1645951562864},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"0da6d167bf79105ae1575a2ee27f6053ce6a30da","modified":1645951562867},{"_id":"themes/stun/layout/_partials/widgets/paginator.pug","hash":"4d6fef24e8cf30ac12928b4ce34e9e6caff16f9c","modified":1645951562865},{"_id":"themes/stun/layout/_partials/widgets/share.pug","hash":"77d2ded368e6c98f43d5a69f8fb286cdd601eb1f","modified":1645951562865},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"ffae863a4d9397f9e28790a747221b7dad6b5745","modified":1645951562865},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"fc3d256854f27b5b6f2adc107957a23f743a4f21","modified":1645951562865},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"889ca81727a656b0a36d9f736f2b1aabc59e3491","modified":1645951562867},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"249c8464277d6fdb7941076cea476666c25fffa5","modified":1645951562867},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"c95cdb7b9014ac25f1cdf8dffb2ec1451d431bf4","modified":1645951562867},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"a34dbd7748a05ab1627dede1841a95c6214e835f","modified":1645951562868},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"7820dfaf4eb1a80d12d40a9b1ee58e729d8fbbce","modified":1645951562868},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"35196069417c027eb3c9c27dd22b1d09aa28ce4f","modified":1645951562868},{"_id":"themes/stun/layout/_third-party/analytics/tencent-analytics.pug","hash":"13cac8031f634df7eaf5835eaf5157032984efdc","modified":1645951562868},{"_id":"themes/stun/layout/_third-party/comments/fbcomments.pug","hash":"d8abecfa3a205591d763f24491e9b643c156615c","modified":1645951562869},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"3fdb845f2f62533062c04a67925ebd9926f1b177","modified":1645951562869},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"0ff0832063ea7e630d30bf4ec051f5736f348022","modified":1645951562869},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"772519ebddb05400e6099d51727f5e3f3f07df36","modified":1645951562869},{"_id":"themes/stun/layout/_third-party/comments/minivaline.pug","hash":"44b700fda7b498da9f255cc0a6b25f98b2b263fa","modified":1645951562870},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"217d4fe3a03bf85c432bb0ef5d66c3ec646bf85b","modified":1645951562871},{"_id":"themes/stun/layout/_third-party/comments/utterances.pug","hash":"753808a22eff7dca5b34aaab08d4debca583fdee","modified":1645951562870},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"439cbadd7b87862d552d47083a4a4c367f7e5f9f","modified":1645951562870},{"_id":"themes/stun/layout/_third-party/comments/waline.pug","hash":"88a3cf35036e94cf988ee4f0321e9d794fe2e429","modified":1645951562870},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"9ba568a9899d21706ea8842291c7b6c9cb1ca169","modified":1645951562871},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"3447a97c4d5711251555c18068e88dd11b6d720f","modified":1645951562871},{"_id":"themes/stun/source/css/_common/index.styl","hash":"016426a8b8363393b5b7a77ad23482b3baa46736","modified":1645951562891},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"102bdcd972f74a53976427636506a639b48138c0","modified":1645951562872},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"178d6eee822776ad80e384442b60fd9a68d35f28","modified":1645951562872},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"c7df8230de3c127bb680239bafcc76950b6e5504","modified":1645951562873},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"a7672c735539c4828cd4c54a1fca28a5fc6b756e","modified":1645951562892},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"aba3f8f2dec84b604985093cd65bf43770076cea","modified":1645951562894},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"4d0757a1565936ca5ad9eed49c35c001a96af273","modified":1645951562894},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"36052025063fc923e6b4fd7660ad7ce6adee0818","modified":1645951562894},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"10316d82a91f7c218960ca7a5bf3263139c1ca3c","modified":1646500422000},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"a044fd61902531b11d681e545420896057215c85","modified":1646500422000},{"_id":"themes/stun/source/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1645951562897},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"36cbf4c963972dde6680f21064b3d69fd36828c3","modified":1645951562883},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"34cd9f24602550fb5172cf5cf61f1466e96b3037","modified":1645951562892},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"eadd5a0c5d2ba86178384b24dfd2c72effe7886e","modified":1645951562892},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"d30385d3e3a68fbff0e4560c5b520d572121aa69","modified":1645951562893},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"e8003f897e0ee5cd886df4402c0c28cd27d80a73","modified":1645951562893},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"0b06abb4739e5da44058cd5147be173e8f801cf6","modified":1645951562893},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"1d658ff634b2da6b8b4818ffc1084acb65a36ca8","modified":1645951562893},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"2d3ff81f11520710927efd5698b5dd9b145cb3a5","modified":1645951562881},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"beafc7d7c1685ac73fa263cffae37bf699a8f269","modified":1645951562880},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"660f90a9fa59ec83f4192dc603d4cc40e0fffca5","modified":1645951562882},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"055fac810c3b76562482681d1aaa174a98234b5e","modified":1645951562881},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"43676e5a64dcc6fae4031695cad116cff570513f","modified":1645951562881},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"84e8bef33970281e9e89500676b13b86e59ab1e8","modified":1645951562883},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"e0bdb2e6ef1feb8a4efd9bda322277f18085023e","modified":1645951562882},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"429b41bc2c38d10df7d38c494c8ffe9fe7ad22b4","modified":1645951562882},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"ab775fefb98c48906dfd05d368b7c2f985048f3f","modified":1645951562883},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"04540885ffd7c79141869f0adeef4474bd25514d","modified":1645951562884},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"1e5e2ea60d3b9fcefb6b43b32ab564f9ec52ba6e","modified":1645951562884},{"_id":"themes/stun/source/css/_common/components/pages/timeline.styl","hash":"55e23326e31a055babc4c2db7c03591cf1b5092a","modified":1645951562884},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"8b976b58cbfb4f8b5a4c35476d745f02637b382b","modified":1645951562884},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"04742a9f12b8b7f06b74f022cb0ea63cd6e75c45","modified":1645951562885},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"b3eaa86f013301451e46d7c2553b4f7259a51e5d","modified":1645951562885},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"0d94d87e37b990e89cbce6a48dfe98582d410cc8","modified":1645951562886},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"721e62acc60b8b138279ec05059ad0fcafa2d739","modified":1645951562887},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"3adfb147fd1d71bcdf28ba46221145fe5616bcd6","modified":1645951562885},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"a251aaccd8e36f4335c2d9d61d21c219a9649dc4","modified":1645951562888},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"50c2cd66822a001c2ad7cf6e154ea3841fca6b86","modified":1645951562886},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"cff8d1ced73a4e02aae6f0bcb68e3801acbe19d7","modified":1645951562886},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"cb969ab21d4f255d05e3203d7edb01e15bcbc64a","modified":1645951562888},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"c969a0c307352b80c262c7d8ccc5a3c4b3b53b9a","modified":1645951562887},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"ab24673e566e303ffb348374229a6d80c43b941a","modified":1645951562888},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1c6c29cee4534935fa899078cd73d8fee56aa144","modified":1645951562887},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"5a7f6546d66474fa45aac2b4789c0ddd78ab9bbf","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"2fa5ec7db3c6e969628253aa226de50b72b88c74","modified":1645951562887},{"_id":"themes/stun/source/css/_common/components/widgets/ending.styl","hash":"8ef8d3a399262fa54bc5242aa79bc7c7f4a319c7","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"d414daca2e7400dd074146437ab37a063a6f5081","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/widgets/font-icon.styl","hash":"766457aed4cdf1d2898e5b2b1302b47aa342bb78","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"679a0ce0cd66ac8f562279153011d2d00dea4c08","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"124e289f660cf68219dfb09fe3cb7857228c33aa","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"c15af8c457531c3adc11e46e6ff35c2b05bae928","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/night-mode.styl","hash":"1c8bd075913a85d45cdf693955ecc4d6959d9d5c","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"8b8323bf45e3b1be99f0b162b32cecc20c1964d4","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"ddde7e7966acf313c87319a4d371a2854fbea0ca","modified":1645951562891},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"4d9df7b1f1f8e6b08129479dd00603921c377f33","modified":1645951562891},{"_id":"themes/stun/source/css/_common/components/widgets/paginator.styl","hash":"4167ff6c8e9e74f98fb1ce8ce234547fc9b2d24f","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/share.styl","hash":"3d47efc51a13a9fd8cca6da07a7bdec14b79aefe","modified":1645951562891},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"638c127108f95213cfa749923d880d9e52801e8d","modified":1645951562891},{"_id":"themes/stun/package-lock.json","hash":"4b0af555aeec9a212a6b7118ff9644a19b0e096a","modified":1645951562876},{"_id":"public/2022/06/12/伪类和伪元素/index.html","hash":"666a024bcf61f1cddb1fcc5f4323bccc97bb6b24","modified":1661874402278},{"_id":"public/2022/03/06/虚拟列表/index.html","hash":"f9f2ca34dee760cbd8ba3e2896fcf6a18cdc5697","modified":1661874402278},{"_id":"public/2022/02/27/postman参数类型/index.html","hash":"e58ec21148e3d843295afe665b9ecc211445765f","modified":1661874402278},{"_id":"public/2022/02/26/Git常用命令/index.html","hash":"f21251239c5eab08dc736a6868733fe3393196d4","modified":1661874402278},{"_id":"public/2022/06/12/Webpack基础配置/index.html","hash":"982d223ff314ac11b3113b146cc756e4d43c88de","modified":1661874402278},{"_id":"public/2022/05/05/前端工程代码规范/index.html","hash":"0a978cd4529d6600194c44bc7ed038f9e68468dd","modified":1661874402278},{"_id":"public/2022/04/10/Commonjs和Es Module/index.html","hash":"9b9d57bd35f18a38198a4a3e3066c9713f4cbdae","modified":1661874402278},{"_id":"public/2022/03/08/HTTP2.0/index.html","hash":"be3375be49dd72c1941eeb1996abcb5d63d16d52","modified":1661874402278},{"_id":"public/2022/03/06/JS简化技巧/index.html","hash":"08634df0f84baea6322cf4424804ea0edda3b97a","modified":1661874402278},{"_id":"public/2022/02/06/正则表达式/index.html","hash":"adb754101b0ffa292f246faa032603e237cda2f8","modified":1661874402278},{"_id":"public/2022/02/06/hexo使用帮助/index.html","hash":"18ad144c5fbb435f29333c228c6fd4f74399dc6f","modified":1661874402278},{"_id":"public/archives/index.html","hash":"0ae3beeb34a9c5f4a5bd008540b666a35a3c3f15","modified":1661956287158},{"_id":"public/archives/page/2/index.html","hash":"62e38b7b20a4b655b0129b1b504fc8fa0ccb0d16","modified":1661956287158},{"_id":"public/archives/2022/index.html","hash":"fe6d219544b906c7b299ccfe741dfd60caa89881","modified":1661956287158},{"_id":"public/archives/2022/page/2/index.html","hash":"e0eefa29bd019cd54fb64c63901b8348613c5480","modified":1661956287158},{"_id":"public/archives/2022/02/index.html","hash":"f8a388b74eb2615ca5de724b473ddd7a5841d3ea","modified":1661874402278},{"_id":"public/archives/2022/03/index.html","hash":"86a42c7bffd944af55bf87baae355842baa3fd28","modified":1661874402278},{"_id":"public/archives/2022/04/index.html","hash":"97a7660c14eac7ac09da775b208aecd3b49d0e2e","modified":1661874402278},{"_id":"public/archives/2022/05/index.html","hash":"e34414e42b5ec268b0546a446261795e4c9e3daf","modified":1661874402278},{"_id":"public/archives/2022/06/index.html","hash":"b095fa5f9c3a8029b16a3927378f52f1542ea949","modified":1661874402278},{"_id":"public/page/2/index.html","hash":"c0bc1098e7259ff96953661b2335796424281c96","modified":1661956287158},{"_id":"public/index.html","hash":"7e3d6152081bb25dba27acb5bc2deac4cd56f135","modified":1661955991273},{"_id":"public/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1654965570104},{"_id":"public/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1654965570104},{"_id":"public/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1654965570104},{"_id":"public/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1654965570104},{"_id":"public/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1654965570104},{"_id":"public/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1654965570104},{"_id":"public/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1654965570104},{"_id":"public/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1654965570104},{"_id":"public/images/icons/favicon-16x16.png","hash":"10316d82a91f7c218960ca7a5bf3263139c1ca3c","modified":1654965570104},{"_id":"public/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1654965570104},{"_id":"public/images/icons/favicon-32x32.png","hash":"a044fd61902531b11d681e545420896057215c85","modified":1654965570104},{"_id":"public/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1654965570104},{"_id":"public/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1654965570104},{"_id":"public/js/sidebar.js","hash":"20adff7f54bcd8299d32690d41ebc7a4eb7a8728","modified":1654965570104},{"_id":"public/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1654965570104},{"_id":"public/css/index.css","hash":"02b656cc1022829c4cf32e11b65827dfde9a343e","modified":1654965570104},{"_id":"public/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1654965570104},{"_id":"source/_posts/前端路由模式hash和history.md","hash":"66aaf35a25a9e44438965baa24ece62b16cce44b","modified":1662137960713},{"_id":"public/2022/06/18/前端路由模式hash和history/index.html","hash":"b71428714a31e32a13b1ad9039a0e1922d9fbb02","modified":1661874402278},{"_id":"source/_posts/按需引入组件库的几种方式.md","hash":"5dd34d9c9452969e14805d4aaf02c5cbde331c8f","modified":1662137901339},{"_id":"public/archives/2022/08/index.html","hash":"97c6dacca91fa7c60a15e79616ca902761a53c51","modified":1661956287158},{"_id":"public/2022/08/07/按需引入组件库的几种方式/index.html","hash":"28dc4e186e60a78a441d6f98d7d17fc6e970f281","modified":1661874402278},{"_id":"source/_posts/lerna实现Monorepo.md","hash":"44d5b90a9a3e0e36dbd5ef4fd1718e1aa270f296","modified":1662138079397},{"_id":"public/2022/08/14/lerna实现Monorepo/index.html","hash":"055fdb4a50321168464d196549cbc8746efc6fb2","modified":1661874402278},{"_id":"source/_posts/Docker实现前后端自动化部署.md","hash":"0196018c21377264e736e9a0d4830056989f71aa","modified":1662303339703},{"_id":"public/2022/08/30/Docker实现前后端自动化部署/index.html","hash":"4b7857721584195d2d24dd583803444e592cb44c","modified":1661955991273},{"_id":"source/CNAME","hash":"3c22665383a23398b4217ae7843ab5d57e1ee3a8","modified":1661881459865},{"_id":"public/CNAME","hash":"3c22665383a23398b4217ae7843ab5d57e1ee3a8","modified":1661881698155},{"_id":"public/2022/08/31/正则表达式/index.html","hash":"18ad9e8523693589f6e63c8c1e2bd4f4cae33ff4","modified":1661955991273},{"_id":"public/2022/08/31/虚拟列表/index.html","hash":"bc646463be1592a7622f83cae40ffc79ff836e35","modified":1661955991273},{"_id":"public/2022/08/31/伪类和伪元素/index.html","hash":"3e1626e74ce5943ddb169a96feec5c5fa4e00e04","modified":1661955991273},{"_id":"public/2022/08/31/postman参数类型/index.html","hash":"d72136ba9fddc7a78d3e3ccf99d878b34db2bb0f","modified":1661955991273},{"_id":"public/2022/08/31/hexo使用帮助/index.html","hash":"59fb566c3e649e07d57e299c6b7b71ae9871f5fd","modified":1661955991273},{"_id":"public/2022/08/31/lerna实现Monorepo/index.html","hash":"b6f046aad3111c677e07fcf63e1eeda2ed354eca","modified":1661955991273},{"_id":"public/2022/08/31/Git常用命令/index.html","hash":"387610fa6d2bf3c6202a5f20ba4ec12952dfe6a8","modified":1661955991273},{"_id":"public/archives/2022/08/page/2/index.html","hash":"f807cc20f43a27dde322622eb76ebda8655da93f","modified":1661956287158},{"_id":"public/2022/08/31/按需引入组件库的几种方式/index.html","hash":"400818d0cc19b231e190eda4aebabbb75c72a8f9","modified":1661955991273},{"_id":"public/2022/08/31/前端工程代码规范/index.html","hash":"7518ba0b4ef5a1fb82bad8d589ae0059af5e9ac2","modified":1661955991273},{"_id":"public/2022/08/31/前端路由模式hash和history/index.html","hash":"ae89e8a3fbe468f02d2e56a3e3dbfc4d1092fcaa","modified":1661955991273},{"_id":"public/2022/08/31/Webpack基础配置/index.html","hash":"5ae21c8f2bb3631512874b5604b033473acfec27","modified":1661955991273},{"_id":"public/2022/08/31/JS简化技巧/index.html","hash":"507fe5cbf26c7aea199860fde64ccf33311d49b2","modified":1661955991273},{"_id":"public/2022/08/31/HTTP2.0/index.html","hash":"e7004e33cee205174c6b3075e2b6dbdf9a03d365","modified":1661956287158},{"_id":"public/2022/08/31/Commonjs和Es Module/index.html","hash":"76818f6ffbf659a3a9462b5b111eb2b4a1942a50","modified":1661956287158},{"_id":"public/2022/08/31/Docker实现前后端自动化部署/index.html","hash":"e30f2bf2b28824df8ea25dda679e37e2e48f014d","modified":1661956287158}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Git常用命令","date":"2022-02-25T16:00:00.000Z","_content":"\n工作中常用到的git使用命令和技巧\n<!-- more -->\n\n## 基本命令\n\ngit add .   添加全部到暂存区\ngit commit -m \"备注信息\"    提交暂存的修改\ngit commit --am     合并提交\ngit pull    拉取代码并合入 === git fetch && git merge\ngit fetch   只拉取，不合入\ngit checkout .  放弃所有没加入暂存区的代码\n\ngithub上创建仓库\ngit remote add origin https://github.com/blue-squirrel/仓库名.git   设置远程仓库\ngit push -u origin master   推送到远程分支\n\n## 分支\n\ngit branch  列出本地分支\ngit branch -a   列出本地和远程分支\ngit branch -D 分支名    强制删除分支\ngit checkout -b 分支名 origin/分支名    拉取远程到本地\n\n## git stash 暂存\n\ngit stash   把本地的改动暂存\ngit stash save \"message\"    执行存储时，添加备注\ngit stash pop   应用最近一次暂存，并删除暂存记录\ngit stash apply     应用某个存储,但不会把删除，默认使用第一个,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} 。\ngit stash list     查看stash列表\ngit stash clear     删除所有stash\n\n## 合并前几次commit为一次\n\n![avatar](http://mms2.baidu.com/it/u=2534115628,2023806309&fm=253&app=138&f=PNG&fmt=auto&q=75?w=417&h=203)\n\ngit rebase -i <base-commit>\n\n以base-commit为基准，合并基准之后的所有commit\n\n将类似\n\npick  第一次提交\npick  第二次提交\npick  第三次提交\npick  第四次提交\n\n改成\n\npick  第一次提交\ns     第二次提交\ns     第三次提交\ns     第四次提交\n\n然后会弹出提交commit注释的编辑，保存后会保留注释并合并成一条\n\n## git rebase\n\n![avatar](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7db69f93ee440a8a5b9b62dd68668c~tplv-k3u1fbpfcp-watermark.awebp)\n\n### 拉取远程的新代码\n\ngit pull --rebase\n\nrebase 会将两个分支进行合并，同时合并之前的 commit 历史。如果出现冲突，解决冲突后执行以下命令即可：\n\ngit add\ngit rebase --continue   继续变基\n\n### 公共代码库提交PR，拉取新代码\n\ngit pull --rebase upstream master\n\n修改后 git add . && git commit -m \"\"\n\ngit push -f 即可\n","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git常用命令\ndate: 2022-02-26\n---\n\n工作中常用到的git使用命令和技巧\n<!-- more -->\n\n## 基本命令\n\ngit add .   添加全部到暂存区\ngit commit -m \"备注信息\"    提交暂存的修改\ngit commit --am     合并提交\ngit pull    拉取代码并合入 === git fetch && git merge\ngit fetch   只拉取，不合入\ngit checkout .  放弃所有没加入暂存区的代码\n\ngithub上创建仓库\ngit remote add origin https://github.com/blue-squirrel/仓库名.git   设置远程仓库\ngit push -u origin master   推送到远程分支\n\n## 分支\n\ngit branch  列出本地分支\ngit branch -a   列出本地和远程分支\ngit branch -D 分支名    强制删除分支\ngit checkout -b 分支名 origin/分支名    拉取远程到本地\n\n## git stash 暂存\n\ngit stash   把本地的改动暂存\ngit stash save \"message\"    执行存储时，添加备注\ngit stash pop   应用最近一次暂存，并删除暂存记录\ngit stash apply     应用某个存储,但不会把删除，默认使用第一个,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} 。\ngit stash list     查看stash列表\ngit stash clear     删除所有stash\n\n## 合并前几次commit为一次\n\n![avatar](http://mms2.baidu.com/it/u=2534115628,2023806309&fm=253&app=138&f=PNG&fmt=auto&q=75?w=417&h=203)\n\ngit rebase -i <base-commit>\n\n以base-commit为基准，合并基准之后的所有commit\n\n将类似\n\npick  第一次提交\npick  第二次提交\npick  第三次提交\npick  第四次提交\n\n改成\n\npick  第一次提交\ns     第二次提交\ns     第三次提交\ns     第四次提交\n\n然后会弹出提交commit注释的编辑，保存后会保留注释并合并成一条\n\n## git rebase\n\n![avatar](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7db69f93ee440a8a5b9b62dd68668c~tplv-k3u1fbpfcp-watermark.awebp)\n\n### 拉取远程的新代码\n\ngit pull --rebase\n\nrebase 会将两个分支进行合并，同时合并之前的 commit 历史。如果出现冲突，解决冲突后执行以下命令即可：\n\ngit add\ngit rebase --continue   继续变基\n\n### 公共代码库提交PR，拉取新代码\n\ngit pull --rebase upstream master\n\n修改后 git add . && git commit -m \"\"\n\ngit push -f 即可\n","slug":"Git常用命令","published":1,"updated":"2022-09-02T17:00:32.492Z","_id":"cl4a3rr1u0000lgttg84z38e4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>工作中常用到的git使用命令和技巧</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"基本命令\"   >\n          <a href=\"#基本命令\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2>\n      <p>git add .   添加全部到暂存区<br>git commit -m “备注信息”    提交暂存的修改<br>git commit –am     合并提交<br>git pull    拉取代码并合入 &#x3D;&#x3D;&#x3D; git fetch &amp;&amp; git merge<br>git fetch   只拉取，不合入<br>git checkout .  放弃所有没加入暂存区的代码</p>\n<p>github上创建仓库<br>git remote add origin <span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://github.com/blue-squirrel/%E4%BB%93%E5%BA%93%E5%90%8D.git\" >https://github.com/blue-squirrel/仓库名.git</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>   设置远程仓库<br>git push -u origin master   推送到远程分支</p>\n\n        <h2 id=\"分支\"   >\n          <a href=\"#分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2>\n      <p>git branch  列出本地分支<br>git branch -a   列出本地和远程分支<br>git branch -D 分支名    强制删除分支<br>git checkout -b 分支名 origin&#x2F;分支名    拉取远程到本地</p>\n\n        <h2 id=\"git-stash-暂存\"   >\n          <a href=\"#git-stash-暂存\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#git-stash-暂存\" class=\"headerlink\" title=\"git stash 暂存\"></a>git stash 暂存</h2>\n      <p>git stash   把本地的改动暂存<br>git stash save “message”    执行存储时，添加备注<br>git stash pop   应用最近一次暂存，并删除暂存记录<br>git stash apply     应用某个存储,但不会把删除，默认使用第一个,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} 。<br>git stash list     查看stash列表<br>git stash clear     删除所有stash</p>\n\n        <h2 id=\"合并前几次commit为一次\"   >\n          <a href=\"#合并前几次commit为一次\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#合并前几次commit为一次\" class=\"headerlink\" title=\"合并前几次commit为一次\"></a>合并前几次commit为一次</h2>\n      <p><img   src=\"http://mms2.baidu.com/it/u=2534115628,2023806309&fm=253&app=138&f=PNG&fmt=auto&q=75?w=417&h=203\" style=\"\"  alt=\"avatar\"></p>\n<p>git rebase -i <base-commit></p>\n<p>以base-commit为基准，合并基准之后的所有commit</p>\n<p>将类似</p>\n<p>pick  第一次提交<br>pick  第二次提交<br>pick  第三次提交<br>pick  第四次提交</p>\n<p>改成</p>\n<p>pick  第一次提交<br>s     第二次提交<br>s     第三次提交<br>s     第四次提交</p>\n<p>然后会弹出提交commit注释的编辑，保存后会保留注释并合并成一条</p>\n\n        <h2 id=\"git-rebase\"   >\n          <a href=\"#git-rebase\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2>\n      <p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7db69f93ee440a8a5b9b62dd68668c~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"avatar\"></p>\n\n        <h3 id=\"拉取远程的新代码\"   >\n          <a href=\"#拉取远程的新代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#拉取远程的新代码\" class=\"headerlink\" title=\"拉取远程的新代码\"></a>拉取远程的新代码</h3>\n      <p>git pull –rebase</p>\n<p>rebase 会将两个分支进行合并，同时合并之前的 commit 历史。如果出现冲突，解决冲突后执行以下命令即可：</p>\n<p>git add<br>git rebase –continue   继续变基</p>\n\n        <h3 id=\"公共代码库提交PR，拉取新代码\"   >\n          <a href=\"#公共代码库提交PR，拉取新代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#公共代码库提交PR，拉取新代码\" class=\"headerlink\" title=\"公共代码库提交PR，拉取新代码\"></a>公共代码库提交PR，拉取新代码</h3>\n      <p>git pull –rebase upstream master</p>\n<p>修改后 git add . &amp;&amp; git commit -m “”</p>\n<p>git push -f 即可</p>\n","site":{"data":{}},"excerpt":"<p>工作中常用到的git使用命令和技巧</p>","more":"<h2 id=\"基本命令\"   >\n          <a href=\"#基本命令\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2>\n      <p>git add .   添加全部到暂存区<br>git commit -m “备注信息”    提交暂存的修改<br>git commit –am     合并提交<br>git pull    拉取代码并合入 &#x3D;&#x3D;&#x3D; git fetch &amp;&amp; git merge<br>git fetch   只拉取，不合入<br>git checkout .  放弃所有没加入暂存区的代码</p>\n<p>github上创建仓库<br>git remote add origin <span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://github.com/blue-squirrel/%E4%BB%93%E5%BA%93%E5%90%8D.git\" >https://github.com/blue-squirrel/仓库名.git</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>   设置远程仓库<br>git push -u origin master   推送到远程分支</p>\n\n        <h2 id=\"分支\"   >\n          <a href=\"#分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2>\n      <p>git branch  列出本地分支<br>git branch -a   列出本地和远程分支<br>git branch -D 分支名    强制删除分支<br>git checkout -b 分支名 origin&#x2F;分支名    拉取远程到本地</p>\n\n        <h2 id=\"git-stash-暂存\"   >\n          <a href=\"#git-stash-暂存\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#git-stash-暂存\" class=\"headerlink\" title=\"git stash 暂存\"></a>git stash 暂存</h2>\n      <p>git stash   把本地的改动暂存<br>git stash save “message”    执行存储时，添加备注<br>git stash pop   应用最近一次暂存，并删除暂存记录<br>git stash apply     应用某个存储,但不会把删除，默认使用第一个,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} 。<br>git stash list     查看stash列表<br>git stash clear     删除所有stash</p>\n\n        <h2 id=\"合并前几次commit为一次\"   >\n          <a href=\"#合并前几次commit为一次\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#合并前几次commit为一次\" class=\"headerlink\" title=\"合并前几次commit为一次\"></a>合并前几次commit为一次</h2>\n      <p><img   src=\"http://mms2.baidu.com/it/u=2534115628,2023806309&fm=253&app=138&f=PNG&fmt=auto&q=75?w=417&h=203\" style=\"\"  alt=\"avatar\"></p>\n<p>git rebase -i <base-commit></p>\n<p>以base-commit为基准，合并基准之后的所有commit</p>\n<p>将类似</p>\n<p>pick  第一次提交<br>pick  第二次提交<br>pick  第三次提交<br>pick  第四次提交</p>\n<p>改成</p>\n<p>pick  第一次提交<br>s     第二次提交<br>s     第三次提交<br>s     第四次提交</p>\n<p>然后会弹出提交commit注释的编辑，保存后会保留注释并合并成一条</p>\n\n        <h2 id=\"git-rebase\"   >\n          <a href=\"#git-rebase\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2>\n      <p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7db69f93ee440a8a5b9b62dd68668c~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"avatar\"></p>\n\n        <h3 id=\"拉取远程的新代码\"   >\n          <a href=\"#拉取远程的新代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#拉取远程的新代码\" class=\"headerlink\" title=\"拉取远程的新代码\"></a>拉取远程的新代码</h3>\n      <p>git pull –rebase</p>\n<p>rebase 会将两个分支进行合并，同时合并之前的 commit 历史。如果出现冲突，解决冲突后执行以下命令即可：</p>\n<p>git add<br>git rebase –continue   继续变基</p>\n\n        <h3 id=\"公共代码库提交PR，拉取新代码\"   >\n          <a href=\"#公共代码库提交PR，拉取新代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#公共代码库提交PR，拉取新代码\" class=\"headerlink\" title=\"公共代码库提交PR，拉取新代码\"></a>公共代码库提交PR，拉取新代码</h3>\n      <p>git pull –rebase upstream master</p>\n<p>修改后 git add . &amp;&amp; git commit -m “”</p>\n<p>git push -f 即可</p>"},{"title":"Commonjs和Es Module","date":"2022-04-09T16:00:00.000Z","_content":"\n总是对exports和module.exports的用法分不清？export和export default混用？快来看看他们的用法吧！\n<!-- more -->\n\n# Commonjs和Es Module\n\n## 模块化\n\n早期 JavaScript 开发很容易存在**全局污染**和**依赖管理**混乱问题。这些问题在多人开发前端应用的情况下变得更加棘手。\n\n```\n<body>\n\n  <script src=\"./index.js\"></script>\n  <script src=\"./home.js\"></script>\n  <script src=\"./list.js\"></script>\n\n</body>\n```\n\n如上在没有模块化的前提下,不同的js文件中的变量可能产生全局污染。\n\n所以就需要模块化来解决上述的问题，今天我们就重点讲解一下前端模块化的两个重要方案：**Commonjs** 和 **Es Module**\n\n## Commonjs\n\n目前 `commonjs` 广泛应用于以下几个场景：\n\n- `Node` 是 CommonJS 在服务器端一个具有代表性的实现；\n- `Browserify` 是 CommonJS 在浏览器中的一种实现；\n- `webpack` 打包工具对 CommonJS 的支持和转换；也就是前端应用也可以在编译之前，尽情使用 CommonJS 进行开发。\n\n#### commonjs 实现原理\n\n每个模块文件上存在 `module`，`exports`，`require`三个变量，然而这三个变量是没有被定义的，但是我们可以在 Commonjs 规范下每一个 js 模块上直接使用它们。在 nodejs 中还存在 `__filename` 和 `__dirname` 变量。\n\n- `module` 记录当前模块信息。\n- require 引入模块的方法。\n- `exports` 当前模块导出的属性\n- __filename 当前文件的绝对路径\n- __dirname 当前文件夹的绝对路径\n\n在 Commonjs 规范下模块中，会形成一个**包装函数**，我们写的代码将作为包装函数的执行上下文，使用的 `require` ，`exports` ，`module` 本质上是通过形参的方式传递到包装函数中的。\n\n这就是为什么可以直接使用以上变量。\n\n```javascript\nfunction wrapper (script) {\n    return '(function (exports, require, module, __filename, __dirname) {' + \n        script +\n     '\\n})'\n}\n```\n\n#### require 文件加载流程\n\n```\nconst fs =      require('fs')      // ①核心模块\nconst sayName = require('./hello.js')  //② 文件模块\nconst crypto =  require('crypto-js')   // ③第三方自定义模块\n```\n\n首先我们看一下 ` nodejs` 中对标识符的处理原则。\n\n- 首先像 fs ，http ，path 等标识符，会被作为 nodejs 的**核心模块**。\n- ` ./` 和 `../` 作为相对路径的**文件模块**， `/` 作为绝对路径的**文件模块**。\n- 非路径形式也非核心模块的模块，将作为**自定义模块**。\n\n**核心模块的处理：**\n\n核心模块的优先级仅次于缓存加载，在 `Node` 源码编译中，已被编译成二进制代码，所以加载核心模块，加载过程中速度最快。\n\n**路径形式的文件模块处理：**\n\n以 `./` ，`../` 和 `/` 开始的标识符，会被当作文件模块处理。`require()` 方法会将路径转换成真实路径，并以真实路径作为索引，将编译后的结果缓存起来，第二次加载的时候会更快。\n\n**自定义模块处理：** 自定义模块，一般指的是非核心的模块，它可能是一个文件或者一个包，它的查找会遵循以下原则：\n\n- 在当前目录下的 `node_modules` 目录查找。\n- 如果没有，在父级目录的 `node_modules` 查找，如果没有在父级目录的父级目录的 `node_modules` 中查找。\n- 沿着路径向上递归，直到根目录下的 `node_modules` 目录。\n- 在查找过程中，会找 `package.json` 下 main 属性指向的文件，如果没有  `package.json` ，在 node 环境下会以此查找 `index.js` ，`index.json` ，`index.node`。\n\n#### require 模块引入与处理\n\na.js\n\n```\nconst getMes = require('./b')\nconsole.log('我是 a 文件')\nexports.say = function(){\n    const message = getMes()\n    console.log(message)\n}\n```\n\nb.js\n\n```\nconst say = require('./a')\nconst  object = {\n   name:'《React进阶实践指南》',\n   author:'我不是外星人'\n}\nconsole.log('我是 b 文件')\nmodule.exports = function(){\n    return object\n}\n```\n\nmain.js\n\n```\nconst a = require('./a')\nconst b = require('./b')\n\nconsole.log('node 入口文件')\n```\n\n运行结果如下\n\n![5.jpg](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b728ce249df740ce8b0232a889283f22~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n从上面的运行结果可以得出以下结论：\n\n- `main.js` 和 `a.js` 模块都引用了 `b.js` 模块，但是 `b.js` 模块只执行了一次。\n- `a.js` 模块 和 `b.js` 模块互相引用，但是没有造成循环引用的情况。\n- 执行顺序是父 -> 子 -> 父；\n\n##### require 加载原理\n\nrequire 的源码大致长如下的样子：\n\n```\n // id 为路径标识符\nfunction require(id) {\n   /* 查找  Module 上有没有已经加载的 js  对象*/\n   const  cachedModule = Module._cache[id]\n   \n   /* 如果已经加载了那么直接取走缓存的 exports 对象  */\n  if(cachedModule){\n    return cachedModule.exports\n  }\n \n  /* 创建当前模块的 module  */\n  const module = { exports: {} ,loaded: false , ...}\n\n  /* 将 module 缓存到  Module 的缓存属性中，路径标识符作为 id */  \n  Module._cache[id] = module\n  /* 加载文件 */\n  runInThisContext(wrapper('module.exports = \"123\"'))(module.exports, require, module, __filename, __dirname)\n  /* 加载完成 *//\n  module.loaded = true \n  /* 返回值 */\n  return module.exports\n}\n```\n\n从上面我们总结出一次 `require` 大致流程是这样的；\n\n- require 会接收一个参数——文件标识符，然后分析定位文件，分析过程我们上述已经讲到了，加下来会从 Module 上查找有没有缓存，**如果有缓存，那么直接返回缓存的内容。**\n- 如果没有缓存，会创建一个 module 对象，**缓存到** Module 上，**然后执行文件**，加载完文件，将 loaded 属性设置为 true ，然后返回 module.exports 对象。借此完成模块加载流程。\n- **模块导出**就是 return 这个变量的其实跟 a = b 赋值一样， 基本类型导出的是值， 引用类型导出的是引用地址。\n- exports 和 module.exports 持有相同引用，因为最后导出的是 module.exports， 所以对 exports 进行赋值会导致 exports 操作的不再是 module.exports 的引用。\n\n##### require 避免重复加载\n\n从上面我们可以直接得出，require 如何避免重复加载的，首先加载之后的文件的 `module` 会被缓存到 `Module` 上，比如一个模块已经 require 引入了 a 模块，如果另外一个模块再次引用 a ，那么会直接读取缓存值 module ，所以无需再次执行模块。\n\n##### require 避免循环引用\n\n那么接下来这个循环引用问题，也就很容易解决了。为了让大家更清晰明白，那么我们接下来一起分析整个流程。\n\n- ① 首先执行 `node main.js` ，那么开始执行第一行 `require(a.js)`；\n- ② 那么首先判断 `a.js` 有没有缓存，因为没有缓存，先加入缓存，然后执行文件 a.js （**需要注意 是先加入缓存， 后执行模块内容**）;\n- ③ a.js 中执行第一行，引用 b.js。\n- ④ 那么判断 `b.js` 有没有缓存，因为没有缓存，所以加入缓存，然后执行 b.js 文件。\n- ⑤ b.js 执行第一行，再一次循环引用 `require(a.js)` 此时的 a.js 已经加入缓存，直接读取值。接下来打印 `console.log('我是 b 文件')`，导出方法。\n- ⑥ b.js 执行完毕，回到 a.js 文件，打印 `console.log('我是 a 文件')`，导出方法。\n- ⑦ 最后回到 `main.js`，打印 `console.log('node 入口文件')` 完成这个流程。\n\n不过这里我们要注意问题：\n\n- 如上第 ⑤ 的时候，当执行 b.js 模块的时候，因为 **a.js 还没有导出 `say` 方法**，**所以 b.js 同步上下文中，获取不到 say。**\n\n那么如何获取到 say 呢，有两种办法：\n\n- 一是用动态加载 a.js 的方法，等使用的时候再使用a.js。\n- 二个就是如上放在异步中加载。\n\n#### exports 和 module.exports\n\n**exports的使用**\n\n```\nexports.name = `《React进阶实践指南》`\nexports.author = `我不是外星人`\nexports.say = function (){\n    console.log(666)\n}\n```\n\n**exports = {} 直接赋值一个对象是不可以的**， 等于重新赋值了形参，那么会重新赋值一份，但是不会在引用原来的形参。\n\n**module.exports 使用**\n\nmodule.exports 本质上就是 exports\n\n```\nmodule.exports ={\n    name:'《React进阶实践指南》',\n    author:'我不是外星人',\n    say(){\n        console.log(666)\n    }\n}\n```\n\n**exports 和 module.exports的区别**\n\n**exports会被初始化成一个对象**，所以不能用 =赋值 去修改内容，但是module.exports可以。\n\n如果我们不想在 commonjs 中导出对象，而是只导出一个**类或者一个函数再或者其他属性**的情况，那么 `module.exports` 就更方便了，如上我们知道 **`exports` 会被初始化成一个对象**，也就是我们只能在对象上绑定属性，但是我们可以通过 `module.exports` 自定义导出出对象外的其他类型元素。\n\n## Es Module\n\n**export 正常导出，import 导入**\n\n导出模块 a.js\n\n```\nconst name = '《React进阶实践指南》' \nconst author = '我不是外星人'\nexport { name, author }\nexport const say = function (){\n    console.log('hello , world')\n}\n```\n\n导入模块 main.js\n\n```\n// name , author , say 对应 a.js 中的  name , author , say\nimport { name , author , say } from './a.js'\n```\n\n##### **混合导入｜导出**\n\n导出模块：`a.js`\n\n```\nexport const name = '《React进阶实践指南》'\nexport const author = '我不是外星人'\n// 默认导出\nexport default  function say (){\n    console.log('hello , world')\n}\n```\n\n导入模块：main.js 中有几种导入方式：\n\n第一种：\n\n```\nimport theSay , { name, author as  bookAuthor } from './a.js'\nconsole.log(\n    theSay,     // ƒ say() {console.log('hello , world') }\n    name,       // \"《React进阶实践指南》\"\n    bookAuthor  // \"我不是外星人\"\n)\n```\n\n第二种：\n\n```\nimport theSay, * as mes from './a'\nconsole.log(\n    theSay, // ƒ say() { console.log('hello , world') }\n    mes // { name:'《React进阶实践指南》' , author: \"我不是外星人\" ，default:  ƒ say() { console.log('hello , world') } }\n)\n```\n\n导出的属性被合并到 `mes` 属性上， `export` 被导入到对应的属性上，`export default` 导出内容被绑定到 `default` 属性上。\n\n##### **模块导出方式**\n\n```\nexport * from 'module' // 第一种方式\nexport { name, author, ..., say } from 'module' // 第二种方式\nexport {   name as bookName ,  author as bookAuthor , ..., say } from 'module' //第三种方式\n```\n\n##### **无需导入模块，只运行模块**\n\n```\nimport 'module' \n```\n\n##### **import() 动态引入**\n\n`import()` 返回一个 `Promise` 对象， 返回的 `Promise` 的 **then 成功回调**中，可以获取模块的加载成功信息。\n\n```\nsetTimeout(() => {\n    const result  = import('./b')\n    result.then(res=>{\n        console.log(res)\n    })\n}, 0);\n```\n\n## Commonjs 和 Es Module 总结\n\n### Commonjs 总结\n\n`Commonjs` 的特性如下：\n\n- CommonJS 模块由 **JS 运行**时实现。\n- CommonJs 是**单个值**导出，本质上导出的就是 exports 属性。\n- CommonJS 是可以**动态加载**的，对每一个加载都存在缓存，可以有效的解决循环引用问题。\n- CommonJS 模块**同步加载并执行**模块文件。\n\n### es module 总结\n\n`Es module` 的特性如下：\n\n- ES6 Module **静态**的，不能放在块级作用域内，代码发生在编译时。\n- ES6 Module 的值是**动态绑定**的，可以通过导出方法修改，可以直接访问修改结果。\n- ES6 Module 可以**导出多个属性和方法**，可以单个导入导出，混合导入导出。\n- ES6 模块**提前加载并执行**模块文件，\n- ES6 Module 导入模块在**严格模式**下。\n- ES6 Module 的特性可以很**容易实现 Tree Shaking 和 Code Splitting。**","source":"_posts/Commonjs和Es Module.md","raw":"---\ntitle: Commonjs和Es Module\ndate: 2022-04-10\n---\n\n总是对exports和module.exports的用法分不清？export和export default混用？快来看看他们的用法吧！\n<!-- more -->\n\n# Commonjs和Es Module\n\n## 模块化\n\n早期 JavaScript 开发很容易存在**全局污染**和**依赖管理**混乱问题。这些问题在多人开发前端应用的情况下变得更加棘手。\n\n```\n<body>\n\n  <script src=\"./index.js\"></script>\n  <script src=\"./home.js\"></script>\n  <script src=\"./list.js\"></script>\n\n</body>\n```\n\n如上在没有模块化的前提下,不同的js文件中的变量可能产生全局污染。\n\n所以就需要模块化来解决上述的问题，今天我们就重点讲解一下前端模块化的两个重要方案：**Commonjs** 和 **Es Module**\n\n## Commonjs\n\n目前 `commonjs` 广泛应用于以下几个场景：\n\n- `Node` 是 CommonJS 在服务器端一个具有代表性的实现；\n- `Browserify` 是 CommonJS 在浏览器中的一种实现；\n- `webpack` 打包工具对 CommonJS 的支持和转换；也就是前端应用也可以在编译之前，尽情使用 CommonJS 进行开发。\n\n#### commonjs 实现原理\n\n每个模块文件上存在 `module`，`exports`，`require`三个变量，然而这三个变量是没有被定义的，但是我们可以在 Commonjs 规范下每一个 js 模块上直接使用它们。在 nodejs 中还存在 `__filename` 和 `__dirname` 变量。\n\n- `module` 记录当前模块信息。\n- require 引入模块的方法。\n- `exports` 当前模块导出的属性\n- __filename 当前文件的绝对路径\n- __dirname 当前文件夹的绝对路径\n\n在 Commonjs 规范下模块中，会形成一个**包装函数**，我们写的代码将作为包装函数的执行上下文，使用的 `require` ，`exports` ，`module` 本质上是通过形参的方式传递到包装函数中的。\n\n这就是为什么可以直接使用以上变量。\n\n```javascript\nfunction wrapper (script) {\n    return '(function (exports, require, module, __filename, __dirname) {' + \n        script +\n     '\\n})'\n}\n```\n\n#### require 文件加载流程\n\n```\nconst fs =      require('fs')      // ①核心模块\nconst sayName = require('./hello.js')  //② 文件模块\nconst crypto =  require('crypto-js')   // ③第三方自定义模块\n```\n\n首先我们看一下 ` nodejs` 中对标识符的处理原则。\n\n- 首先像 fs ，http ，path 等标识符，会被作为 nodejs 的**核心模块**。\n- ` ./` 和 `../` 作为相对路径的**文件模块**， `/` 作为绝对路径的**文件模块**。\n- 非路径形式也非核心模块的模块，将作为**自定义模块**。\n\n**核心模块的处理：**\n\n核心模块的优先级仅次于缓存加载，在 `Node` 源码编译中，已被编译成二进制代码，所以加载核心模块，加载过程中速度最快。\n\n**路径形式的文件模块处理：**\n\n以 `./` ，`../` 和 `/` 开始的标识符，会被当作文件模块处理。`require()` 方法会将路径转换成真实路径，并以真实路径作为索引，将编译后的结果缓存起来，第二次加载的时候会更快。\n\n**自定义模块处理：** 自定义模块，一般指的是非核心的模块，它可能是一个文件或者一个包，它的查找会遵循以下原则：\n\n- 在当前目录下的 `node_modules` 目录查找。\n- 如果没有，在父级目录的 `node_modules` 查找，如果没有在父级目录的父级目录的 `node_modules` 中查找。\n- 沿着路径向上递归，直到根目录下的 `node_modules` 目录。\n- 在查找过程中，会找 `package.json` 下 main 属性指向的文件，如果没有  `package.json` ，在 node 环境下会以此查找 `index.js` ，`index.json` ，`index.node`。\n\n#### require 模块引入与处理\n\na.js\n\n```\nconst getMes = require('./b')\nconsole.log('我是 a 文件')\nexports.say = function(){\n    const message = getMes()\n    console.log(message)\n}\n```\n\nb.js\n\n```\nconst say = require('./a')\nconst  object = {\n   name:'《React进阶实践指南》',\n   author:'我不是外星人'\n}\nconsole.log('我是 b 文件')\nmodule.exports = function(){\n    return object\n}\n```\n\nmain.js\n\n```\nconst a = require('./a')\nconst b = require('./b')\n\nconsole.log('node 入口文件')\n```\n\n运行结果如下\n\n![5.jpg](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b728ce249df740ce8b0232a889283f22~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n从上面的运行结果可以得出以下结论：\n\n- `main.js` 和 `a.js` 模块都引用了 `b.js` 模块，但是 `b.js` 模块只执行了一次。\n- `a.js` 模块 和 `b.js` 模块互相引用，但是没有造成循环引用的情况。\n- 执行顺序是父 -> 子 -> 父；\n\n##### require 加载原理\n\nrequire 的源码大致长如下的样子：\n\n```\n // id 为路径标识符\nfunction require(id) {\n   /* 查找  Module 上有没有已经加载的 js  对象*/\n   const  cachedModule = Module._cache[id]\n   \n   /* 如果已经加载了那么直接取走缓存的 exports 对象  */\n  if(cachedModule){\n    return cachedModule.exports\n  }\n \n  /* 创建当前模块的 module  */\n  const module = { exports: {} ,loaded: false , ...}\n\n  /* 将 module 缓存到  Module 的缓存属性中，路径标识符作为 id */  \n  Module._cache[id] = module\n  /* 加载文件 */\n  runInThisContext(wrapper('module.exports = \"123\"'))(module.exports, require, module, __filename, __dirname)\n  /* 加载完成 *//\n  module.loaded = true \n  /* 返回值 */\n  return module.exports\n}\n```\n\n从上面我们总结出一次 `require` 大致流程是这样的；\n\n- require 会接收一个参数——文件标识符，然后分析定位文件，分析过程我们上述已经讲到了，加下来会从 Module 上查找有没有缓存，**如果有缓存，那么直接返回缓存的内容。**\n- 如果没有缓存，会创建一个 module 对象，**缓存到** Module 上，**然后执行文件**，加载完文件，将 loaded 属性设置为 true ，然后返回 module.exports 对象。借此完成模块加载流程。\n- **模块导出**就是 return 这个变量的其实跟 a = b 赋值一样， 基本类型导出的是值， 引用类型导出的是引用地址。\n- exports 和 module.exports 持有相同引用，因为最后导出的是 module.exports， 所以对 exports 进行赋值会导致 exports 操作的不再是 module.exports 的引用。\n\n##### require 避免重复加载\n\n从上面我们可以直接得出，require 如何避免重复加载的，首先加载之后的文件的 `module` 会被缓存到 `Module` 上，比如一个模块已经 require 引入了 a 模块，如果另外一个模块再次引用 a ，那么会直接读取缓存值 module ，所以无需再次执行模块。\n\n##### require 避免循环引用\n\n那么接下来这个循环引用问题，也就很容易解决了。为了让大家更清晰明白，那么我们接下来一起分析整个流程。\n\n- ① 首先执行 `node main.js` ，那么开始执行第一行 `require(a.js)`；\n- ② 那么首先判断 `a.js` 有没有缓存，因为没有缓存，先加入缓存，然后执行文件 a.js （**需要注意 是先加入缓存， 后执行模块内容**）;\n- ③ a.js 中执行第一行，引用 b.js。\n- ④ 那么判断 `b.js` 有没有缓存，因为没有缓存，所以加入缓存，然后执行 b.js 文件。\n- ⑤ b.js 执行第一行，再一次循环引用 `require(a.js)` 此时的 a.js 已经加入缓存，直接读取值。接下来打印 `console.log('我是 b 文件')`，导出方法。\n- ⑥ b.js 执行完毕，回到 a.js 文件，打印 `console.log('我是 a 文件')`，导出方法。\n- ⑦ 最后回到 `main.js`，打印 `console.log('node 入口文件')` 完成这个流程。\n\n不过这里我们要注意问题：\n\n- 如上第 ⑤ 的时候，当执行 b.js 模块的时候，因为 **a.js 还没有导出 `say` 方法**，**所以 b.js 同步上下文中，获取不到 say。**\n\n那么如何获取到 say 呢，有两种办法：\n\n- 一是用动态加载 a.js 的方法，等使用的时候再使用a.js。\n- 二个就是如上放在异步中加载。\n\n#### exports 和 module.exports\n\n**exports的使用**\n\n```\nexports.name = `《React进阶实践指南》`\nexports.author = `我不是外星人`\nexports.say = function (){\n    console.log(666)\n}\n```\n\n**exports = {} 直接赋值一个对象是不可以的**， 等于重新赋值了形参，那么会重新赋值一份，但是不会在引用原来的形参。\n\n**module.exports 使用**\n\nmodule.exports 本质上就是 exports\n\n```\nmodule.exports ={\n    name:'《React进阶实践指南》',\n    author:'我不是外星人',\n    say(){\n        console.log(666)\n    }\n}\n```\n\n**exports 和 module.exports的区别**\n\n**exports会被初始化成一个对象**，所以不能用 =赋值 去修改内容，但是module.exports可以。\n\n如果我们不想在 commonjs 中导出对象，而是只导出一个**类或者一个函数再或者其他属性**的情况，那么 `module.exports` 就更方便了，如上我们知道 **`exports` 会被初始化成一个对象**，也就是我们只能在对象上绑定属性，但是我们可以通过 `module.exports` 自定义导出出对象外的其他类型元素。\n\n## Es Module\n\n**export 正常导出，import 导入**\n\n导出模块 a.js\n\n```\nconst name = '《React进阶实践指南》' \nconst author = '我不是外星人'\nexport { name, author }\nexport const say = function (){\n    console.log('hello , world')\n}\n```\n\n导入模块 main.js\n\n```\n// name , author , say 对应 a.js 中的  name , author , say\nimport { name , author , say } from './a.js'\n```\n\n##### **混合导入｜导出**\n\n导出模块：`a.js`\n\n```\nexport const name = '《React进阶实践指南》'\nexport const author = '我不是外星人'\n// 默认导出\nexport default  function say (){\n    console.log('hello , world')\n}\n```\n\n导入模块：main.js 中有几种导入方式：\n\n第一种：\n\n```\nimport theSay , { name, author as  bookAuthor } from './a.js'\nconsole.log(\n    theSay,     // ƒ say() {console.log('hello , world') }\n    name,       // \"《React进阶实践指南》\"\n    bookAuthor  // \"我不是外星人\"\n)\n```\n\n第二种：\n\n```\nimport theSay, * as mes from './a'\nconsole.log(\n    theSay, // ƒ say() { console.log('hello , world') }\n    mes // { name:'《React进阶实践指南》' , author: \"我不是外星人\" ，default:  ƒ say() { console.log('hello , world') } }\n)\n```\n\n导出的属性被合并到 `mes` 属性上， `export` 被导入到对应的属性上，`export default` 导出内容被绑定到 `default` 属性上。\n\n##### **模块导出方式**\n\n```\nexport * from 'module' // 第一种方式\nexport { name, author, ..., say } from 'module' // 第二种方式\nexport {   name as bookName ,  author as bookAuthor , ..., say } from 'module' //第三种方式\n```\n\n##### **无需导入模块，只运行模块**\n\n```\nimport 'module' \n```\n\n##### **import() 动态引入**\n\n`import()` 返回一个 `Promise` 对象， 返回的 `Promise` 的 **then 成功回调**中，可以获取模块的加载成功信息。\n\n```\nsetTimeout(() => {\n    const result  = import('./b')\n    result.then(res=>{\n        console.log(res)\n    })\n}, 0);\n```\n\n## Commonjs 和 Es Module 总结\n\n### Commonjs 总结\n\n`Commonjs` 的特性如下：\n\n- CommonJS 模块由 **JS 运行**时实现。\n- CommonJs 是**单个值**导出，本质上导出的就是 exports 属性。\n- CommonJS 是可以**动态加载**的，对每一个加载都存在缓存，可以有效的解决循环引用问题。\n- CommonJS 模块**同步加载并执行**模块文件。\n\n### es module 总结\n\n`Es module` 的特性如下：\n\n- ES6 Module **静态**的，不能放在块级作用域内，代码发生在编译时。\n- ES6 Module 的值是**动态绑定**的，可以通过导出方法修改，可以直接访问修改结果。\n- ES6 Module 可以**导出多个属性和方法**，可以单个导入导出，混合导入导出。\n- ES6 模块**提前加载并执行**模块文件，\n- ES6 Module 导入模块在**严格模式**下。\n- ES6 Module 的特性可以很**容易实现 Tree Shaking 和 Code Splitting。**","slug":"Commonjs和Es Module","published":1,"updated":"2022-09-02T17:00:14.180Z","_id":"cl4a3rr1z0001lgtt29gue5zz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>总是对exports和module.exports的用法分不清？export和export default混用？快来看看他们的用法吧！</p>\n<span id=\"more\"></span>\n\n\n        <h1 id=\"Commonjs和Es-Module\"   >\n          <a href=\"#Commonjs和Es-Module\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Commonjs和Es-Module\" class=\"headerlink\" title=\"Commonjs和Es Module\"></a>Commonjs和Es Module</h1>\n      \n        <h2 id=\"模块化\"   >\n          <a href=\"#模块化\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2>\n      <p>早期 JavaScript 开发很容易存在<strong>全局污染</strong>和<strong>依赖管理</strong>混乱问题。这些问题在多人开发前端应用的情况下变得更加棘手。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;./home.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;./list.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>如上在没有模块化的前提下,不同的js文件中的变量可能产生全局污染。</p>\n<p>所以就需要模块化来解决上述的问题，今天我们就重点讲解一下前端模块化的两个重要方案：<strong>Commonjs</strong> 和 <strong>Es Module</strong></p>\n\n        <h2 id=\"Commonjs\"   >\n          <a href=\"#Commonjs\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Commonjs\" class=\"headerlink\" title=\"Commonjs\"></a>Commonjs</h2>\n      <p>目前 <code>commonjs</code> 广泛应用于以下几个场景：</p>\n<ul>\n<li><code>Node</code> 是 CommonJS 在服务器端一个具有代表性的实现；</li>\n<li><code>Browserify</code> 是 CommonJS 在浏览器中的一种实现；</li>\n<li><code>webpack</code> 打包工具对 CommonJS 的支持和转换；也就是前端应用也可以在编译之前，尽情使用 CommonJS 进行开发。</li>\n</ul>\n\n        <h4 id=\"commonjs-实现原理\"   >\n          <a href=\"#commonjs-实现原理\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#commonjs-实现原理\" class=\"headerlink\" title=\"commonjs 实现原理\"></a>commonjs 实现原理</h4>\n      <p>每个模块文件上存在 <code>module</code>，<code>exports</code>，<code>require</code>三个变量，然而这三个变量是没有被定义的，但是我们可以在 Commonjs 规范下每一个 js 模块上直接使用它们。在 nodejs 中还存在 <code>__filename</code> 和 <code>__dirname</code> 变量。</p>\n<ul>\n<li><code>module</code> 记录当前模块信息。</li>\n<li>require 引入模块的方法。</li>\n<li><code>exports</code> 当前模块导出的属性</li>\n<li>__filename 当前文件的绝对路径</li>\n<li>__dirname 当前文件夹的绝对路径</li>\n</ul>\n<p>在 Commonjs 规范下模块中，会形成一个<strong>包装函数</strong>，我们写的代码将作为包装函数的执行上下文，使用的 <code>require</code> ，<code>exports</code> ，<code>module</code> 本质上是通过形参的方式传递到包装函数中的。</p>\n<p>这就是为什么可以直接使用以上变量。</p>\n<figure class=\"highlight javascript\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wrapper</span> (script) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;(function (exports, require, module, __filename, __dirname) &#123;&#x27;</span> + </span><br><span class=\"line\">        script +</span><br><span class=\"line\">     <span class=\"string\">&#x27;\\n&#125;)&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"require-文件加载流程\"   >\n          <a href=\"#require-文件加载流程\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-文件加载流程\" class=\"headerlink\" title=\"require 文件加载流程\"></a>require 文件加载流程</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs =      require(&#x27;fs&#x27;)      // ①核心模块</span><br><span class=\"line\">const sayName = require(&#x27;./hello.js&#x27;)  //② 文件模块</span><br><span class=\"line\">const crypto =  require(&#x27;crypto-js&#x27;)   // ③第三方自定义模块</span><br></pre></td></tr></table></div></figure>\n\n<p>首先我们看一下 <code> nodejs</code> 中对标识符的处理原则。</p>\n<ul>\n<li>首先像 fs ，http ，path 等标识符，会被作为 nodejs 的<strong>核心模块</strong>。</li>\n<li><code> ./</code> 和 <code>../</code> 作为相对路径的<strong>文件模块</strong>， <code>/</code> 作为绝对路径的<strong>文件模块</strong>。</li>\n<li>非路径形式也非核心模块的模块，将作为<strong>自定义模块</strong>。</li>\n</ul>\n<p><strong>核心模块的处理：</strong></p>\n<p>核心模块的优先级仅次于缓存加载，在 <code>Node</code> 源码编译中，已被编译成二进制代码，所以加载核心模块，加载过程中速度最快。</p>\n<p><strong>路径形式的文件模块处理：</strong></p>\n<p>以 <code>./</code> ，<code>../</code> 和 <code>/</code> 开始的标识符，会被当作文件模块处理。<code>require()</code> 方法会将路径转换成真实路径，并以真实路径作为索引，将编译后的结果缓存起来，第二次加载的时候会更快。</p>\n<p><strong>自定义模块处理：</strong> 自定义模块，一般指的是非核心的模块，它可能是一个文件或者一个包，它的查找会遵循以下原则：</p>\n<ul>\n<li>在当前目录下的 <code>node_modules</code> 目录查找。</li>\n<li>如果没有，在父级目录的 <code>node_modules</code> 查找，如果没有在父级目录的父级目录的 <code>node_modules</code> 中查找。</li>\n<li>沿着路径向上递归，直到根目录下的 <code>node_modules</code> 目录。</li>\n<li>在查找过程中，会找 <code>package.json</code> 下 main 属性指向的文件，如果没有  <code>package.json</code> ，在 node 环境下会以此查找 <code>index.js</code> ，<code>index.json</code> ，<code>index.node</code>。</li>\n</ul>\n\n        <h4 id=\"require-模块引入与处理\"   >\n          <a href=\"#require-模块引入与处理\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-模块引入与处理\" class=\"headerlink\" title=\"require 模块引入与处理\"></a>require 模块引入与处理</h4>\n      <p>a.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const getMes = require(&#x27;./b&#x27;)</span><br><span class=\"line\">console.log(&#x27;我是 a 文件&#x27;)</span><br><span class=\"line\">exports.say = function()&#123;</span><br><span class=\"line\">    const message = getMes()</span><br><span class=\"line\">    console.log(message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>b.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const say = require(&#x27;./a&#x27;)</span><br><span class=\"line\">const  object = &#123;</span><br><span class=\"line\">   name:&#x27;《React进阶实践指南》&#x27;,</span><br><span class=\"line\">   author:&#x27;我不是外星人&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(&#x27;我是 b 文件&#x27;)</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    return object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>main.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = require(&#x27;./a&#x27;)</span><br><span class=\"line\">const b = require(&#x27;./b&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;node 入口文件&#x27;)</span><br></pre></td></tr></table></div></figure>\n\n<p>运行结果如下</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b728ce249df740ce8b0232a889283f22~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"5.jpg\"></p>\n<p>从上面的运行结果可以得出以下结论：</p>\n<ul>\n<li><code>main.js</code> 和 <code>a.js</code> 模块都引用了 <code>b.js</code> 模块，但是 <code>b.js</code> 模块只执行了一次。</li>\n<li><code>a.js</code> 模块 和 <code>b.js</code> 模块互相引用，但是没有造成循环引用的情况。</li>\n<li>执行顺序是父 -&gt; 子 -&gt; 父；</li>\n</ul>\n\n        <h5 id=\"require-加载原理\"   >\n          <a href=\"#require-加载原理\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-加载原理\" class=\"headerlink\" title=\"require 加载原理\"></a>require 加载原理</h5>\n      <p>require 的源码大致长如下的样子：</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // id 为路径标识符</span><br><span class=\"line\">function require(id) &#123;</span><br><span class=\"line\">   /* 查找  Module 上有没有已经加载的 js  对象*/</span><br><span class=\"line\">   const  cachedModule = Module._cache[id]</span><br><span class=\"line\">   </span><br><span class=\"line\">   /* 如果已经加载了那么直接取走缓存的 exports 对象  */</span><br><span class=\"line\">  if(cachedModule)&#123;</span><br><span class=\"line\">    return cachedModule.exports</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  /* 创建当前模块的 module  */</span><br><span class=\"line\">  const module = &#123; exports: &#123;&#125; ,loaded: false , ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /* 将 module 缓存到  Module 的缓存属性中，路径标识符作为 id */  </span><br><span class=\"line\">  Module._cache[id] = module</span><br><span class=\"line\">  /* 加载文件 */</span><br><span class=\"line\">  runInThisContext(wrapper(&#x27;module.exports = &quot;123&quot;&#x27;))(module.exports, require, module, __filename, __dirname)</span><br><span class=\"line\">  /* 加载完成 *//</span><br><span class=\"line\">  module.loaded = true </span><br><span class=\"line\">  /* 返回值 */</span><br><span class=\"line\">  return module.exports</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>从上面我们总结出一次 <code>require</code> 大致流程是这样的；</p>\n<ul>\n<li>require 会接收一个参数——文件标识符，然后分析定位文件，分析过程我们上述已经讲到了，加下来会从 Module 上查找有没有缓存，<strong>如果有缓存，那么直接返回缓存的内容。</strong></li>\n<li>如果没有缓存，会创建一个 module 对象，<strong>缓存到</strong> Module 上，<strong>然后执行文件</strong>，加载完文件，将 loaded 属性设置为 true ，然后返回 module.exports 对象。借此完成模块加载流程。</li>\n<li><strong>模块导出</strong>就是 return 这个变量的其实跟 a &#x3D; b 赋值一样， 基本类型导出的是值， 引用类型导出的是引用地址。</li>\n<li>exports 和 module.exports 持有相同引用，因为最后导出的是 module.exports， 所以对 exports 进行赋值会导致 exports 操作的不再是 module.exports 的引用。</li>\n</ul>\n\n        <h5 id=\"require-避免重复加载\"   >\n          <a href=\"#require-避免重复加载\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-避免重复加载\" class=\"headerlink\" title=\"require 避免重复加载\"></a>require 避免重复加载</h5>\n      <p>从上面我们可以直接得出，require 如何避免重复加载的，首先加载之后的文件的 <code>module</code> 会被缓存到 <code>Module</code> 上，比如一个模块已经 require 引入了 a 模块，如果另外一个模块再次引用 a ，那么会直接读取缓存值 module ，所以无需再次执行模块。</p>\n\n        <h5 id=\"require-避免循环引用\"   >\n          <a href=\"#require-避免循环引用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-避免循环引用\" class=\"headerlink\" title=\"require 避免循环引用\"></a>require 避免循环引用</h5>\n      <p>那么接下来这个循环引用问题，也就很容易解决了。为了让大家更清晰明白，那么我们接下来一起分析整个流程。</p>\n<ul>\n<li>① 首先执行 <code>node main.js</code> ，那么开始执行第一行 <code>require(a.js)</code>；</li>\n<li>② 那么首先判断 <code>a.js</code> 有没有缓存，因为没有缓存，先加入缓存，然后执行文件 a.js （<strong>需要注意 是先加入缓存， 后执行模块内容</strong>）;</li>\n<li>③ a.js 中执行第一行，引用 b.js。</li>\n<li>④ 那么判断 <code>b.js</code> 有没有缓存，因为没有缓存，所以加入缓存，然后执行 b.js 文件。</li>\n<li>⑤ b.js 执行第一行，再一次循环引用 <code>require(a.js)</code> 此时的 a.js 已经加入缓存，直接读取值。接下来打印 <code>console.log(&#39;我是 b 文件&#39;)</code>，导出方法。</li>\n<li>⑥ b.js 执行完毕，回到 a.js 文件，打印 <code>console.log(&#39;我是 a 文件&#39;)</code>，导出方法。</li>\n<li>⑦ 最后回到 <code>main.js</code>，打印 <code>console.log(&#39;node 入口文件&#39;)</code> 完成这个流程。</li>\n</ul>\n<p>不过这里我们要注意问题：</p>\n<ul>\n<li>如上第 ⑤ 的时候，当执行 b.js 模块的时候，因为 <strong>a.js 还没有导出 <code>say</code> 方法</strong>，<strong>所以 b.js 同步上下文中，获取不到 say。</strong></li>\n</ul>\n<p>那么如何获取到 say 呢，有两种办法：</p>\n<ul>\n<li>一是用动态加载 a.js 的方法，等使用的时候再使用a.js。</li>\n<li>二个就是如上放在异步中加载。</li>\n</ul>\n\n        <h4 id=\"exports-和-module-exports\"   >\n          <a href=\"#exports-和-module-exports\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#exports-和-module-exports\" class=\"headerlink\" title=\"exports 和 module.exports\"></a>exports 和 module.exports</h4>\n      <p><strong>exports的使用</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.name = `《React进阶实践指南》`</span><br><span class=\"line\">exports.author = `我不是外星人`</span><br><span class=\"line\">exports.say = function ()&#123;</span><br><span class=\"line\">    console.log(666)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>exports &#x3D; {} 直接赋值一个对象是不可以的</strong>， 等于重新赋值了形参，那么会重新赋值一份，但是不会在引用原来的形参。</p>\n<p><strong>module.exports 使用</strong></p>\n<p>module.exports 本质上就是 exports</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports =&#123;</span><br><span class=\"line\">    name:&#x27;《React进阶实践指南》&#x27;,</span><br><span class=\"line\">    author:&#x27;我不是外星人&#x27;,</span><br><span class=\"line\">    say()&#123;</span><br><span class=\"line\">        console.log(666)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>exports 和 module.exports的区别</strong></p>\n<p><strong>exports会被初始化成一个对象</strong>，所以不能用 &#x3D;赋值 去修改内容，但是module.exports可以。</p>\n<p>如果我们不想在 commonjs 中导出对象，而是只导出一个<strong>类或者一个函数再或者其他属性</strong>的情况，那么 <code>module.exports</code> 就更方便了，如上我们知道 <strong><code>exports</code> 会被初始化成一个对象</strong>，也就是我们只能在对象上绑定属性，但是我们可以通过 <code>module.exports</code> 自定义导出出对象外的其他类型元素。</p>\n\n        <h2 id=\"Es-Module\"   >\n          <a href=\"#Es-Module\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Es-Module\" class=\"headerlink\" title=\"Es Module\"></a>Es Module</h2>\n      <p><strong>export 正常导出，import 导入</strong></p>\n<p>导出模块 a.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const name = &#x27;《React进阶实践指南》&#x27; </span><br><span class=\"line\">const author = &#x27;我不是外星人&#x27;</span><br><span class=\"line\">export &#123; name, author &#125;</span><br><span class=\"line\">export const say = function ()&#123;</span><br><span class=\"line\">    console.log(&#x27;hello , world&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>导入模块 main.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// name , author , say 对应 a.js 中的  name , author , say</span><br><span class=\"line\">import &#123; name , author , say &#125; from &#x27;./a.js&#x27;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h5 id=\"混合导入｜导出\"   >\n          <a href=\"#混合导入｜导出\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#混合导入｜导出\" class=\"headerlink\" title=\"混合导入｜导出\"></a><strong>混合导入｜导出</strong></h5>\n      <p>导出模块：<code>a.js</code></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const name = &#x27;《React进阶实践指南》&#x27;</span><br><span class=\"line\">export const author = &#x27;我不是外星人&#x27;</span><br><span class=\"line\">// 默认导出</span><br><span class=\"line\">export default  function say ()&#123;</span><br><span class=\"line\">    console.log(&#x27;hello , world&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>导入模块：main.js 中有几种导入方式：</p>\n<p>第一种：</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import theSay , &#123; name, author as  bookAuthor &#125; from &#x27;./a.js&#x27;</span><br><span class=\"line\">console.log(</span><br><span class=\"line\">    theSay,     // ƒ say() &#123;console.log(&#x27;hello , world&#x27;) &#125;</span><br><span class=\"line\">    name,       // &quot;《React进阶实践指南》&quot;</span><br><span class=\"line\">    bookAuthor  // &quot;我不是外星人&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p>第二种：</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import theSay, * as mes from &#x27;./a&#x27;</span><br><span class=\"line\">console.log(</span><br><span class=\"line\">    theSay, // ƒ say() &#123; console.log(&#x27;hello , world&#x27;) &#125;</span><br><span class=\"line\">    mes // &#123; name:&#x27;《React进阶实践指南》&#x27; , author: &quot;我不是外星人&quot; ，default:  ƒ say() &#123; console.log(&#x27;hello , world&#x27;) &#125; &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p>导出的属性被合并到 <code>mes</code> 属性上， <code>export</code> 被导入到对应的属性上，<code>export default</code> 导出内容被绑定到 <code>default</code> 属性上。</p>\n\n        <h5 id=\"模块导出方式\"   >\n          <a href=\"#模块导出方式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模块导出方式\" class=\"headerlink\" title=\"模块导出方式\"></a><strong>模块导出方式</strong></h5>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export * from &#x27;module&#x27; // 第一种方式</span><br><span class=\"line\">export &#123; name, author, ..., say &#125; from &#x27;module&#x27; // 第二种方式</span><br><span class=\"line\">export &#123;   name as bookName ,  author as bookAuthor , ..., say &#125; from &#x27;module&#x27; //第三种方式</span><br></pre></td></tr></table></div></figure>\n\n\n        <h5 id=\"无需导入模块，只运行模块\"   >\n          <a href=\"#无需导入模块，只运行模块\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#无需导入模块，只运行模块\" class=\"headerlink\" title=\"无需导入模块，只运行模块\"></a><strong>无需导入模块，只运行模块</strong></h5>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#x27;module&#x27; </span><br></pre></td></tr></table></div></figure>\n\n\n        <h5 id=\"import-动态引入\"   >\n          <a href=\"#import-动态引入\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#import-动态引入\" class=\"headerlink\" title=\"import() 动态引入\"></a><strong>import() 动态引入</strong></h5>\n      <p><code>import()</code> 返回一个 <code>Promise</code> 对象， 返回的 <code>Promise</code> 的 <strong>then 成功回调</strong>中，可以获取模块的加载成功信息。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    const result  = import(&#x27;./b&#x27;)</span><br><span class=\"line\">    result.then(res=&gt;&#123;</span><br><span class=\"line\">        console.log(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;, 0);</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Commonjs-和-Es-Module-总结\"   >\n          <a href=\"#Commonjs-和-Es-Module-总结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Commonjs-和-Es-Module-总结\" class=\"headerlink\" title=\"Commonjs 和 Es Module 总结\"></a>Commonjs 和 Es Module 总结</h2>\n      \n        <h3 id=\"Commonjs-总结\"   >\n          <a href=\"#Commonjs-总结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Commonjs-总结\" class=\"headerlink\" title=\"Commonjs 总结\"></a>Commonjs 总结</h3>\n      <p><code>Commonjs</code> 的特性如下：</p>\n<ul>\n<li>CommonJS 模块由 <strong>JS 运行</strong>时实现。</li>\n<li>CommonJs 是<strong>单个值</strong>导出，本质上导出的就是 exports 属性。</li>\n<li>CommonJS 是可以<strong>动态加载</strong>的，对每一个加载都存在缓存，可以有效的解决循环引用问题。</li>\n<li>CommonJS 模块<strong>同步加载并执行</strong>模块文件。</li>\n</ul>\n\n        <h3 id=\"es-module-总结\"   >\n          <a href=\"#es-module-总结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#es-module-总结\" class=\"headerlink\" title=\"es module 总结\"></a>es module 总结</h3>\n      <p><code>Es module</code> 的特性如下：</p>\n<ul>\n<li>ES6 Module <strong>静态</strong>的，不能放在块级作用域内，代码发生在编译时。</li>\n<li>ES6 Module 的值是<strong>动态绑定</strong>的，可以通过导出方法修改，可以直接访问修改结果。</li>\n<li>ES6 Module 可以<strong>导出多个属性和方法</strong>，可以单个导入导出，混合导入导出。</li>\n<li>ES6 模块<strong>提前加载并执行</strong>模块文件，</li>\n<li>ES6 Module 导入模块在<strong>严格模式</strong>下。</li>\n<li>ES6 Module 的特性可以很<strong>容易实现 Tree Shaking 和 Code Splitting。</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>总是对exports和module.exports的用法分不清？export和export default混用？快来看看他们的用法吧！</p>","more":"<h1 id=\"Commonjs和Es-Module\"   >\n          <a href=\"#Commonjs和Es-Module\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Commonjs和Es-Module\" class=\"headerlink\" title=\"Commonjs和Es Module\"></a>Commonjs和Es Module</h1>\n      \n        <h2 id=\"模块化\"   >\n          <a href=\"#模块化\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2>\n      <p>早期 JavaScript 开发很容易存在<strong>全局污染</strong>和<strong>依赖管理</strong>混乱问题。这些问题在多人开发前端应用的情况下变得更加棘手。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;./home.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;./list.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>如上在没有模块化的前提下,不同的js文件中的变量可能产生全局污染。</p>\n<p>所以就需要模块化来解决上述的问题，今天我们就重点讲解一下前端模块化的两个重要方案：<strong>Commonjs</strong> 和 <strong>Es Module</strong></p>\n\n        <h2 id=\"Commonjs\"   >\n          <a href=\"#Commonjs\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Commonjs\" class=\"headerlink\" title=\"Commonjs\"></a>Commonjs</h2>\n      <p>目前 <code>commonjs</code> 广泛应用于以下几个场景：</p>\n<ul>\n<li><code>Node</code> 是 CommonJS 在服务器端一个具有代表性的实现；</li>\n<li><code>Browserify</code> 是 CommonJS 在浏览器中的一种实现；</li>\n<li><code>webpack</code> 打包工具对 CommonJS 的支持和转换；也就是前端应用也可以在编译之前，尽情使用 CommonJS 进行开发。</li>\n</ul>\n\n        <h4 id=\"commonjs-实现原理\"   >\n          <a href=\"#commonjs-实现原理\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#commonjs-实现原理\" class=\"headerlink\" title=\"commonjs 实现原理\"></a>commonjs 实现原理</h4>\n      <p>每个模块文件上存在 <code>module</code>，<code>exports</code>，<code>require</code>三个变量，然而这三个变量是没有被定义的，但是我们可以在 Commonjs 规范下每一个 js 模块上直接使用它们。在 nodejs 中还存在 <code>__filename</code> 和 <code>__dirname</code> 变量。</p>\n<ul>\n<li><code>module</code> 记录当前模块信息。</li>\n<li>require 引入模块的方法。</li>\n<li><code>exports</code> 当前模块导出的属性</li>\n<li>__filename 当前文件的绝对路径</li>\n<li>__dirname 当前文件夹的绝对路径</li>\n</ul>\n<p>在 Commonjs 规范下模块中，会形成一个<strong>包装函数</strong>，我们写的代码将作为包装函数的执行上下文，使用的 <code>require</code> ，<code>exports</code> ，<code>module</code> 本质上是通过形参的方式传递到包装函数中的。</p>\n<p>这就是为什么可以直接使用以上变量。</p>\n<figure class=\"highlight javascript\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wrapper</span> (script) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;(function (exports, require, module, __filename, __dirname) &#123;&#x27;</span> + </span><br><span class=\"line\">        script +</span><br><span class=\"line\">     <span class=\"string\">&#x27;\\n&#125;)&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"require-文件加载流程\"   >\n          <a href=\"#require-文件加载流程\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-文件加载流程\" class=\"headerlink\" title=\"require 文件加载流程\"></a>require 文件加载流程</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs =      require(&#x27;fs&#x27;)      // ①核心模块</span><br><span class=\"line\">const sayName = require(&#x27;./hello.js&#x27;)  //② 文件模块</span><br><span class=\"line\">const crypto =  require(&#x27;crypto-js&#x27;)   // ③第三方自定义模块</span><br></pre></td></tr></table></div></figure>\n\n<p>首先我们看一下 <code> nodejs</code> 中对标识符的处理原则。</p>\n<ul>\n<li>首先像 fs ，http ，path 等标识符，会被作为 nodejs 的<strong>核心模块</strong>。</li>\n<li><code> ./</code> 和 <code>../</code> 作为相对路径的<strong>文件模块</strong>， <code>/</code> 作为绝对路径的<strong>文件模块</strong>。</li>\n<li>非路径形式也非核心模块的模块，将作为<strong>自定义模块</strong>。</li>\n</ul>\n<p><strong>核心模块的处理：</strong></p>\n<p>核心模块的优先级仅次于缓存加载，在 <code>Node</code> 源码编译中，已被编译成二进制代码，所以加载核心模块，加载过程中速度最快。</p>\n<p><strong>路径形式的文件模块处理：</strong></p>\n<p>以 <code>./</code> ，<code>../</code> 和 <code>/</code> 开始的标识符，会被当作文件模块处理。<code>require()</code> 方法会将路径转换成真实路径，并以真实路径作为索引，将编译后的结果缓存起来，第二次加载的时候会更快。</p>\n<p><strong>自定义模块处理：</strong> 自定义模块，一般指的是非核心的模块，它可能是一个文件或者一个包，它的查找会遵循以下原则：</p>\n<ul>\n<li>在当前目录下的 <code>node_modules</code> 目录查找。</li>\n<li>如果没有，在父级目录的 <code>node_modules</code> 查找，如果没有在父级目录的父级目录的 <code>node_modules</code> 中查找。</li>\n<li>沿着路径向上递归，直到根目录下的 <code>node_modules</code> 目录。</li>\n<li>在查找过程中，会找 <code>package.json</code> 下 main 属性指向的文件，如果没有  <code>package.json</code> ，在 node 环境下会以此查找 <code>index.js</code> ，<code>index.json</code> ，<code>index.node</code>。</li>\n</ul>\n\n        <h4 id=\"require-模块引入与处理\"   >\n          <a href=\"#require-模块引入与处理\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-模块引入与处理\" class=\"headerlink\" title=\"require 模块引入与处理\"></a>require 模块引入与处理</h4>\n      <p>a.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const getMes = require(&#x27;./b&#x27;)</span><br><span class=\"line\">console.log(&#x27;我是 a 文件&#x27;)</span><br><span class=\"line\">exports.say = function()&#123;</span><br><span class=\"line\">    const message = getMes()</span><br><span class=\"line\">    console.log(message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>b.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const say = require(&#x27;./a&#x27;)</span><br><span class=\"line\">const  object = &#123;</span><br><span class=\"line\">   name:&#x27;《React进阶实践指南》&#x27;,</span><br><span class=\"line\">   author:&#x27;我不是外星人&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(&#x27;我是 b 文件&#x27;)</span><br><span class=\"line\">module.exports = function()&#123;</span><br><span class=\"line\">    return object</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>main.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = require(&#x27;./a&#x27;)</span><br><span class=\"line\">const b = require(&#x27;./b&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#x27;node 入口文件&#x27;)</span><br></pre></td></tr></table></div></figure>\n\n<p>运行结果如下</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b728ce249df740ce8b0232a889283f22~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"5.jpg\"></p>\n<p>从上面的运行结果可以得出以下结论：</p>\n<ul>\n<li><code>main.js</code> 和 <code>a.js</code> 模块都引用了 <code>b.js</code> 模块，但是 <code>b.js</code> 模块只执行了一次。</li>\n<li><code>a.js</code> 模块 和 <code>b.js</code> 模块互相引用，但是没有造成循环引用的情况。</li>\n<li>执行顺序是父 -&gt; 子 -&gt; 父；</li>\n</ul>\n\n        <h5 id=\"require-加载原理\"   >\n          <a href=\"#require-加载原理\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-加载原理\" class=\"headerlink\" title=\"require 加载原理\"></a>require 加载原理</h5>\n      <p>require 的源码大致长如下的样子：</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // id 为路径标识符</span><br><span class=\"line\">function require(id) &#123;</span><br><span class=\"line\">   /* 查找  Module 上有没有已经加载的 js  对象*/</span><br><span class=\"line\">   const  cachedModule = Module._cache[id]</span><br><span class=\"line\">   </span><br><span class=\"line\">   /* 如果已经加载了那么直接取走缓存的 exports 对象  */</span><br><span class=\"line\">  if(cachedModule)&#123;</span><br><span class=\"line\">    return cachedModule.exports</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  /* 创建当前模块的 module  */</span><br><span class=\"line\">  const module = &#123; exports: &#123;&#125; ,loaded: false , ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /* 将 module 缓存到  Module 的缓存属性中，路径标识符作为 id */  </span><br><span class=\"line\">  Module._cache[id] = module</span><br><span class=\"line\">  /* 加载文件 */</span><br><span class=\"line\">  runInThisContext(wrapper(&#x27;module.exports = &quot;123&quot;&#x27;))(module.exports, require, module, __filename, __dirname)</span><br><span class=\"line\">  /* 加载完成 *//</span><br><span class=\"line\">  module.loaded = true </span><br><span class=\"line\">  /* 返回值 */</span><br><span class=\"line\">  return module.exports</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>从上面我们总结出一次 <code>require</code> 大致流程是这样的；</p>\n<ul>\n<li>require 会接收一个参数——文件标识符，然后分析定位文件，分析过程我们上述已经讲到了，加下来会从 Module 上查找有没有缓存，<strong>如果有缓存，那么直接返回缓存的内容。</strong></li>\n<li>如果没有缓存，会创建一个 module 对象，<strong>缓存到</strong> Module 上，<strong>然后执行文件</strong>，加载完文件，将 loaded 属性设置为 true ，然后返回 module.exports 对象。借此完成模块加载流程。</li>\n<li><strong>模块导出</strong>就是 return 这个变量的其实跟 a &#x3D; b 赋值一样， 基本类型导出的是值， 引用类型导出的是引用地址。</li>\n<li>exports 和 module.exports 持有相同引用，因为最后导出的是 module.exports， 所以对 exports 进行赋值会导致 exports 操作的不再是 module.exports 的引用。</li>\n</ul>\n\n        <h5 id=\"require-避免重复加载\"   >\n          <a href=\"#require-避免重复加载\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-避免重复加载\" class=\"headerlink\" title=\"require 避免重复加载\"></a>require 避免重复加载</h5>\n      <p>从上面我们可以直接得出，require 如何避免重复加载的，首先加载之后的文件的 <code>module</code> 会被缓存到 <code>Module</code> 上，比如一个模块已经 require 引入了 a 模块，如果另外一个模块再次引用 a ，那么会直接读取缓存值 module ，所以无需再次执行模块。</p>\n\n        <h5 id=\"require-避免循环引用\"   >\n          <a href=\"#require-避免循环引用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#require-避免循环引用\" class=\"headerlink\" title=\"require 避免循环引用\"></a>require 避免循环引用</h5>\n      <p>那么接下来这个循环引用问题，也就很容易解决了。为了让大家更清晰明白，那么我们接下来一起分析整个流程。</p>\n<ul>\n<li>① 首先执行 <code>node main.js</code> ，那么开始执行第一行 <code>require(a.js)</code>；</li>\n<li>② 那么首先判断 <code>a.js</code> 有没有缓存，因为没有缓存，先加入缓存，然后执行文件 a.js （<strong>需要注意 是先加入缓存， 后执行模块内容</strong>）;</li>\n<li>③ a.js 中执行第一行，引用 b.js。</li>\n<li>④ 那么判断 <code>b.js</code> 有没有缓存，因为没有缓存，所以加入缓存，然后执行 b.js 文件。</li>\n<li>⑤ b.js 执行第一行，再一次循环引用 <code>require(a.js)</code> 此时的 a.js 已经加入缓存，直接读取值。接下来打印 <code>console.log(&#39;我是 b 文件&#39;)</code>，导出方法。</li>\n<li>⑥ b.js 执行完毕，回到 a.js 文件，打印 <code>console.log(&#39;我是 a 文件&#39;)</code>，导出方法。</li>\n<li>⑦ 最后回到 <code>main.js</code>，打印 <code>console.log(&#39;node 入口文件&#39;)</code> 完成这个流程。</li>\n</ul>\n<p>不过这里我们要注意问题：</p>\n<ul>\n<li>如上第 ⑤ 的时候，当执行 b.js 模块的时候，因为 <strong>a.js 还没有导出 <code>say</code> 方法</strong>，<strong>所以 b.js 同步上下文中，获取不到 say。</strong></li>\n</ul>\n<p>那么如何获取到 say 呢，有两种办法：</p>\n<ul>\n<li>一是用动态加载 a.js 的方法，等使用的时候再使用a.js。</li>\n<li>二个就是如上放在异步中加载。</li>\n</ul>\n\n        <h4 id=\"exports-和-module-exports\"   >\n          <a href=\"#exports-和-module-exports\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#exports-和-module-exports\" class=\"headerlink\" title=\"exports 和 module.exports\"></a>exports 和 module.exports</h4>\n      <p><strong>exports的使用</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.name = `《React进阶实践指南》`</span><br><span class=\"line\">exports.author = `我不是外星人`</span><br><span class=\"line\">exports.say = function ()&#123;</span><br><span class=\"line\">    console.log(666)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>exports &#x3D; {} 直接赋值一个对象是不可以的</strong>， 等于重新赋值了形参，那么会重新赋值一份，但是不会在引用原来的形参。</p>\n<p><strong>module.exports 使用</strong></p>\n<p>module.exports 本质上就是 exports</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports =&#123;</span><br><span class=\"line\">    name:&#x27;《React进阶实践指南》&#x27;,</span><br><span class=\"line\">    author:&#x27;我不是外星人&#x27;,</span><br><span class=\"line\">    say()&#123;</span><br><span class=\"line\">        console.log(666)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>exports 和 module.exports的区别</strong></p>\n<p><strong>exports会被初始化成一个对象</strong>，所以不能用 &#x3D;赋值 去修改内容，但是module.exports可以。</p>\n<p>如果我们不想在 commonjs 中导出对象，而是只导出一个<strong>类或者一个函数再或者其他属性</strong>的情况，那么 <code>module.exports</code> 就更方便了，如上我们知道 <strong><code>exports</code> 会被初始化成一个对象</strong>，也就是我们只能在对象上绑定属性，但是我们可以通过 <code>module.exports</code> 自定义导出出对象外的其他类型元素。</p>\n\n        <h2 id=\"Es-Module\"   >\n          <a href=\"#Es-Module\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Es-Module\" class=\"headerlink\" title=\"Es Module\"></a>Es Module</h2>\n      <p><strong>export 正常导出，import 导入</strong></p>\n<p>导出模块 a.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const name = &#x27;《React进阶实践指南》&#x27; </span><br><span class=\"line\">const author = &#x27;我不是外星人&#x27;</span><br><span class=\"line\">export &#123; name, author &#125;</span><br><span class=\"line\">export const say = function ()&#123;</span><br><span class=\"line\">    console.log(&#x27;hello , world&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>导入模块 main.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// name , author , say 对应 a.js 中的  name , author , say</span><br><span class=\"line\">import &#123; name , author , say &#125; from &#x27;./a.js&#x27;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h5 id=\"混合导入｜导出\"   >\n          <a href=\"#混合导入｜导出\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#混合导入｜导出\" class=\"headerlink\" title=\"混合导入｜导出\"></a><strong>混合导入｜导出</strong></h5>\n      <p>导出模块：<code>a.js</code></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const name = &#x27;《React进阶实践指南》&#x27;</span><br><span class=\"line\">export const author = &#x27;我不是外星人&#x27;</span><br><span class=\"line\">// 默认导出</span><br><span class=\"line\">export default  function say ()&#123;</span><br><span class=\"line\">    console.log(&#x27;hello , world&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>导入模块：main.js 中有几种导入方式：</p>\n<p>第一种：</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import theSay , &#123; name, author as  bookAuthor &#125; from &#x27;./a.js&#x27;</span><br><span class=\"line\">console.log(</span><br><span class=\"line\">    theSay,     // ƒ say() &#123;console.log(&#x27;hello , world&#x27;) &#125;</span><br><span class=\"line\">    name,       // &quot;《React进阶实践指南》&quot;</span><br><span class=\"line\">    bookAuthor  // &quot;我不是外星人&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p>第二种：</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import theSay, * as mes from &#x27;./a&#x27;</span><br><span class=\"line\">console.log(</span><br><span class=\"line\">    theSay, // ƒ say() &#123; console.log(&#x27;hello , world&#x27;) &#125;</span><br><span class=\"line\">    mes // &#123; name:&#x27;《React进阶实践指南》&#x27; , author: &quot;我不是外星人&quot; ，default:  ƒ say() &#123; console.log(&#x27;hello , world&#x27;) &#125; &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p>导出的属性被合并到 <code>mes</code> 属性上， <code>export</code> 被导入到对应的属性上，<code>export default</code> 导出内容被绑定到 <code>default</code> 属性上。</p>\n\n        <h5 id=\"模块导出方式\"   >\n          <a href=\"#模块导出方式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#模块导出方式\" class=\"headerlink\" title=\"模块导出方式\"></a><strong>模块导出方式</strong></h5>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export * from &#x27;module&#x27; // 第一种方式</span><br><span class=\"line\">export &#123; name, author, ..., say &#125; from &#x27;module&#x27; // 第二种方式</span><br><span class=\"line\">export &#123;   name as bookName ,  author as bookAuthor , ..., say &#125; from &#x27;module&#x27; //第三种方式</span><br></pre></td></tr></table></div></figure>\n\n\n        <h5 id=\"无需导入模块，只运行模块\"   >\n          <a href=\"#无需导入模块，只运行模块\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#无需导入模块，只运行模块\" class=\"headerlink\" title=\"无需导入模块，只运行模块\"></a><strong>无需导入模块，只运行模块</strong></h5>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#x27;module&#x27; </span><br></pre></td></tr></table></div></figure>\n\n\n        <h5 id=\"import-动态引入\"   >\n          <a href=\"#import-动态引入\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#import-动态引入\" class=\"headerlink\" title=\"import() 动态引入\"></a><strong>import() 动态引入</strong></h5>\n      <p><code>import()</code> 返回一个 <code>Promise</code> 对象， 返回的 <code>Promise</code> 的 <strong>then 成功回调</strong>中，可以获取模块的加载成功信息。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    const result  = import(&#x27;./b&#x27;)</span><br><span class=\"line\">    result.then(res=&gt;&#123;</span><br><span class=\"line\">        console.log(res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;, 0);</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Commonjs-和-Es-Module-总结\"   >\n          <a href=\"#Commonjs-和-Es-Module-总结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Commonjs-和-Es-Module-总结\" class=\"headerlink\" title=\"Commonjs 和 Es Module 总结\"></a>Commonjs 和 Es Module 总结</h2>\n      \n        <h3 id=\"Commonjs-总结\"   >\n          <a href=\"#Commonjs-总结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Commonjs-总结\" class=\"headerlink\" title=\"Commonjs 总结\"></a>Commonjs 总结</h3>\n      <p><code>Commonjs</code> 的特性如下：</p>\n<ul>\n<li>CommonJS 模块由 <strong>JS 运行</strong>时实现。</li>\n<li>CommonJs 是<strong>单个值</strong>导出，本质上导出的就是 exports 属性。</li>\n<li>CommonJS 是可以<strong>动态加载</strong>的，对每一个加载都存在缓存，可以有效的解决循环引用问题。</li>\n<li>CommonJS 模块<strong>同步加载并执行</strong>模块文件。</li>\n</ul>\n\n        <h3 id=\"es-module-总结\"   >\n          <a href=\"#es-module-总结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#es-module-总结\" class=\"headerlink\" title=\"es module 总结\"></a>es module 总结</h3>\n      <p><code>Es module</code> 的特性如下：</p>\n<ul>\n<li>ES6 Module <strong>静态</strong>的，不能放在块级作用域内，代码发生在编译时。</li>\n<li>ES6 Module 的值是<strong>动态绑定</strong>的，可以通过导出方法修改，可以直接访问修改结果。</li>\n<li>ES6 Module 可以<strong>导出多个属性和方法</strong>，可以单个导入导出，混合导入导出。</li>\n<li>ES6 模块<strong>提前加载并执行</strong>模块文件，</li>\n<li>ES6 Module 导入模块在<strong>严格模式</strong>下。</li>\n<li>ES6 Module 的特性可以很<strong>容易实现 Tree Shaking 和 Code Splitting。</strong></li>\n</ul>"},{"title":"JS简化技巧","date":"2022-03-05T16:00:00.000Z","_content":"\n一些JS的简写技巧，可以有效提高工作效率和代码可读性。\n<!-- more -->\n\n## 简化技巧\n\n#### 同时声明多个变量时，可简写成一行\n\n```\n//Longhand\nlet x;\nlet y = 20;\n\n//Shorthand\nlet x, y = 20;\n```\n\n#### 过滤空值，不含0\n\n```\n//Longhand\nif(!!a || a === 0 ){\n\tb = a;\n}\n\n//Shorthand\nb = a ?? 666;\n```\n\n#### ~ 按位非判断是否存在于数组\n\n```\n// JavaScript代码\nif ( !~items.indexOf( item ) ) {  \n    items.push(item);  \n}  \n\n// 如果在集合中查找到了item，则该函数返回对应下标,是一个大于0的整数，该整数按位非的结果一定不为0，取逻辑非后，表达式结果为假。\n// 如果在集合中没找到item，则该函数返回-1这个值。而恰好，-1这个值按位非的结果刚好是0,再取逻辑非后，表达式结果为真。\n```\n\n#### 使用双波浪线运算符（~~）代替Math.floor()\n\n```\n//Longhand\nconst floor = Math.floor(6.8); // 6\n\n// Shorthand\nconst floor = ~~6.8; // 6\n\n// ~~两次取反码，将会获取到int值\n```\n\n#### 利用解构，可为多个变量同时赋值\n\n```\n//Longhand\nlet a, b, c;\n\na = 5;\nb = 8;\nc = 12;\n\n//Shorthand\nlet [a, b, c] = [5, 8, 12];\n```\n\n#### 使用解构交换两个变量的值\n\n```\nlet x = 'Hello', y = 55;\n\n//Longhand\nconst temp = x;\nx = y;\ny = temp;\n\n//Shorthand\n[x, y] = [y, x];\n```\n\n#### 使用&&运算符简化if语句\n\n```\n//Longhand\nif (isLoggedin) {\n    goToHomepage();\n }\n\n//Shorthand\nisLoggedin && goToHomepage();\n```\n\n#### 对于多值匹配，可将所有值放在数组中\n\n```\n//Longhand\nif (value === 1 || value === 'one' || value === 2 || value === 'two') {\n  // Execute some code\n}\n\n// Shorthand 2\nif ([1, 'one', 2, 'two'].includes(value)) { \n    // Execute some code \n}\n```\n\n#### 使用repeat()方法简化重复一个字符串\n\n```\n//Longhand\nlet str = '';\nfor(let i = 0; i < 5; i ++) {\n  str += 'Hello ';\n}\nconsole.log(str); // Hello Hello Hello Hello Hello\n\n// Shorthand\n'Hello '.repeat(5);\n```\n\n#### 简化数组合并\n\n```\nlet arr1 = [20, 30];\n\n//Longhand\nlet arr2 = arr1.concat([60, 80]); // [20, 30, 60, 80]\n\n//Shorthand\nlet arr2 = [...arr1, 60, 80]; // [20, 30, 60, 80]\n```\n\n#### 单层对象的拷贝\n\n```\nlet obj = {x: 20, y: {z: 30}};\n\n//Shorthand\nconst cloneObj = JSON.parse(JSON.stringify(obj));\n\n//Shorthand for single level object\nlet obj = {x: 20, y: 'hello'};\nconst cloneObj = {...obj};\n```\n\n#### 寻找数组中的最大和最小值\n\n```\n// Shorthand\nconst arr = [2, 8, 15, 4];\nMath.max(...arr); // 15\nMath.min(...arr); // 2\n```\n\n#### 简化获取字符串中的某个字符\n\n```\nlet str = 'jscurious.com';\n\n//Longhand\nstr.charAt(2); // c\n\n//Shorthand\nstr[2]; // c\n```\n\n#### 移除对象属性\n\n```\nlet obj = {x: 45, y: 72, z: 68, p: 98};\n\n// Longhand\ndelete obj.x;\ndelete obj.p;\nconsole.log(obj); // {y: 72, z: 68}\n\n// Shorthand\nlet {x, p, ...newObj} = obj;\nconsole.log(newObj); // {y: 72, z: 68}\n```\n\n","source":"_posts/JS简化技巧.md","raw":"---\ntitle: JS简化技巧\ndate: 2022-03-06\n---\n\n一些JS的简写技巧，可以有效提高工作效率和代码可读性。\n<!-- more -->\n\n## 简化技巧\n\n#### 同时声明多个变量时，可简写成一行\n\n```\n//Longhand\nlet x;\nlet y = 20;\n\n//Shorthand\nlet x, y = 20;\n```\n\n#### 过滤空值，不含0\n\n```\n//Longhand\nif(!!a || a === 0 ){\n\tb = a;\n}\n\n//Shorthand\nb = a ?? 666;\n```\n\n#### ~ 按位非判断是否存在于数组\n\n```\n// JavaScript代码\nif ( !~items.indexOf( item ) ) {  \n    items.push(item);  \n}  \n\n// 如果在集合中查找到了item，则该函数返回对应下标,是一个大于0的整数，该整数按位非的结果一定不为0，取逻辑非后，表达式结果为假。\n// 如果在集合中没找到item，则该函数返回-1这个值。而恰好，-1这个值按位非的结果刚好是0,再取逻辑非后，表达式结果为真。\n```\n\n#### 使用双波浪线运算符（~~）代替Math.floor()\n\n```\n//Longhand\nconst floor = Math.floor(6.8); // 6\n\n// Shorthand\nconst floor = ~~6.8; // 6\n\n// ~~两次取反码，将会获取到int值\n```\n\n#### 利用解构，可为多个变量同时赋值\n\n```\n//Longhand\nlet a, b, c;\n\na = 5;\nb = 8;\nc = 12;\n\n//Shorthand\nlet [a, b, c] = [5, 8, 12];\n```\n\n#### 使用解构交换两个变量的值\n\n```\nlet x = 'Hello', y = 55;\n\n//Longhand\nconst temp = x;\nx = y;\ny = temp;\n\n//Shorthand\n[x, y] = [y, x];\n```\n\n#### 使用&&运算符简化if语句\n\n```\n//Longhand\nif (isLoggedin) {\n    goToHomepage();\n }\n\n//Shorthand\nisLoggedin && goToHomepage();\n```\n\n#### 对于多值匹配，可将所有值放在数组中\n\n```\n//Longhand\nif (value === 1 || value === 'one' || value === 2 || value === 'two') {\n  // Execute some code\n}\n\n// Shorthand 2\nif ([1, 'one', 2, 'two'].includes(value)) { \n    // Execute some code \n}\n```\n\n#### 使用repeat()方法简化重复一个字符串\n\n```\n//Longhand\nlet str = '';\nfor(let i = 0; i < 5; i ++) {\n  str += 'Hello ';\n}\nconsole.log(str); // Hello Hello Hello Hello Hello\n\n// Shorthand\n'Hello '.repeat(5);\n```\n\n#### 简化数组合并\n\n```\nlet arr1 = [20, 30];\n\n//Longhand\nlet arr2 = arr1.concat([60, 80]); // [20, 30, 60, 80]\n\n//Shorthand\nlet arr2 = [...arr1, 60, 80]; // [20, 30, 60, 80]\n```\n\n#### 单层对象的拷贝\n\n```\nlet obj = {x: 20, y: {z: 30}};\n\n//Shorthand\nconst cloneObj = JSON.parse(JSON.stringify(obj));\n\n//Shorthand for single level object\nlet obj = {x: 20, y: 'hello'};\nconst cloneObj = {...obj};\n```\n\n#### 寻找数组中的最大和最小值\n\n```\n// Shorthand\nconst arr = [2, 8, 15, 4];\nMath.max(...arr); // 15\nMath.min(...arr); // 2\n```\n\n#### 简化获取字符串中的某个字符\n\n```\nlet str = 'jscurious.com';\n\n//Longhand\nstr.charAt(2); // c\n\n//Shorthand\nstr[2]; // c\n```\n\n#### 移除对象属性\n\n```\nlet obj = {x: 45, y: 72, z: 68, p: 98};\n\n// Longhand\ndelete obj.x;\ndelete obj.p;\nconsole.log(obj); // {y: 72, z: 68}\n\n// Shorthand\nlet {x, p, ...newObj} = obj;\nconsole.log(newObj); // {y: 72, z: 68}\n```\n\n","slug":"JS简化技巧","published":1,"updated":"2022-09-02T17:01:11.298Z","_id":"cl4a3rr210002lgtt77ox5i4l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一些JS的简写技巧，可以有效提高工作效率和代码可读性。</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"简化技巧\"   >\n          <a href=\"#简化技巧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化技巧\" class=\"headerlink\" title=\"简化技巧\"></a>简化技巧</h2>\n      \n        <h4 id=\"同时声明多个变量时，可简写成一行\"   >\n          <a href=\"#同时声明多个变量时，可简写成一行\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#同时声明多个变量时，可简写成一行\" class=\"headerlink\" title=\"同时声明多个变量时，可简写成一行\"></a>同时声明多个变量时，可简写成一行</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let x;</span><br><span class=\"line\">let y = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let x, y = 20;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"过滤空值，不含0\"   >\n          <a href=\"#过滤空值，不含0\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#过滤空值，不含0\" class=\"headerlink\" title=\"过滤空值，不含0\"></a>过滤空值，不含0</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if(!!a || a === 0 )&#123;</span><br><span class=\"line\">\tb = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">b = a ?? 666;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"按位非判断是否存在于数组\"   >\n          <a href=\"#按位非判断是否存在于数组\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#按位非判断是否存在于数组\" class=\"headerlink\" title=\"~ 按位非判断是否存在于数组\"></a>~ 按位非判断是否存在于数组</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JavaScript代码</span><br><span class=\"line\">if ( !~items.indexOf( item ) ) &#123;  </span><br><span class=\"line\">    items.push(item);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">// 如果在集合中查找到了item，则该函数返回对应下标,是一个大于0的整数，该整数按位非的结果一定不为0，取逻辑非后，表达式结果为假。</span><br><span class=\"line\">// 如果在集合中没找到item，则该函数返回-1这个值。而恰好，-1这个值按位非的结果刚好是0,再取逻辑非后，表达式结果为真。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用双波浪线运算符（-）代替Math-floor\"   >\n          <a href=\"#使用双波浪线运算符（-）代替Math-floor\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用双波浪线运算符（-）代替Math-floor\" class=\"headerlink\" title=\"使用双波浪线运算符（~~）代替Math.floor()\"></a>使用双波浪线运算符（~~）代替Math.floor()</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">const floor = Math.floor(6.8); // 6</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">const floor = ~~6.8; // 6</span><br><span class=\"line\"></span><br><span class=\"line\">// ~~两次取反码，将会获取到int值</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"利用解构，可为多个变量同时赋值\"   >\n          <a href=\"#利用解构，可为多个变量同时赋值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#利用解构，可为多个变量同时赋值\" class=\"headerlink\" title=\"利用解构，可为多个变量同时赋值\"></a>利用解构，可为多个变量同时赋值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\">a = 5;</span><br><span class=\"line\">b = 8;</span><br><span class=\"line\">c = 12;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let [a, b, c] = [5, 8, 12];</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用解构交换两个变量的值\"   >\n          <a href=\"#使用解构交换两个变量的值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用解构交换两个变量的值\" class=\"headerlink\" title=\"使用解构交换两个变量的值\"></a>使用解构交换两个变量的值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = &#x27;Hello&#x27;, y = 55;</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">const temp = x;</span><br><span class=\"line\">x = y;</span><br><span class=\"line\">y = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用-amp-amp-运算符简化if语句\"   >\n          <a href=\"#使用-amp-amp-运算符简化if语句\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用-amp-amp-运算符简化if语句\" class=\"headerlink\" title=\"使用&amp;&amp;运算符简化if语句\"></a>使用&amp;&amp;运算符简化if语句</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if (isLoggedin) &#123;</span><br><span class=\"line\">    goToHomepage();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">isLoggedin &amp;&amp; goToHomepage();</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"对于多值匹配，可将所有值放在数组中\"   >\n          <a href=\"#对于多值匹配，可将所有值放在数组中\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#对于多值匹配，可将所有值放在数组中\" class=\"headerlink\" title=\"对于多值匹配，可将所有值放在数组中\"></a>对于多值匹配，可将所有值放在数组中</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if (value === 1 || value === &#x27;one&#x27; || value === 2 || value === &#x27;two&#x27;) &#123;</span><br><span class=\"line\">  // Execute some code</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand 2</span><br><span class=\"line\">if ([1, &#x27;one&#x27;, 2, &#x27;two&#x27;].includes(value)) &#123; </span><br><span class=\"line\">    // Execute some code </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用repeat-方法简化重复一个字符串\"   >\n          <a href=\"#使用repeat-方法简化重复一个字符串\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用repeat-方法简化重复一个字符串\" class=\"headerlink\" title=\"使用repeat()方法简化重复一个字符串\"></a>使用repeat()方法简化重复一个字符串</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let str = &#x27;&#x27;;</span><br><span class=\"line\">for(let i = 0; i &lt; 5; i ++) &#123;</span><br><span class=\"line\">  str += &#x27;Hello &#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(str); // Hello Hello Hello Hello Hello</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">&#x27;Hello &#x27;.repeat(5);</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"简化数组合并\"   >\n          <a href=\"#简化数组合并\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化数组合并\" class=\"headerlink\" title=\"简化数组合并\"></a>简化数组合并</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 = [20, 30];</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">let arr2 = arr1.concat([60, 80]); // [20, 30, 60, 80]</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let arr2 = [...arr1, 60, 80]; // [20, 30, 60, 80]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"单层对象的拷贝\"   >\n          <a href=\"#单层对象的拷贝\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单层对象的拷贝\" class=\"headerlink\" title=\"单层对象的拷贝\"></a>单层对象的拷贝</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;x: 20, y: &#123;z: 30&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">const cloneObj = JSON.parse(JSON.stringify(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand for single level object</span><br><span class=\"line\">let obj = &#123;x: 20, y: &#x27;hello&#x27;&#125;;</span><br><span class=\"line\">const cloneObj = &#123;...obj&#125;;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"寻找数组中的最大和最小值\"   >\n          <a href=\"#寻找数组中的最大和最小值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#寻找数组中的最大和最小值\" class=\"headerlink\" title=\"寻找数组中的最大和最小值\"></a>寻找数组中的最大和最小值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Shorthand</span><br><span class=\"line\">const arr = [2, 8, 15, 4];</span><br><span class=\"line\">Math.max(...arr); // 15</span><br><span class=\"line\">Math.min(...arr); // 2</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"简化获取字符串中的某个字符\"   >\n          <a href=\"#简化获取字符串中的某个字符\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化获取字符串中的某个字符\" class=\"headerlink\" title=\"简化获取字符串中的某个字符\"></a>简化获取字符串中的某个字符</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &#x27;jscurious.com&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">str.charAt(2); // c</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">str[2]; // c</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"移除对象属性\"   >\n          <a href=\"#移除对象属性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#移除对象属性\" class=\"headerlink\" title=\"移除对象属性\"></a>移除对象属性</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;x: 45, y: 72, z: 68, p: 98&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Longhand</span><br><span class=\"line\">delete obj.x;</span><br><span class=\"line\">delete obj.p;</span><br><span class=\"line\">console.log(obj); // &#123;y: 72, z: 68&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">let &#123;x, p, ...newObj&#125; = obj;</span><br><span class=\"line\">console.log(newObj); // &#123;y: 72, z: 68&#125;</span><br></pre></td></tr></table></div></figure>\n\n","site":{"data":{}},"excerpt":"<p>一些JS的简写技巧，可以有效提高工作效率和代码可读性。</p>","more":"<h2 id=\"简化技巧\"   >\n          <a href=\"#简化技巧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化技巧\" class=\"headerlink\" title=\"简化技巧\"></a>简化技巧</h2>\n      \n        <h4 id=\"同时声明多个变量时，可简写成一行\"   >\n          <a href=\"#同时声明多个变量时，可简写成一行\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#同时声明多个变量时，可简写成一行\" class=\"headerlink\" title=\"同时声明多个变量时，可简写成一行\"></a>同时声明多个变量时，可简写成一行</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let x;</span><br><span class=\"line\">let y = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let x, y = 20;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"过滤空值，不含0\"   >\n          <a href=\"#过滤空值，不含0\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#过滤空值，不含0\" class=\"headerlink\" title=\"过滤空值，不含0\"></a>过滤空值，不含0</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if(!!a || a === 0 )&#123;</span><br><span class=\"line\">\tb = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">b = a ?? 666;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"按位非判断是否存在于数组\"   >\n          <a href=\"#按位非判断是否存在于数组\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#按位非判断是否存在于数组\" class=\"headerlink\" title=\"~ 按位非判断是否存在于数组\"></a>~ 按位非判断是否存在于数组</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JavaScript代码</span><br><span class=\"line\">if ( !~items.indexOf( item ) ) &#123;  </span><br><span class=\"line\">    items.push(item);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">// 如果在集合中查找到了item，则该函数返回对应下标,是一个大于0的整数，该整数按位非的结果一定不为0，取逻辑非后，表达式结果为假。</span><br><span class=\"line\">// 如果在集合中没找到item，则该函数返回-1这个值。而恰好，-1这个值按位非的结果刚好是0,再取逻辑非后，表达式结果为真。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用双波浪线运算符（-）代替Math-floor\"   >\n          <a href=\"#使用双波浪线运算符（-）代替Math-floor\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用双波浪线运算符（-）代替Math-floor\" class=\"headerlink\" title=\"使用双波浪线运算符（~~）代替Math.floor()\"></a>使用双波浪线运算符（~~）代替Math.floor()</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">const floor = Math.floor(6.8); // 6</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">const floor = ~~6.8; // 6</span><br><span class=\"line\"></span><br><span class=\"line\">// ~~两次取反码，将会获取到int值</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"利用解构，可为多个变量同时赋值\"   >\n          <a href=\"#利用解构，可为多个变量同时赋值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#利用解构，可为多个变量同时赋值\" class=\"headerlink\" title=\"利用解构，可为多个变量同时赋值\"></a>利用解构，可为多个变量同时赋值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\">a = 5;</span><br><span class=\"line\">b = 8;</span><br><span class=\"line\">c = 12;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let [a, b, c] = [5, 8, 12];</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用解构交换两个变量的值\"   >\n          <a href=\"#使用解构交换两个变量的值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用解构交换两个变量的值\" class=\"headerlink\" title=\"使用解构交换两个变量的值\"></a>使用解构交换两个变量的值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = &#x27;Hello&#x27;, y = 55;</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">const temp = x;</span><br><span class=\"line\">x = y;</span><br><span class=\"line\">y = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用-amp-amp-运算符简化if语句\"   >\n          <a href=\"#使用-amp-amp-运算符简化if语句\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用-amp-amp-运算符简化if语句\" class=\"headerlink\" title=\"使用&amp;&amp;运算符简化if语句\"></a>使用&amp;&amp;运算符简化if语句</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if (isLoggedin) &#123;</span><br><span class=\"line\">    goToHomepage();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">isLoggedin &amp;&amp; goToHomepage();</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"对于多值匹配，可将所有值放在数组中\"   >\n          <a href=\"#对于多值匹配，可将所有值放在数组中\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#对于多值匹配，可将所有值放在数组中\" class=\"headerlink\" title=\"对于多值匹配，可将所有值放在数组中\"></a>对于多值匹配，可将所有值放在数组中</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if (value === 1 || value === &#x27;one&#x27; || value === 2 || value === &#x27;two&#x27;) &#123;</span><br><span class=\"line\">  // Execute some code</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand 2</span><br><span class=\"line\">if ([1, &#x27;one&#x27;, 2, &#x27;two&#x27;].includes(value)) &#123; </span><br><span class=\"line\">    // Execute some code </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用repeat-方法简化重复一个字符串\"   >\n          <a href=\"#使用repeat-方法简化重复一个字符串\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用repeat-方法简化重复一个字符串\" class=\"headerlink\" title=\"使用repeat()方法简化重复一个字符串\"></a>使用repeat()方法简化重复一个字符串</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let str = &#x27;&#x27;;</span><br><span class=\"line\">for(let i = 0; i &lt; 5; i ++) &#123;</span><br><span class=\"line\">  str += &#x27;Hello &#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(str); // Hello Hello Hello Hello Hello</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">&#x27;Hello &#x27;.repeat(5);</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"简化数组合并\"   >\n          <a href=\"#简化数组合并\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化数组合并\" class=\"headerlink\" title=\"简化数组合并\"></a>简化数组合并</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 = [20, 30];</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">let arr2 = arr1.concat([60, 80]); // [20, 30, 60, 80]</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let arr2 = [...arr1, 60, 80]; // [20, 30, 60, 80]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"单层对象的拷贝\"   >\n          <a href=\"#单层对象的拷贝\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单层对象的拷贝\" class=\"headerlink\" title=\"单层对象的拷贝\"></a>单层对象的拷贝</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;x: 20, y: &#123;z: 30&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">const cloneObj = JSON.parse(JSON.stringify(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand for single level object</span><br><span class=\"line\">let obj = &#123;x: 20, y: &#x27;hello&#x27;&#125;;</span><br><span class=\"line\">const cloneObj = &#123;...obj&#125;;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"寻找数组中的最大和最小值\"   >\n          <a href=\"#寻找数组中的最大和最小值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#寻找数组中的最大和最小值\" class=\"headerlink\" title=\"寻找数组中的最大和最小值\"></a>寻找数组中的最大和最小值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Shorthand</span><br><span class=\"line\">const arr = [2, 8, 15, 4];</span><br><span class=\"line\">Math.max(...arr); // 15</span><br><span class=\"line\">Math.min(...arr); // 2</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"简化获取字符串中的某个字符\"   >\n          <a href=\"#简化获取字符串中的某个字符\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化获取字符串中的某个字符\" class=\"headerlink\" title=\"简化获取字符串中的某个字符\"></a>简化获取字符串中的某个字符</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &#x27;jscurious.com&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">str.charAt(2); // c</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">str[2]; // c</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"移除对象属性\"   >\n          <a href=\"#移除对象属性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#移除对象属性\" class=\"headerlink\" title=\"移除对象属性\"></a>移除对象属性</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;x: 45, y: 72, z: 68, p: 98&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Longhand</span><br><span class=\"line\">delete obj.x;</span><br><span class=\"line\">delete obj.p;</span><br><span class=\"line\">console.log(obj); // &#123;y: 72, z: 68&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">let &#123;x, p, ...newObj&#125; = obj;</span><br><span class=\"line\">console.log(newObj); // &#123;y: 72, z: 68&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"HTTP2.0","date":"2022-03-07T16:00:00.000Z","_content":"\n你应该了解的HTTP2.0~\n<!-- more -->\n\n## HTTP1.1存在的问题\n\n现在我们先不聊HTTP2, 看一下HTTP发展到1.1存在有哪些问题：\n\n1. **线头阻塞：**TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。\n2. **多个TCP连接：**虽然HTTP/1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。\n3. **头部冗余，采用文本格式：**HTTP/1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。\n4. **客户端需要主动请求**\n\n## HTTP2.0新特性\n\n### 二进制分帧\n\n#### 什么是二进制分帧\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/9/16792b2d88c55af5~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n在二进制分帧层上，HTTP2.0会将所有传输信息分割为更小的消息和帧，并对它们采用二进制格式的编码将其封装。其中，HTTP1.X中的首部信息header封装到Headers帧中，而request body将被封装到Data帧中。\n\n#### 二进制分帧如何工作\n\nHTTP2.0通信都在一个TCP连接上完成，这个连接可以承载**任意数量的双向数据流**，相应的每个数据流以**消息的形式**发送。而消息由一或多个帧组成，这些帧可以乱序发送，然后根据每个帧首部的流标识符重新组装。\n\n#### 二进制分帧对性能优化工作的贡献\n\n二进制分帧主要是为下文中的各种特性提供了基础。它能把一个数据划分封装为更小更便捷的数据。首先是在单链接多资源方式中，减少了服务端的链接压力，内存占用更少，链接吞吐量更大。另一方面，由于**TCP链接的减少而使网络拥塞状态得以改善**，同时慢启动时间的减少。使拥塞和丢包恢复的速度更快\n\n### 首部压缩\n\nHTTP1.1并不支持HTTP首部压缩，为此SPDY和HTTP2.0出现了。SPDY是用的是DEFLATE算法，而HTTP2.0则使用了专门为首部压缩设计的**HPACK算法**。\n\n#### 什么是首部压缩\n\nHTTP1.x每次通讯（请求或响应）都会携带首部信息用于描述资源属性。而HTTP2.0在客户端和服务端之间使用**首部表**来跟踪和存储之前发送的键值对。请求与响应首部的定义在HTTP2.0中基本没有变，只是所有首部键必须全部小写。\n\n#### 首部压缩如何工作\n\n对于相同的数据，不再重新通过每次请求和响应发送。每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。首部表在HTTP2.0的链接存续期内始终存在，由客户端和服务端共同渐进的更新。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c570596a277bf~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n\n\n#### 首部压缩性能优化工作的贡献\n\n首部表在HTTP2.0使用了首部压缩的技术。使报头更紧凑，更快速传输，有利于移动网络环境。减少每次通讯的数据量，使网络拥塞状态得以改善。\n\n### 多路复用\n\n在**HTTP1.1**中，浏览器客户端在同一时间，针对**同一域名下的请求有一定数量的限制**。超过限制数目的请求会被阻塞。而HTTP2.0中的多路复用优化了这一性能。\n\n#### 什么是多路复用\n\n**基于二进制分帧层**，HTTP2.0可以在共享TCP链接的基础上同时发送请求和响应。**HTTP消息被分解为独立的帧**，而不破坏消息本身的语义，交错发出去，在另一端根据**流标识符**和**首部**将他们重新组装起来。\n\n#### 多路复用如何工作\n\n我们来通过与HTTP1.X的对比来看看他是如何工作的。\n\n- HTTP1.x\n\n  ![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b5d678210bb~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n- HTTP2.0\n\n  ![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b6a596f82fe~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n#### 多路复用对性能优化工作的贡献\n\n1. 可以并行交错的发送请求和响应，这些请求和响应之间互不影响\n2. 只使用一个链接即可并行发送多个请求和响应\n3. 消除不必要的延迟，从而减少页面加载的时间\n4. 不必再为绕过HTTP1.x限制而多做很多工作\n\n### 服务器端推送\n\nHTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。这被称为\"服务器推送\"（Server Push）\n\n例如下图所示,服务端主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/2/28/16934a8dd0ad7485~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。\n\n### 请求优先级\n\n把HTTP消息分为很多独立帧之后，就可以通过优化这些帧的交错和传输顺序进一步优化性能。\n\n#### 什么是请求优先级\n\n每个流都可以带有一个31bit的优先值：0表示最高优先级；2的31次方-1表示最低优先级。\n\n客户端明确指定优先级，服务端可以根据这个优先级作为交互数据的依据，比如客户端优先设置为.css>.js>.jpg。\n\n## HTTP/1 的几种优化可以弃用\n\n**合并文件、内联资源、雪碧图、域名分片**对于 HTTP/2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多","source":"_posts/HTTP2.0.md","raw":"---\ntitle: HTTP2.0\ndate: 2022-03-08\n---\n\n你应该了解的HTTP2.0~\n<!-- more -->\n\n## HTTP1.1存在的问题\n\n现在我们先不聊HTTP2, 看一下HTTP发展到1.1存在有哪些问题：\n\n1. **线头阻塞：**TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。\n2. **多个TCP连接：**虽然HTTP/1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。\n3. **头部冗余，采用文本格式：**HTTP/1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。\n4. **客户端需要主动请求**\n\n## HTTP2.0新特性\n\n### 二进制分帧\n\n#### 什么是二进制分帧\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/9/16792b2d88c55af5~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n在二进制分帧层上，HTTP2.0会将所有传输信息分割为更小的消息和帧，并对它们采用二进制格式的编码将其封装。其中，HTTP1.X中的首部信息header封装到Headers帧中，而request body将被封装到Data帧中。\n\n#### 二进制分帧如何工作\n\nHTTP2.0通信都在一个TCP连接上完成，这个连接可以承载**任意数量的双向数据流**，相应的每个数据流以**消息的形式**发送。而消息由一或多个帧组成，这些帧可以乱序发送，然后根据每个帧首部的流标识符重新组装。\n\n#### 二进制分帧对性能优化工作的贡献\n\n二进制分帧主要是为下文中的各种特性提供了基础。它能把一个数据划分封装为更小更便捷的数据。首先是在单链接多资源方式中，减少了服务端的链接压力，内存占用更少，链接吞吐量更大。另一方面，由于**TCP链接的减少而使网络拥塞状态得以改善**，同时慢启动时间的减少。使拥塞和丢包恢复的速度更快\n\n### 首部压缩\n\nHTTP1.1并不支持HTTP首部压缩，为此SPDY和HTTP2.0出现了。SPDY是用的是DEFLATE算法，而HTTP2.0则使用了专门为首部压缩设计的**HPACK算法**。\n\n#### 什么是首部压缩\n\nHTTP1.x每次通讯（请求或响应）都会携带首部信息用于描述资源属性。而HTTP2.0在客户端和服务端之间使用**首部表**来跟踪和存储之前发送的键值对。请求与响应首部的定义在HTTP2.0中基本没有变，只是所有首部键必须全部小写。\n\n#### 首部压缩如何工作\n\n对于相同的数据，不再重新通过每次请求和响应发送。每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。首部表在HTTP2.0的链接存续期内始终存在，由客户端和服务端共同渐进的更新。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c570596a277bf~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n\n\n#### 首部压缩性能优化工作的贡献\n\n首部表在HTTP2.0使用了首部压缩的技术。使报头更紧凑，更快速传输，有利于移动网络环境。减少每次通讯的数据量，使网络拥塞状态得以改善。\n\n### 多路复用\n\n在**HTTP1.1**中，浏览器客户端在同一时间，针对**同一域名下的请求有一定数量的限制**。超过限制数目的请求会被阻塞。而HTTP2.0中的多路复用优化了这一性能。\n\n#### 什么是多路复用\n\n**基于二进制分帧层**，HTTP2.0可以在共享TCP链接的基础上同时发送请求和响应。**HTTP消息被分解为独立的帧**，而不破坏消息本身的语义，交错发出去，在另一端根据**流标识符**和**首部**将他们重新组装起来。\n\n#### 多路复用如何工作\n\n我们来通过与HTTP1.X的对比来看看他是如何工作的。\n\n- HTTP1.x\n\n  ![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b5d678210bb~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n- HTTP2.0\n\n  ![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b6a596f82fe~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n#### 多路复用对性能优化工作的贡献\n\n1. 可以并行交错的发送请求和响应，这些请求和响应之间互不影响\n2. 只使用一个链接即可并行发送多个请求和响应\n3. 消除不必要的延迟，从而减少页面加载的时间\n4. 不必再为绕过HTTP1.x限制而多做很多工作\n\n### 服务器端推送\n\nHTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。这被称为\"服务器推送\"（Server Push）\n\n例如下图所示,服务端主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/2/28/16934a8dd0ad7485~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。\n\n### 请求优先级\n\n把HTTP消息分为很多独立帧之后，就可以通过优化这些帧的交错和传输顺序进一步优化性能。\n\n#### 什么是请求优先级\n\n每个流都可以带有一个31bit的优先值：0表示最高优先级；2的31次方-1表示最低优先级。\n\n客户端明确指定优先级，服务端可以根据这个优先级作为交互数据的依据，比如客户端优先设置为.css>.js>.jpg。\n\n## HTTP/1 的几种优化可以弃用\n\n**合并文件、内联资源、雪碧图、域名分片**对于 HTTP/2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多","slug":"HTTP2.0","published":1,"updated":"2022-09-02T17:01:02.021Z","_id":"cl4a3rr220003lgtt9j60a25k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>你应该了解的HTTP2.0~</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"HTTP1-1存在的问题\"   >\n          <a href=\"#HTTP1-1存在的问题\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP1-1存在的问题\" class=\"headerlink\" title=\"HTTP1.1存在的问题\"></a>HTTP1.1存在的问题</h2>\n      <p>现在我们先不聊HTTP2, 看一下HTTP发展到1.1存在有哪些问题：</p>\n<ol>\n<li><strong>线头阻塞：</strong>TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。</li>\n<li><strong>多个TCP连接：</strong>虽然HTTP&#x2F;1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。</li>\n<li><strong>头部冗余，采用文本格式：</strong>HTTP&#x2F;1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。</li>\n<li><strong>客户端需要主动请求</strong></li>\n</ol>\n\n        <h2 id=\"HTTP2-0新特性\"   >\n          <a href=\"#HTTP2-0新特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP2-0新特性\" class=\"headerlink\" title=\"HTTP2.0新特性\"></a>HTTP2.0新特性</h2>\n      \n        <h3 id=\"二进制分帧\"   >\n          <a href=\"#二进制分帧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧\" class=\"headerlink\" title=\"二进制分帧\"></a>二进制分帧</h3>\n      \n        <h4 id=\"什么是二进制分帧\"   >\n          <a href=\"#什么是二进制分帧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是二进制分帧\" class=\"headerlink\" title=\"什么是二进制分帧\"></a>什么是二进制分帧</h4>\n      <p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/9/16792b2d88c55af5~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<p>在二进制分帧层上，HTTP2.0会将所有传输信息分割为更小的消息和帧，并对它们采用二进制格式的编码将其封装。其中，HTTP1.X中的首部信息header封装到Headers帧中，而request body将被封装到Data帧中。</p>\n\n        <h4 id=\"二进制分帧如何工作\"   >\n          <a href=\"#二进制分帧如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧如何工作\" class=\"headerlink\" title=\"二进制分帧如何工作\"></a>二进制分帧如何工作</h4>\n      <p>HTTP2.0通信都在一个TCP连接上完成，这个连接可以承载<strong>任意数量的双向数据流</strong>，相应的每个数据流以<strong>消息的形式</strong>发送。而消息由一或多个帧组成，这些帧可以乱序发送，然后根据每个帧首部的流标识符重新组装。</p>\n\n        <h4 id=\"二进制分帧对性能优化工作的贡献\"   >\n          <a href=\"#二进制分帧对性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧对性能优化工作的贡献\" class=\"headerlink\" title=\"二进制分帧对性能优化工作的贡献\"></a>二进制分帧对性能优化工作的贡献</h4>\n      <p>二进制分帧主要是为下文中的各种特性提供了基础。它能把一个数据划分封装为更小更便捷的数据。首先是在单链接多资源方式中，减少了服务端的链接压力，内存占用更少，链接吞吐量更大。另一方面，由于<strong>TCP链接的减少而使网络拥塞状态得以改善</strong>，同时慢启动时间的减少。使拥塞和丢包恢复的速度更快</p>\n\n        <h3 id=\"首部压缩\"   >\n          <a href=\"#首部压缩\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩\" class=\"headerlink\" title=\"首部压缩\"></a>首部压缩</h3>\n      <p>HTTP1.1并不支持HTTP首部压缩，为此SPDY和HTTP2.0出现了。SPDY是用的是DEFLATE算法，而HTTP2.0则使用了专门为首部压缩设计的<strong>HPACK算法</strong>。</p>\n\n        <h4 id=\"什么是首部压缩\"   >\n          <a href=\"#什么是首部压缩\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是首部压缩\" class=\"headerlink\" title=\"什么是首部压缩\"></a>什么是首部压缩</h4>\n      <p>HTTP1.x每次通讯（请求或响应）都会携带首部信息用于描述资源属性。而HTTP2.0在客户端和服务端之间使用<strong>首部表</strong>来跟踪和存储之前发送的键值对。请求与响应首部的定义在HTTP2.0中基本没有变，只是所有首部键必须全部小写。</p>\n\n        <h4 id=\"首部压缩如何工作\"   >\n          <a href=\"#首部压缩如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩如何工作\" class=\"headerlink\" title=\"首部压缩如何工作\"></a>首部压缩如何工作</h4>\n      <p>对于相同的数据，不再重新通过每次请求和响应发送。每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。首部表在HTTP2.0的链接存续期内始终存在，由客户端和服务端共同渐进的更新。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c570596a277bf~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n\n        <h4 id=\"首部压缩性能优化工作的贡献\"   >\n          <a href=\"#首部压缩性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩性能优化工作的贡献\" class=\"headerlink\" title=\"首部压缩性能优化工作的贡献\"></a>首部压缩性能优化工作的贡献</h4>\n      <p>首部表在HTTP2.0使用了首部压缩的技术。使报头更紧凑，更快速传输，有利于移动网络环境。减少每次通讯的数据量，使网络拥塞状态得以改善。</p>\n\n        <h3 id=\"多路复用\"   >\n          <a href=\"#多路复用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h3>\n      <p>在<strong>HTTP1.1</strong>中，浏览器客户端在同一时间，针对<strong>同一域名下的请求有一定数量的限制</strong>。超过限制数目的请求会被阻塞。而HTTP2.0中的多路复用优化了这一性能。</p>\n\n        <h4 id=\"什么是多路复用\"   >\n          <a href=\"#什么是多路复用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是多路复用\" class=\"headerlink\" title=\"什么是多路复用\"></a>什么是多路复用</h4>\n      <p><strong>基于二进制分帧层</strong>，HTTP2.0可以在共享TCP链接的基础上同时发送请求和响应。<strong>HTTP消息被分解为独立的帧</strong>，而不破坏消息本身的语义，交错发出去，在另一端根据<strong>流标识符</strong>和<strong>首部</strong>将他们重新组装起来。</p>\n\n        <h4 id=\"多路复用如何工作\"   >\n          <a href=\"#多路复用如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用如何工作\" class=\"headerlink\" title=\"多路复用如何工作\"></a>多路复用如何工作</h4>\n      <p>我们来通过与HTTP1.X的对比来看看他是如何工作的。</p>\n<ul>\n<li><p>HTTP1.x</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b5d678210bb~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n</li>\n<li><p>HTTP2.0</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b6a596f82fe~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n</li>\n</ul>\n\n        <h4 id=\"多路复用对性能优化工作的贡献\"   >\n          <a href=\"#多路复用对性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用对性能优化工作的贡献\" class=\"headerlink\" title=\"多路复用对性能优化工作的贡献\"></a>多路复用对性能优化工作的贡献</h4>\n      <ol>\n<li>可以并行交错的发送请求和响应，这些请求和响应之间互不影响</li>\n<li>只使用一个链接即可并行发送多个请求和响应</li>\n<li>消除不必要的延迟，从而减少页面加载的时间</li>\n<li>不必再为绕过HTTP1.x限制而多做很多工作</li>\n</ol>\n\n        <h3 id=\"服务器端推送\"   >\n          <a href=\"#服务器端推送\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#服务器端推送\" class=\"headerlink\" title=\"服务器端推送\"></a>服务器端推送</h3>\n      <p>HTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。这被称为”服务器推送”（Server Push）</p>\n<p>例如下图所示,服务端主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/2/28/16934a8dd0ad7485~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<p>另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p>\n\n        <h3 id=\"请求优先级\"   >\n          <a href=\"#请求优先级\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#请求优先级\" class=\"headerlink\" title=\"请求优先级\"></a>请求优先级</h3>\n      <p>把HTTP消息分为很多独立帧之后，就可以通过优化这些帧的交错和传输顺序进一步优化性能。</p>\n\n        <h4 id=\"什么是请求优先级\"   >\n          <a href=\"#什么是请求优先级\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是请求优先级\" class=\"headerlink\" title=\"什么是请求优先级\"></a>什么是请求优先级</h4>\n      <p>每个流都可以带有一个31bit的优先值：0表示最高优先级；2的31次方-1表示最低优先级。</p>\n<p>客户端明确指定优先级，服务端可以根据这个优先级作为交互数据的依据，比如客户端优先设置为.css&gt;.js&gt;.jpg。</p>\n\n        <h2 id=\"HTTP-x2F-1-的几种优化可以弃用\"   >\n          <a href=\"#HTTP-x2F-1-的几种优化可以弃用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP-x2F-1-的几种优化可以弃用\" class=\"headerlink\" title=\"HTTP&#x2F;1 的几种优化可以弃用\"></a>HTTP&#x2F;1 的几种优化可以弃用</h2>\n      <p><strong>合并文件、内联资源、雪碧图、域名分片</strong>对于 HTTP&#x2F;2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多</p>\n","site":{"data":{}},"excerpt":"<p>你应该了解的HTTP2.0~</p>","more":"<h2 id=\"HTTP1-1存在的问题\"   >\n          <a href=\"#HTTP1-1存在的问题\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP1-1存在的问题\" class=\"headerlink\" title=\"HTTP1.1存在的问题\"></a>HTTP1.1存在的问题</h2>\n      <p>现在我们先不聊HTTP2, 看一下HTTP发展到1.1存在有哪些问题：</p>\n<ol>\n<li><strong>线头阻塞：</strong>TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。</li>\n<li><strong>多个TCP连接：</strong>虽然HTTP&#x2F;1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。</li>\n<li><strong>头部冗余，采用文本格式：</strong>HTTP&#x2F;1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。</li>\n<li><strong>客户端需要主动请求</strong></li>\n</ol>\n\n        <h2 id=\"HTTP2-0新特性\"   >\n          <a href=\"#HTTP2-0新特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP2-0新特性\" class=\"headerlink\" title=\"HTTP2.0新特性\"></a>HTTP2.0新特性</h2>\n      \n        <h3 id=\"二进制分帧\"   >\n          <a href=\"#二进制分帧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧\" class=\"headerlink\" title=\"二进制分帧\"></a>二进制分帧</h3>\n      \n        <h4 id=\"什么是二进制分帧\"   >\n          <a href=\"#什么是二进制分帧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是二进制分帧\" class=\"headerlink\" title=\"什么是二进制分帧\"></a>什么是二进制分帧</h4>\n      <p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/9/16792b2d88c55af5~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<p>在二进制分帧层上，HTTP2.0会将所有传输信息分割为更小的消息和帧，并对它们采用二进制格式的编码将其封装。其中，HTTP1.X中的首部信息header封装到Headers帧中，而request body将被封装到Data帧中。</p>\n\n        <h4 id=\"二进制分帧如何工作\"   >\n          <a href=\"#二进制分帧如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧如何工作\" class=\"headerlink\" title=\"二进制分帧如何工作\"></a>二进制分帧如何工作</h4>\n      <p>HTTP2.0通信都在一个TCP连接上完成，这个连接可以承载<strong>任意数量的双向数据流</strong>，相应的每个数据流以<strong>消息的形式</strong>发送。而消息由一或多个帧组成，这些帧可以乱序发送，然后根据每个帧首部的流标识符重新组装。</p>\n\n        <h4 id=\"二进制分帧对性能优化工作的贡献\"   >\n          <a href=\"#二进制分帧对性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧对性能优化工作的贡献\" class=\"headerlink\" title=\"二进制分帧对性能优化工作的贡献\"></a>二进制分帧对性能优化工作的贡献</h4>\n      <p>二进制分帧主要是为下文中的各种特性提供了基础。它能把一个数据划分封装为更小更便捷的数据。首先是在单链接多资源方式中，减少了服务端的链接压力，内存占用更少，链接吞吐量更大。另一方面，由于<strong>TCP链接的减少而使网络拥塞状态得以改善</strong>，同时慢启动时间的减少。使拥塞和丢包恢复的速度更快</p>\n\n        <h3 id=\"首部压缩\"   >\n          <a href=\"#首部压缩\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩\" class=\"headerlink\" title=\"首部压缩\"></a>首部压缩</h3>\n      <p>HTTP1.1并不支持HTTP首部压缩，为此SPDY和HTTP2.0出现了。SPDY是用的是DEFLATE算法，而HTTP2.0则使用了专门为首部压缩设计的<strong>HPACK算法</strong>。</p>\n\n        <h4 id=\"什么是首部压缩\"   >\n          <a href=\"#什么是首部压缩\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是首部压缩\" class=\"headerlink\" title=\"什么是首部压缩\"></a>什么是首部压缩</h4>\n      <p>HTTP1.x每次通讯（请求或响应）都会携带首部信息用于描述资源属性。而HTTP2.0在客户端和服务端之间使用<strong>首部表</strong>来跟踪和存储之前发送的键值对。请求与响应首部的定义在HTTP2.0中基本没有变，只是所有首部键必须全部小写。</p>\n\n        <h4 id=\"首部压缩如何工作\"   >\n          <a href=\"#首部压缩如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩如何工作\" class=\"headerlink\" title=\"首部压缩如何工作\"></a>首部压缩如何工作</h4>\n      <p>对于相同的数据，不再重新通过每次请求和响应发送。每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。首部表在HTTP2.0的链接存续期内始终存在，由客户端和服务端共同渐进的更新。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c570596a277bf~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n\n        <h4 id=\"首部压缩性能优化工作的贡献\"   >\n          <a href=\"#首部压缩性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩性能优化工作的贡献\" class=\"headerlink\" title=\"首部压缩性能优化工作的贡献\"></a>首部压缩性能优化工作的贡献</h4>\n      <p>首部表在HTTP2.0使用了首部压缩的技术。使报头更紧凑，更快速传输，有利于移动网络环境。减少每次通讯的数据量，使网络拥塞状态得以改善。</p>\n\n        <h3 id=\"多路复用\"   >\n          <a href=\"#多路复用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h3>\n      <p>在<strong>HTTP1.1</strong>中，浏览器客户端在同一时间，针对<strong>同一域名下的请求有一定数量的限制</strong>。超过限制数目的请求会被阻塞。而HTTP2.0中的多路复用优化了这一性能。</p>\n\n        <h4 id=\"什么是多路复用\"   >\n          <a href=\"#什么是多路复用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是多路复用\" class=\"headerlink\" title=\"什么是多路复用\"></a>什么是多路复用</h4>\n      <p><strong>基于二进制分帧层</strong>，HTTP2.0可以在共享TCP链接的基础上同时发送请求和响应。<strong>HTTP消息被分解为独立的帧</strong>，而不破坏消息本身的语义，交错发出去，在另一端根据<strong>流标识符</strong>和<strong>首部</strong>将他们重新组装起来。</p>\n\n        <h4 id=\"多路复用如何工作\"   >\n          <a href=\"#多路复用如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用如何工作\" class=\"headerlink\" title=\"多路复用如何工作\"></a>多路复用如何工作</h4>\n      <p>我们来通过与HTTP1.X的对比来看看他是如何工作的。</p>\n<ul>\n<li><p>HTTP1.x</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b5d678210bb~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n</li>\n<li><p>HTTP2.0</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b6a596f82fe~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n</li>\n</ul>\n\n        <h4 id=\"多路复用对性能优化工作的贡献\"   >\n          <a href=\"#多路复用对性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用对性能优化工作的贡献\" class=\"headerlink\" title=\"多路复用对性能优化工作的贡献\"></a>多路复用对性能优化工作的贡献</h4>\n      <ol>\n<li>可以并行交错的发送请求和响应，这些请求和响应之间互不影响</li>\n<li>只使用一个链接即可并行发送多个请求和响应</li>\n<li>消除不必要的延迟，从而减少页面加载的时间</li>\n<li>不必再为绕过HTTP1.x限制而多做很多工作</li>\n</ol>\n\n        <h3 id=\"服务器端推送\"   >\n          <a href=\"#服务器端推送\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#服务器端推送\" class=\"headerlink\" title=\"服务器端推送\"></a>服务器端推送</h3>\n      <p>HTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。这被称为”服务器推送”（Server Push）</p>\n<p>例如下图所示,服务端主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/2/28/16934a8dd0ad7485~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<p>另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p>\n\n        <h3 id=\"请求优先级\"   >\n          <a href=\"#请求优先级\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#请求优先级\" class=\"headerlink\" title=\"请求优先级\"></a>请求优先级</h3>\n      <p>把HTTP消息分为很多独立帧之后，就可以通过优化这些帧的交错和传输顺序进一步优化性能。</p>\n\n        <h4 id=\"什么是请求优先级\"   >\n          <a href=\"#什么是请求优先级\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是请求优先级\" class=\"headerlink\" title=\"什么是请求优先级\"></a>什么是请求优先级</h4>\n      <p>每个流都可以带有一个31bit的优先值：0表示最高优先级；2的31次方-1表示最低优先级。</p>\n<p>客户端明确指定优先级，服务端可以根据这个优先级作为交互数据的依据，比如客户端优先设置为.css&gt;.js&gt;.jpg。</p>\n\n        <h2 id=\"HTTP-x2F-1-的几种优化可以弃用\"   >\n          <a href=\"#HTTP-x2F-1-的几种优化可以弃用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP-x2F-1-的几种优化可以弃用\" class=\"headerlink\" title=\"HTTP&#x2F;1 的几种优化可以弃用\"></a>HTTP&#x2F;1 的几种优化可以弃用</h2>\n      <p><strong>合并文件、内联资源、雪碧图、域名分片</strong>对于 HTTP&#x2F;2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多</p>"},{"title":"Webpack基础配置","date":"2022-06-11T16:00:00.000Z","_content":"\n一些Webpack4的基础配置\n<!-- more -->\n\n代码库地址：https://github.com/blue-squirrel/webpack-learn\n\n## 初始化项目\n\n```\n1. mkdir webpack-learn && cd webpack-learn\n2. npm init\n```\n\n添加入口文件/src/index.js和webpack配置文件webpack.config.js\n\n再安装webpack\n\n```\nnpm install webpack webpack-cli -D\n```\n\n在script中添加打包命令\n\n```\n\"build\": \"webpack --config 配置地址/webpack.config.js\"\n```\n\n## 基础配置\n\n### 配置html模板\n\n执行打包命令只是将js文件打包了，但不能每次手动引入打包后的js\n\n**html-webpack-plugin**\n\n```\nnpm i -D html-webpack-plugin\n```\n\n```\n// 自动插入生成文件到html中\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nplugins:[\n        new HtmlWebpackPlugin({\n          template:path.resolve(__dirname,'../public/index.html')\n        })\n     ]\n```\n\n**clean-webpack-plugin**\n\n```\nnpm install clean-webpack-plugin -D\n```\n\n```\n// 清空上次打包文件\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin')\n\nplugins:[\n        new CleanWebpackPlugin(),\n    ]\n```\n\n### CSS支持\n\n**为css添加浏览器前缀**\n\n```\nnpm i -D postcss-loader autoprefixer  \n```\n\n```\nrules:[\n          {\n            test:/\\.css$/,\n            use:['style-loader','css-loader'] // 从右向左解析原则\n          },\n          {\n            test:/\\.less$/,\n            use:[MiniCssExtractPlugin.loader,'css-loader','less-loader',{\n                loader: 'postcss-loader', // 为css添加浏览器前缀\n                options: {\n                    postcssOptions: {\n                        plugins: [\n                          [\"autoprefixer\"],\n                        ],\n                      }\n                }\n            }] // 从右向左解析原则\n          },\n```\n\n**抽离CSS，将css额外打包出来**\n\n```\nnpm i -D mini-css-extract-plugin\n```\n\n```\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  // 省略...\n  module: {\n    rules: [\n      // 省略...\n      {\n        test: /\\.(le|c)ss$/,\n        exclude: /node_modules/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          // 省略...\n        ]\n      },\n    ]\n  },\n  plugins: [\n    // 省略...\n    new MiniCssExtractPlugin({\n      filename: 'css/[name].css',\n      \n    }),\n  ],\n}\n```\n\n### 实际项目开发相关\n\n**实时更新并预览效果**\n\n```\nnpm install webpack-dev-server -D\n```\n\n```\n// 省略 ...\nmodule.exports = {\n  // 省略 ...\n  devServer: {\n    port: '3001', // 默认是 8080\n    hot: true, // 热更新\n    stats: 'errors-only', // 终端仅打印 error\n    compress: true, // 是否启用 gzip 压缩\n    proxy: {\n      '/api': {\n        target: 'http://0.0.0.0:80',\n        pathRewrite: {\n          '/api': '',\n        },\n      },\n    },\n  },\n}\n```\n\n在package.json中添加命令\n\n```\n\"dev\": \"webpack-dev-server --config 配置地址/webpack.dev.js --open\",\n```\n\n**sourcemap配置**\n\n项目报错的话，直接看编译后的代码，定位不精确。\n\n开发环境中需要映射源代码\n\n```\n// 省略 ...\nmodule.exports = {\n  // 省略 ...\n  devtool: 'cheap-module-source-map',\n}\n```\n\n生产环境隐藏即可\n\n```\ndevtool:'hidden-source-map',\n```\n\n**拆分环境**\n\n不同的环境需要不同的打包配置\n\n新建build目录，新建webpack.base.js、webpack.dev.js、webpack.prod.js\n\n安装webpack配置合并组件\n\n```\nnpm install webpack-merge -D\n```\n\nwebpack.dev.js\n\n```\nconst webpackConfig = require('./webpack.config.js')\nconst {merge} = require('webpack-merge')\nmodule.exports = merge(webpackConfig,{\n  mode:'development',\n  devtool: 'cheap-module-source-map',\n  devServer:{\n    port:3000,\n    hot:true,\n    static:'../dist'\n  },\n  plugins:[\n  ]\n})\n```\n\nwebpack.prod.js\n\n```\nconst { merge } = require('webpack-merge');\nconst baseConfig = require('./webpack.config.js');\n\nmodule.exports = merge(baseConfig, {\n  mode: 'production',\n  devtool: 'hidden-source-map',\n});\n```\n\n**复制静态资源到打包目录**\n\n有时第三方js插件没提供npm包，只有cdn地址或者文件需要自己下载。下载后放到public/js目录下，然后public/index.html文件中直接用script标签引入，但是本地调试或者打包后都是找不到这个文件的\n\npublic/index.html\n\n```\n<body>\n    <div id=\"root\"></div>\n    <script src=\"./js/test.js\"></script>\n</body>\n```\n\n安装copy-webpack-plugin插件，构建时将public/js下静态资源复制到dist目录下\n\n```\nnpm install copy-webpack-plugin -D\n```\n\n```\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\n\nmodule.exports = {\n  // 省略...\n  plugins: [\n    new CopyWebpackPlugin({\n      patterns: [\n        {\n          from: '*.js',\n          context: path.resolve(__dirname, \"public/js\"),\n          to: path.resolve(__dirname, 'dist/js'),\n        },\n      ],\n    })\n```\n\n","source":"_posts/Webpack基础配置.md","raw":"---\ntitle: Webpack基础配置\ndate: 2022-06-12\n---\n\n一些Webpack4的基础配置\n<!-- more -->\n\n代码库地址：https://github.com/blue-squirrel/webpack-learn\n\n## 初始化项目\n\n```\n1. mkdir webpack-learn && cd webpack-learn\n2. npm init\n```\n\n添加入口文件/src/index.js和webpack配置文件webpack.config.js\n\n再安装webpack\n\n```\nnpm install webpack webpack-cli -D\n```\n\n在script中添加打包命令\n\n```\n\"build\": \"webpack --config 配置地址/webpack.config.js\"\n```\n\n## 基础配置\n\n### 配置html模板\n\n执行打包命令只是将js文件打包了，但不能每次手动引入打包后的js\n\n**html-webpack-plugin**\n\n```\nnpm i -D html-webpack-plugin\n```\n\n```\n// 自动插入生成文件到html中\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nplugins:[\n        new HtmlWebpackPlugin({\n          template:path.resolve(__dirname,'../public/index.html')\n        })\n     ]\n```\n\n**clean-webpack-plugin**\n\n```\nnpm install clean-webpack-plugin -D\n```\n\n```\n// 清空上次打包文件\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin')\n\nplugins:[\n        new CleanWebpackPlugin(),\n    ]\n```\n\n### CSS支持\n\n**为css添加浏览器前缀**\n\n```\nnpm i -D postcss-loader autoprefixer  \n```\n\n```\nrules:[\n          {\n            test:/\\.css$/,\n            use:['style-loader','css-loader'] // 从右向左解析原则\n          },\n          {\n            test:/\\.less$/,\n            use:[MiniCssExtractPlugin.loader,'css-loader','less-loader',{\n                loader: 'postcss-loader', // 为css添加浏览器前缀\n                options: {\n                    postcssOptions: {\n                        plugins: [\n                          [\"autoprefixer\"],\n                        ],\n                      }\n                }\n            }] // 从右向左解析原则\n          },\n```\n\n**抽离CSS，将css额外打包出来**\n\n```\nnpm i -D mini-css-extract-plugin\n```\n\n```\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  // 省略...\n  module: {\n    rules: [\n      // 省略...\n      {\n        test: /\\.(le|c)ss$/,\n        exclude: /node_modules/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          // 省略...\n        ]\n      },\n    ]\n  },\n  plugins: [\n    // 省略...\n    new MiniCssExtractPlugin({\n      filename: 'css/[name].css',\n      \n    }),\n  ],\n}\n```\n\n### 实际项目开发相关\n\n**实时更新并预览效果**\n\n```\nnpm install webpack-dev-server -D\n```\n\n```\n// 省略 ...\nmodule.exports = {\n  // 省略 ...\n  devServer: {\n    port: '3001', // 默认是 8080\n    hot: true, // 热更新\n    stats: 'errors-only', // 终端仅打印 error\n    compress: true, // 是否启用 gzip 压缩\n    proxy: {\n      '/api': {\n        target: 'http://0.0.0.0:80',\n        pathRewrite: {\n          '/api': '',\n        },\n      },\n    },\n  },\n}\n```\n\n在package.json中添加命令\n\n```\n\"dev\": \"webpack-dev-server --config 配置地址/webpack.dev.js --open\",\n```\n\n**sourcemap配置**\n\n项目报错的话，直接看编译后的代码，定位不精确。\n\n开发环境中需要映射源代码\n\n```\n// 省略 ...\nmodule.exports = {\n  // 省略 ...\n  devtool: 'cheap-module-source-map',\n}\n```\n\n生产环境隐藏即可\n\n```\ndevtool:'hidden-source-map',\n```\n\n**拆分环境**\n\n不同的环境需要不同的打包配置\n\n新建build目录，新建webpack.base.js、webpack.dev.js、webpack.prod.js\n\n安装webpack配置合并组件\n\n```\nnpm install webpack-merge -D\n```\n\nwebpack.dev.js\n\n```\nconst webpackConfig = require('./webpack.config.js')\nconst {merge} = require('webpack-merge')\nmodule.exports = merge(webpackConfig,{\n  mode:'development',\n  devtool: 'cheap-module-source-map',\n  devServer:{\n    port:3000,\n    hot:true,\n    static:'../dist'\n  },\n  plugins:[\n  ]\n})\n```\n\nwebpack.prod.js\n\n```\nconst { merge } = require('webpack-merge');\nconst baseConfig = require('./webpack.config.js');\n\nmodule.exports = merge(baseConfig, {\n  mode: 'production',\n  devtool: 'hidden-source-map',\n});\n```\n\n**复制静态资源到打包目录**\n\n有时第三方js插件没提供npm包，只有cdn地址或者文件需要自己下载。下载后放到public/js目录下，然后public/index.html文件中直接用script标签引入，但是本地调试或者打包后都是找不到这个文件的\n\npublic/index.html\n\n```\n<body>\n    <div id=\"root\"></div>\n    <script src=\"./js/test.js\"></script>\n</body>\n```\n\n安装copy-webpack-plugin插件，构建时将public/js下静态资源复制到dist目录下\n\n```\nnpm install copy-webpack-plugin -D\n```\n\n```\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\n\nmodule.exports = {\n  // 省略...\n  plugins: [\n    new CopyWebpackPlugin({\n      patterns: [\n        {\n          from: '*.js',\n          context: path.resolve(__dirname, \"public/js\"),\n          to: path.resolve(__dirname, 'dist/js'),\n        },\n      ],\n    })\n```\n\n","slug":"Webpack基础配置","published":1,"updated":"2022-09-02T17:01:41.107Z","_id":"cl4a3rr230004lgtt1hy70iwj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一些Webpack4的基础配置</p>\n<span id=\"more\"></span>\n\n<p>代码库地址：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://github.com/blue-squirrel/webpack-learn\" >https://github.com/blue-squirrel/webpack-learn</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n\n        <h2 id=\"初始化项目\"   >\n          <a href=\"#初始化项目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. mkdir webpack-learn &amp;&amp; cd webpack-learn</span><br><span class=\"line\">2. npm init</span><br></pre></td></tr></table></div></figure>\n\n<p>添加入口文件&#x2F;src&#x2F;index.js和webpack配置文件webpack.config.js</p>\n<p>再安装webpack</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></div></figure>\n\n<p>在script中添加打包命令</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;build&quot;: &quot;webpack --config 配置地址/webpack.config.js&quot;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"基础配置\"   >\n          <a href=\"#基础配置\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2>\n      \n        <h3 id=\"配置html模板\"   >\n          <a href=\"#配置html模板\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#配置html模板\" class=\"headerlink\" title=\"配置html模板\"></a>配置html模板</h3>\n      <p>执行打包命令只是将js文件打包了，但不能每次手动引入打包后的js</p>\n<p><strong>html-webpack-plugin</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自动插入生成文件到html中</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">plugins:[</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">          template:path.resolve(__dirname,&#x27;../public/index.html&#x27;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">     ]</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>clean-webpack-plugin</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 清空上次打包文件</span><br><span class=\"line\">const &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">plugins:[</span><br><span class=\"line\">        new CleanWebpackPlugin(),</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"CSS支持\"   >\n          <a href=\"#CSS支持\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#CSS支持\" class=\"headerlink\" title=\"CSS支持\"></a>CSS支持</h3>\n      <p><strong>为css添加浏览器前缀</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D postcss-loader autoprefixer  </span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules:[</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            test:/\\.css$/,</span><br><span class=\"line\">            use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;] // 从右向左解析原则</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            test:/\\.less$/,</span><br><span class=\"line\">            use:[MiniCssExtractPlugin.loader,&#x27;css-loader&#x27;,&#x27;less-loader&#x27;,&#123;</span><br><span class=\"line\">                loader: &#x27;postcss-loader&#x27;, // 为css添加浏览器前缀</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    postcssOptions: &#123;</span><br><span class=\"line\">                        plugins: [</span><br><span class=\"line\">                          [&quot;autoprefixer&quot;],</span><br><span class=\"line\">                        ],</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;] // 从右向左解析原则</span><br><span class=\"line\">          &#125;,</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>抽离CSS，将css额外打包出来</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D mini-css-extract-plugin</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 省略...</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      // 省略...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.(le|c)ss$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          // 省略...</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    // 省略...</span><br><span class=\"line\">    new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: &#x27;css/[name].css&#x27;,</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"实际项目开发相关\"   >\n          <a href=\"#实际项目开发相关\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#实际项目开发相关\" class=\"headerlink\" title=\"实际项目开发相关\"></a>实际项目开发相关</h3>\n      <p><strong>实时更新并预览效果</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server -D</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 省略 ...</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 省略 ...</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: &#x27;3001&#x27;, // 默认是 8080</span><br><span class=\"line\">    hot: true, // 热更新</span><br><span class=\"line\">    stats: &#x27;errors-only&#x27;, // 终端仅打印 error</span><br><span class=\"line\">    compress: true, // 是否启用 gzip 压缩</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      &#x27;/api&#x27;: &#123;</span><br><span class=\"line\">        target: &#x27;http://0.0.0.0:80&#x27;,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          &#x27;/api&#x27;: &#x27;&#x27;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在package.json中添加命令</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --config 配置地址/webpack.dev.js --open&quot;,</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>sourcemap配置</strong></p>\n<p>项目报错的话，直接看编译后的代码，定位不精确。</p>\n<p>开发环境中需要映射源代码</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 省略 ...</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 省略 ...</span><br><span class=\"line\">  devtool: &#x27;cheap-module-source-map&#x27;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>生产环境隐藏即可</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devtool:&#x27;hidden-source-map&#x27;,</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>拆分环境</strong></p>\n<p>不同的环境需要不同的打包配置</p>\n<p>新建build目录，新建webpack.base.js、webpack.dev.js、webpack.prod.js</p>\n<p>安装webpack配置合并组件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-merge -D</span><br></pre></td></tr></table></div></figure>\n\n<p>webpack.dev.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpackConfig = require(&#x27;./webpack.config.js&#x27;)</span><br><span class=\"line\">const &#123;merge&#125; = require(&#x27;webpack-merge&#x27;)</span><br><span class=\"line\">module.exports = merge(webpackConfig,&#123;</span><br><span class=\"line\">  mode:&#x27;development&#x27;,</span><br><span class=\"line\">  devtool: &#x27;cheap-module-source-map&#x27;,</span><br><span class=\"line\">  devServer:&#123;</span><br><span class=\"line\">    port:3000,</span><br><span class=\"line\">    hot:true,</span><br><span class=\"line\">    static:&#x27;../dist&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<p>webpack.prod.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; merge &#125; = require(&#x27;webpack-merge&#x27;);</span><br><span class=\"line\">const baseConfig = require(&#x27;./webpack.config.js&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(baseConfig, &#123;</span><br><span class=\"line\">  mode: &#x27;production&#x27;,</span><br><span class=\"line\">  devtool: &#x27;hidden-source-map&#x27;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>复制静态资源到打包目录</strong></p>\n<p>有时第三方js插件没提供npm包，只有cdn地址或者文件需要自己下载。下载后放到public&#x2F;js目录下，然后public&#x2F;index.html文件中直接用script标签引入，但是本地调试或者打包后都是找不到这个文件的</p>\n<p>public&#x2F;index.html</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/test.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>安装copy-webpack-plugin插件，构建时将public&#x2F;js下静态资源复制到dist目录下</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install copy-webpack-plugin -D</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CopyWebpackPlugin = require(&#x27;copy-webpack-plugin&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 省略...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new CopyWebpackPlugin(&#123;</span><br><span class=\"line\">      patterns: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          from: &#x27;*.js&#x27;,</span><br><span class=\"line\">          context: path.resolve(__dirname, &quot;public/js&quot;),</span><br><span class=\"line\">          to: path.resolve(__dirname, &#x27;dist/js&#x27;),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></div></figure>\n\n","site":{"data":{}},"excerpt":"<p>一些Webpack4的基础配置</p>","more":"<p>代码库地址：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://github.com/blue-squirrel/webpack-learn\" >https://github.com/blue-squirrel/webpack-learn</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n\n        <h2 id=\"初始化项目\"   >\n          <a href=\"#初始化项目\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h2>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. mkdir webpack-learn &amp;&amp; cd webpack-learn</span><br><span class=\"line\">2. npm init</span><br></pre></td></tr></table></div></figure>\n\n<p>添加入口文件&#x2F;src&#x2F;index.js和webpack配置文件webpack.config.js</p>\n<p>再安装webpack</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></div></figure>\n\n<p>在script中添加打包命令</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;build&quot;: &quot;webpack --config 配置地址/webpack.config.js&quot;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"基础配置\"   >\n          <a href=\"#基础配置\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2>\n      \n        <h3 id=\"配置html模板\"   >\n          <a href=\"#配置html模板\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#配置html模板\" class=\"headerlink\" title=\"配置html模板\"></a>配置html模板</h3>\n      <p>执行打包命令只是将js文件打包了，但不能每次手动引入打包后的js</p>\n<p><strong>html-webpack-plugin</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自动插入生成文件到html中</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">plugins:[</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">          template:path.resolve(__dirname,&#x27;../public/index.html&#x27;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">     ]</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>clean-webpack-plugin</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install clean-webpack-plugin -D</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 清空上次打包文件</span><br><span class=\"line\">const &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">plugins:[</span><br><span class=\"line\">        new CleanWebpackPlugin(),</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"CSS支持\"   >\n          <a href=\"#CSS支持\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#CSS支持\" class=\"headerlink\" title=\"CSS支持\"></a>CSS支持</h3>\n      <p><strong>为css添加浏览器前缀</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D postcss-loader autoprefixer  </span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules:[</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            test:/\\.css$/,</span><br><span class=\"line\">            use:[&#x27;style-loader&#x27;,&#x27;css-loader&#x27;] // 从右向左解析原则</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            test:/\\.less$/,</span><br><span class=\"line\">            use:[MiniCssExtractPlugin.loader,&#x27;css-loader&#x27;,&#x27;less-loader&#x27;,&#123;</span><br><span class=\"line\">                loader: &#x27;postcss-loader&#x27;, // 为css添加浏览器前缀</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    postcssOptions: &#123;</span><br><span class=\"line\">                        plugins: [</span><br><span class=\"line\">                          [&quot;autoprefixer&quot;],</span><br><span class=\"line\">                        ],</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;] // 从右向左解析原则</span><br><span class=\"line\">          &#125;,</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>抽离CSS，将css额外打包出来</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -D mini-css-extract-plugin</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 省略...</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      // 省略...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.(le|c)ss$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          // 省略...</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    // 省略...</span><br><span class=\"line\">    new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: &#x27;css/[name].css&#x27;,</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"实际项目开发相关\"   >\n          <a href=\"#实际项目开发相关\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#实际项目开发相关\" class=\"headerlink\" title=\"实际项目开发相关\"></a>实际项目开发相关</h3>\n      <p><strong>实时更新并预览效果</strong></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server -D</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 省略 ...</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 省略 ...</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: &#x27;3001&#x27;, // 默认是 8080</span><br><span class=\"line\">    hot: true, // 热更新</span><br><span class=\"line\">    stats: &#x27;errors-only&#x27;, // 终端仅打印 error</span><br><span class=\"line\">    compress: true, // 是否启用 gzip 压缩</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      &#x27;/api&#x27;: &#123;</span><br><span class=\"line\">        target: &#x27;http://0.0.0.0:80&#x27;,</span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">          &#x27;/api&#x27;: &#x27;&#x27;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在package.json中添加命令</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --config 配置地址/webpack.dev.js --open&quot;,</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>sourcemap配置</strong></p>\n<p>项目报错的话，直接看编译后的代码，定位不精确。</p>\n<p>开发环境中需要映射源代码</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 省略 ...</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 省略 ...</span><br><span class=\"line\">  devtool: &#x27;cheap-module-source-map&#x27;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>生产环境隐藏即可</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devtool:&#x27;hidden-source-map&#x27;,</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>拆分环境</strong></p>\n<p>不同的环境需要不同的打包配置</p>\n<p>新建build目录，新建webpack.base.js、webpack.dev.js、webpack.prod.js</p>\n<p>安装webpack配置合并组件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-merge -D</span><br></pre></td></tr></table></div></figure>\n\n<p>webpack.dev.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpackConfig = require(&#x27;./webpack.config.js&#x27;)</span><br><span class=\"line\">const &#123;merge&#125; = require(&#x27;webpack-merge&#x27;)</span><br><span class=\"line\">module.exports = merge(webpackConfig,&#123;</span><br><span class=\"line\">  mode:&#x27;development&#x27;,</span><br><span class=\"line\">  devtool: &#x27;cheap-module-source-map&#x27;,</span><br><span class=\"line\">  devServer:&#123;</span><br><span class=\"line\">    port:3000,</span><br><span class=\"line\">    hot:true,</span><br><span class=\"line\">    static:&#x27;../dist&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<p>webpack.prod.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; merge &#125; = require(&#x27;webpack-merge&#x27;);</span><br><span class=\"line\">const baseConfig = require(&#x27;./webpack.config.js&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(baseConfig, &#123;</span><br><span class=\"line\">  mode: &#x27;production&#x27;,</span><br><span class=\"line\">  devtool: &#x27;hidden-source-map&#x27;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>复制静态资源到打包目录</strong></p>\n<p>有时第三方js插件没提供npm包，只有cdn地址或者文件需要自己下载。下载后放到public&#x2F;js目录下，然后public&#x2F;index.html文件中直接用script标签引入，但是本地调试或者打包后都是找不到这个文件的</p>\n<p>public&#x2F;index.html</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./js/test.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>安装copy-webpack-plugin插件，构建时将public&#x2F;js下静态资源复制到dist目录下</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install copy-webpack-plugin -D</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CopyWebpackPlugin = require(&#x27;copy-webpack-plugin&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // 省略...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new CopyWebpackPlugin(&#123;</span><br><span class=\"line\">      patterns: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          from: &#x27;*.js&#x27;,</span><br><span class=\"line\">          context: path.resolve(__dirname, &quot;public/js&quot;),</span><br><span class=\"line\">          to: path.resolve(__dirname, &#x27;dist/js&#x27;),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></div></figure>"},{"title":"hexo使用帮助","date":"2022-02-05T16:00:00.000Z","_content":"\n## Quick Start\n\n### 创建静态文件\n\n``` bash\n$ hexo g\n```\n\n### 部署到git\n\n``` bash\n$ hexo d\n```\n\n### 切换主题时，清空缓存\n\n``` bash\n$ hexo clean\n```\n","source":"_posts/hexo使用帮助.md","raw":"---\ntitle: hexo使用帮助\ndate: 2022-02-06\n---\n\n## Quick Start\n\n### 创建静态文件\n\n``` bash\n$ hexo g\n```\n\n### 部署到git\n\n``` bash\n$ hexo d\n```\n\n### 切换主题时，清空缓存\n\n``` bash\n$ hexo clean\n```\n","slug":"hexo使用帮助","published":1,"updated":"2022-09-02T17:00:53.508Z","_id":"cl4a3rr230005lgttfs42epo0","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"Quick-Start\"   >\n          <a href=\"#Quick-Start\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2>\n      \n        <h3 id=\"创建静态文件\"   >\n          <a href=\"#创建静态文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#创建静态文件\" class=\"headerlink\" title=\"创建静态文件\"></a>创建静态文件</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"部署到git\"   >\n          <a href=\"#部署到git\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#部署到git\" class=\"headerlink\" title=\"部署到git\"></a>部署到git</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"切换主题时，清空缓存\"   >\n          <a href=\"#切换主题时，清空缓存\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#切换主题时，清空缓存\" class=\"headerlink\" title=\"切换主题时，清空缓存\"></a>切换主题时，清空缓存</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></div></figure>\n","site":{"data":{}},"excerpt":"","more":"\n        <h2 id=\"Quick-Start\"   >\n          <a href=\"#Quick-Start\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2>\n      \n        <h3 id=\"创建静态文件\"   >\n          <a href=\"#创建静态文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#创建静态文件\" class=\"headerlink\" title=\"创建静态文件\"></a>创建静态文件</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"部署到git\"   >\n          <a href=\"#部署到git\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#部署到git\" class=\"headerlink\" title=\"部署到git\"></a>部署到git</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"切换主题时，清空缓存\"   >\n          <a href=\"#切换主题时，清空缓存\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#切换主题时，清空缓存\" class=\"headerlink\" title=\"切换主题时，清空缓存\"></a>切换主题时，清空缓存</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></div></figure>\n"},{"title":"postman参数类型","date":"2022-02-26T16:00:00.000Z","_content":"\npostman软件中的四种请求类型\n<!-- more -->\n\n# postman中 form-data、x-www-form-urlencoded、raw、binary的区别\n\n### form-data\n\n![avatar](https://img-blog.csdn.net/20151118130933756?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n就是http请求中的multipart/form-data,它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。\n既可以上传键值对，也可以上传文件。\n当上传的字段是文件时，会有Content-Type来说明文件类型；content-disposition，用来说明字段的一些信息；\n\n由于有boundary隔离，所以multipart/form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。\n\n### x-www-form-urlencoded\n\n![avatar](https://img-blog.csdn.net/20151118131219584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n就是application/x-www-from-urlencoded,会将表单内的数据转换为键值对，&分隔。\n当form的action为get时，浏览器用x-www-form-urlencoded的编码方式，将表单数据编码为(name1=value1&name2=value2…)，然后把这个字符串append到url后面，用?分隔，跳转到这个新的url。\n\n当form的action为post时，浏览器将form数据封装到http body中，然后发送到server。\n\n这个格式不能提交文件。\n\n### raw\n\n可以上传任意格式的文本，可以上传text、json、xml、html等\n\n### binary\n\n相当于Content-Type:application/octet-stream,从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以，一次只能上传一个文件。\n\n## multipart/form-data与x-www-form-urlencoded区别\n\nmultipart/form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；\n\nx-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。\n","source":"_posts/postman参数类型.md","raw":"---\ntitle: postman参数类型\ndate: 2022-02-27\n---\n\npostman软件中的四种请求类型\n<!-- more -->\n\n# postman中 form-data、x-www-form-urlencoded、raw、binary的区别\n\n### form-data\n\n![avatar](https://img-blog.csdn.net/20151118130933756?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n就是http请求中的multipart/form-data,它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。\n既可以上传键值对，也可以上传文件。\n当上传的字段是文件时，会有Content-Type来说明文件类型；content-disposition，用来说明字段的一些信息；\n\n由于有boundary隔离，所以multipart/form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。\n\n### x-www-form-urlencoded\n\n![avatar](https://img-blog.csdn.net/20151118131219584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n就是application/x-www-from-urlencoded,会将表单内的数据转换为键值对，&分隔。\n当form的action为get时，浏览器用x-www-form-urlencoded的编码方式，将表单数据编码为(name1=value1&name2=value2…)，然后把这个字符串append到url后面，用?分隔，跳转到这个新的url。\n\n当form的action为post时，浏览器将form数据封装到http body中，然后发送到server。\n\n这个格式不能提交文件。\n\n### raw\n\n可以上传任意格式的文本，可以上传text、json、xml、html等\n\n### binary\n\n相当于Content-Type:application/octet-stream,从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以，一次只能上传一个文件。\n\n## multipart/form-data与x-www-form-urlencoded区别\n\nmultipart/form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；\n\nx-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。\n","slug":"postman参数类型","published":1,"updated":"2022-09-02T17:01:30.036Z","_id":"cl4a3rr240006lgtt7cpka92l","comments":1,"layout":"post","photos":[],"link":"","content":"<p>postman软件中的四种请求类型</p>\n<span id=\"more\"></span>\n\n\n        <h1 id=\"postman中-form-data、x-www-form-urlencoded、raw、binary的区别\"   >\n          <a href=\"#postman中-form-data、x-www-form-urlencoded、raw、binary的区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#postman中-form-data、x-www-form-urlencoded、raw、binary的区别\" class=\"headerlink\" title=\"postman中 form-data、x-www-form-urlencoded、raw、binary的区别\"></a>postman中 form-data、x-www-form-urlencoded、raw、binary的区别</h1>\n      \n        <h3 id=\"form-data\"   >\n          <a href=\"#form-data\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#form-data\" class=\"headerlink\" title=\"form-data\"></a>form-data</h3>\n      <p><img   src=\"https://img-blog.csdn.net/20151118130933756?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" style=\"\"  alt=\"avatar\"></p>\n<p>就是http请求中的multipart&#x2F;form-data,它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。<br>既可以上传键值对，也可以上传文件。<br>当上传的字段是文件时，会有Content-Type来说明文件类型；content-disposition，用来说明字段的一些信息；</p>\n<p>由于有boundary隔离，所以multipart&#x2F;form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。</p>\n\n        <h3 id=\"x-www-form-urlencoded\"   >\n          <a href=\"#x-www-form-urlencoded\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#x-www-form-urlencoded\" class=\"headerlink\" title=\"x-www-form-urlencoded\"></a>x-www-form-urlencoded</h3>\n      <p><img   src=\"https://img-blog.csdn.net/20151118131219584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" style=\"\"  alt=\"avatar\"></p>\n<p>就是application&#x2F;x-www-from-urlencoded,会将表单内的数据转换为键值对，&amp;分隔。<br>当form的action为get时，浏览器用x-www-form-urlencoded的编码方式，将表单数据编码为(name1&#x3D;value1&amp;name2&#x3D;value2…)，然后把这个字符串append到url后面，用?分隔，跳转到这个新的url。</p>\n<p>当form的action为post时，浏览器将form数据封装到http body中，然后发送到server。</p>\n<p>这个格式不能提交文件。</p>\n\n        <h3 id=\"raw\"   >\n          <a href=\"#raw\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#raw\" class=\"headerlink\" title=\"raw\"></a>raw</h3>\n      <p>可以上传任意格式的文本，可以上传text、json、xml、html等</p>\n\n        <h3 id=\"binary\"   >\n          <a href=\"#binary\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#binary\" class=\"headerlink\" title=\"binary\"></a>binary</h3>\n      <p>相当于Content-Type:application&#x2F;octet-stream,从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以，一次只能上传一个文件。</p>\n\n        <h2 id=\"multipart-x2F-form-data与x-www-form-urlencoded区别\"   >\n          <a href=\"#multipart-x2F-form-data与x-www-form-urlencoded区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#multipart-x2F-form-data与x-www-form-urlencoded区别\" class=\"headerlink\" title=\"multipart&#x2F;form-data与x-www-form-urlencoded区别\"></a>multipart&#x2F;form-data与x-www-form-urlencoded区别</h2>\n      <p>multipart&#x2F;form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；</p>\n<p>x-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。</p>\n","site":{"data":{}},"excerpt":"<p>postman软件中的四种请求类型</p>","more":"<h1 id=\"postman中-form-data、x-www-form-urlencoded、raw、binary的区别\"   >\n          <a href=\"#postman中-form-data、x-www-form-urlencoded、raw、binary的区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#postman中-form-data、x-www-form-urlencoded、raw、binary的区别\" class=\"headerlink\" title=\"postman中 form-data、x-www-form-urlencoded、raw、binary的区别\"></a>postman中 form-data、x-www-form-urlencoded、raw、binary的区别</h1>\n      \n        <h3 id=\"form-data\"   >\n          <a href=\"#form-data\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#form-data\" class=\"headerlink\" title=\"form-data\"></a>form-data</h3>\n      <p><img   src=\"https://img-blog.csdn.net/20151118130933756?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" style=\"\"  alt=\"avatar\"></p>\n<p>就是http请求中的multipart&#x2F;form-data,它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。<br>既可以上传键值对，也可以上传文件。<br>当上传的字段是文件时，会有Content-Type来说明文件类型；content-disposition，用来说明字段的一些信息；</p>\n<p>由于有boundary隔离，所以multipart&#x2F;form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。</p>\n\n        <h3 id=\"x-www-form-urlencoded\"   >\n          <a href=\"#x-www-form-urlencoded\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#x-www-form-urlencoded\" class=\"headerlink\" title=\"x-www-form-urlencoded\"></a>x-www-form-urlencoded</h3>\n      <p><img   src=\"https://img-blog.csdn.net/20151118131219584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" style=\"\"  alt=\"avatar\"></p>\n<p>就是application&#x2F;x-www-from-urlencoded,会将表单内的数据转换为键值对，&amp;分隔。<br>当form的action为get时，浏览器用x-www-form-urlencoded的编码方式，将表单数据编码为(name1&#x3D;value1&amp;name2&#x3D;value2…)，然后把这个字符串append到url后面，用?分隔，跳转到这个新的url。</p>\n<p>当form的action为post时，浏览器将form数据封装到http body中，然后发送到server。</p>\n<p>这个格式不能提交文件。</p>\n\n        <h3 id=\"raw\"   >\n          <a href=\"#raw\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#raw\" class=\"headerlink\" title=\"raw\"></a>raw</h3>\n      <p>可以上传任意格式的文本，可以上传text、json、xml、html等</p>\n\n        <h3 id=\"binary\"   >\n          <a href=\"#binary\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#binary\" class=\"headerlink\" title=\"binary\"></a>binary</h3>\n      <p>相当于Content-Type:application&#x2F;octet-stream,从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以，一次只能上传一个文件。</p>\n\n        <h2 id=\"multipart-x2F-form-data与x-www-form-urlencoded区别\"   >\n          <a href=\"#multipart-x2F-form-data与x-www-form-urlencoded区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#multipart-x2F-form-data与x-www-form-urlencoded区别\" class=\"headerlink\" title=\"multipart&#x2F;form-data与x-www-form-urlencoded区别\"></a>multipart&#x2F;form-data与x-www-form-urlencoded区别</h2>\n      <p>multipart&#x2F;form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；</p>\n<p>x-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。</p>"},{"title":"伪类和伪元素，以及一些应用","date":"2022-06-11T16:00:00.000Z","_content":"\n日常中尽量使用伪类去替代一些js的使用\n\n<!-- more -->\n\n## 区别\n\n伪类：1.表示被选择元素的某种状态，例如 :visited, :active\n\n​\t\t\t2.满足一定条件的DOM树中的元素，例如 :first-child, first-of-type（相当于一个特殊的class选择器）\n\n伪元素：不以元素为最小选择单元，二十选择元素的指定内容，例如 ::before表示选择元素内容的之前内容，::selection表示选择元素被选中的内容（相当于一个特殊的span）\n\n**核心区别在于，是否创造了“新的元素”**\n\n### :before和::before的区别\n\n1. 二者写法是等效的，都**表示伪元素**\n2. :before是CSS2的写法，::before是CSS3的写法\n3. :before的兼容性比::before兼容性好，但是**H5开发中建议使用::before**\n\n### 注意：\n\n1. 伪元素要配合**content**属性一起使用\n2. 伪元素不会出现在DOM中，所以**不能通过js来操作，仅仅是在 CSS 渲染层加入**\n3. 伪元素的特效通常要使用:hover伪类样式来激活\n\n```\n.test:hover::before { /* 这时animation和transition才生效 */ }  \n```\n\n\n\n## 伪元素\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9592a395a204e46bd791417263d70c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n## 伪类\n\n![2.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5497c283a92a4c73832aa7648067b95f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n## 奇技淫巧\n\n### 双边丝带\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/27/173905c03ac80497~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n```\n<div class=\"tc\">\n    <div class=\"title1\"><span>距离结束还有10天</span></div>\n</div>\n```\n\n分别用两个before和after做出两个矩形即可\n\n### Tabs底部伸缩激活\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/326cb83ec94a4184909a974e4547727b~tplv-k3u1fbpfcp-watermark.image?)\n\n用before从left:50% width:0 => left:0 width:100% \n\n### Tooltip提示","source":"_posts/伪类和伪元素.md","raw":"---\ntitle: 伪类和伪元素，以及一些应用\ndate: 2022-06-12\n---\n\n日常中尽量使用伪类去替代一些js的使用\n\n<!-- more -->\n\n## 区别\n\n伪类：1.表示被选择元素的某种状态，例如 :visited, :active\n\n​\t\t\t2.满足一定条件的DOM树中的元素，例如 :first-child, first-of-type（相当于一个特殊的class选择器）\n\n伪元素：不以元素为最小选择单元，二十选择元素的指定内容，例如 ::before表示选择元素内容的之前内容，::selection表示选择元素被选中的内容（相当于一个特殊的span）\n\n**核心区别在于，是否创造了“新的元素”**\n\n### :before和::before的区别\n\n1. 二者写法是等效的，都**表示伪元素**\n2. :before是CSS2的写法，::before是CSS3的写法\n3. :before的兼容性比::before兼容性好，但是**H5开发中建议使用::before**\n\n### 注意：\n\n1. 伪元素要配合**content**属性一起使用\n2. 伪元素不会出现在DOM中，所以**不能通过js来操作，仅仅是在 CSS 渲染层加入**\n3. 伪元素的特效通常要使用:hover伪类样式来激活\n\n```\n.test:hover::before { /* 这时animation和transition才生效 */ }  \n```\n\n\n\n## 伪元素\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9592a395a204e46bd791417263d70c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n## 伪类\n\n![2.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5497c283a92a4c73832aa7648067b95f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n## 奇技淫巧\n\n### 双边丝带\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/27/173905c03ac80497~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n```\n<div class=\"tc\">\n    <div class=\"title1\"><span>距离结束还有10天</span></div>\n</div>\n```\n\n分别用两个before和after做出两个矩形即可\n\n### Tabs底部伸缩激活\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/326cb83ec94a4184909a974e4547727b~tplv-k3u1fbpfcp-watermark.image?)\n\n用before从left:50% width:0 => left:0 width:100% \n\n### Tooltip提示","slug":"伪类和伪元素","published":1,"updated":"2022-09-02T16:59:30.832Z","_id":"cl4a3rr240007lgtt5l6v8bo6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>日常中尽量使用伪类去替代一些js的使用</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"区别\"   >\n          <a href=\"#区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2>\n      <p>伪类：1.表示被选择元素的某种状态，例如 :visited, :active</p>\n<p>​\t\t\t2.满足一定条件的DOM树中的元素，例如 :first-child, first-of-type（相当于一个特殊的class选择器）</p>\n<p>伪元素：不以元素为最小选择单元，二十选择元素的指定内容，例如 ::before表示选择元素内容的之前内容，::selection表示选择元素被选中的内容（相当于一个特殊的span）</p>\n<p><strong>核心区别在于，是否创造了“新的元素”</strong></p>\n\n        <h3 id=\"before和-before的区别\"   >\n          <a href=\"#before和-before的区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#before和-before的区别\" class=\"headerlink\" title=\":before和::before的区别\"></a>:before和::before的区别</h3>\n      <ol>\n<li>二者写法是等效的，都<strong>表示伪元素</strong></li>\n<li>:before是CSS2的写法，::before是CSS3的写法</li>\n<li>:before的兼容性比::before兼容性好，但是<strong>H5开发中建议使用::before</strong></li>\n</ol>\n\n        <h3 id=\"注意：\"   >\n          <a href=\"#注意：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3>\n      <ol>\n<li>伪元素要配合<strong>content</strong>属性一起使用</li>\n<li>伪元素不会出现在DOM中，所以<strong>不能通过js来操作，仅仅是在 CSS 渲染层加入</strong></li>\n<li>伪元素的特效通常要使用:hover伪类样式来激活</li>\n</ol>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test:hover::before &#123; /* 这时animation和transition才生效 */ &#125;  </span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h2 id=\"伪元素\"   >\n          <a href=\"#伪元素\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2>\n      <p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9592a395a204e46bd791417263d70c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"image.png\"></p>\n\n        <h2 id=\"伪类\"   >\n          <a href=\"#伪类\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2>\n      <p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5497c283a92a4c73832aa7648067b95f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"2.png\"></p>\n\n        <h2 id=\"奇技淫巧\"   >\n          <a href=\"#奇技淫巧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#奇技淫巧\" class=\"headerlink\" title=\"奇技淫巧\"></a>奇技淫巧</h2>\n      \n        <h3 id=\"双边丝带\"   >\n          <a href=\"#双边丝带\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双边丝带\" class=\"headerlink\" title=\"双边丝带\"></a>双边丝带</h3>\n      <p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/27/173905c03ac80497~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;tc&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;title1&quot;&gt;&lt;span&gt;距离结束还有10天&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>分别用两个before和after做出两个矩形即可</p>\n\n        <h3 id=\"Tabs底部伸缩激活\"   >\n          <a href=\"#Tabs底部伸缩激活\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Tabs底部伸缩激活\" class=\"headerlink\" title=\"Tabs底部伸缩激活\"></a>Tabs底部伸缩激活</h3>\n      <p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/326cb83ec94a4184909a974e4547727b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>用before从left:50% width:0 &#x3D;&gt; left:0 width:100% </p>\n\n        <h3 id=\"Tooltip提示\"   >\n          <a href=\"#Tooltip提示\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Tooltip提示\" class=\"headerlink\" title=\"Tooltip提示\"></a>Tooltip提示</h3>\n      ","site":{"data":{}},"excerpt":"<p>日常中尽量使用伪类去替代一些js的使用</p>","more":"<h2 id=\"区别\"   >\n          <a href=\"#区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2>\n      <p>伪类：1.表示被选择元素的某种状态，例如 :visited, :active</p>\n<p>​\t\t\t2.满足一定条件的DOM树中的元素，例如 :first-child, first-of-type（相当于一个特殊的class选择器）</p>\n<p>伪元素：不以元素为最小选择单元，二十选择元素的指定内容，例如 ::before表示选择元素内容的之前内容，::selection表示选择元素被选中的内容（相当于一个特殊的span）</p>\n<p><strong>核心区别在于，是否创造了“新的元素”</strong></p>\n\n        <h3 id=\"before和-before的区别\"   >\n          <a href=\"#before和-before的区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#before和-before的区别\" class=\"headerlink\" title=\":before和::before的区别\"></a>:before和::before的区别</h3>\n      <ol>\n<li>二者写法是等效的，都<strong>表示伪元素</strong></li>\n<li>:before是CSS2的写法，::before是CSS3的写法</li>\n<li>:before的兼容性比::before兼容性好，但是<strong>H5开发中建议使用::before</strong></li>\n</ol>\n\n        <h3 id=\"注意：\"   >\n          <a href=\"#注意：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3>\n      <ol>\n<li>伪元素要配合<strong>content</strong>属性一起使用</li>\n<li>伪元素不会出现在DOM中，所以<strong>不能通过js来操作，仅仅是在 CSS 渲染层加入</strong></li>\n<li>伪元素的特效通常要使用:hover伪类样式来激活</li>\n</ol>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test:hover::before &#123; /* 这时animation和transition才生效 */ &#125;  </span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h2 id=\"伪元素\"   >\n          <a href=\"#伪元素\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2>\n      <p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9592a395a204e46bd791417263d70c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"image.png\"></p>\n\n        <h2 id=\"伪类\"   >\n          <a href=\"#伪类\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2>\n      <p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5497c283a92a4c73832aa7648067b95f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"2.png\"></p>\n\n        <h2 id=\"奇技淫巧\"   >\n          <a href=\"#奇技淫巧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#奇技淫巧\" class=\"headerlink\" title=\"奇技淫巧\"></a>奇技淫巧</h2>\n      \n        <h3 id=\"双边丝带\"   >\n          <a href=\"#双边丝带\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#双边丝带\" class=\"headerlink\" title=\"双边丝带\"></a>双边丝带</h3>\n      <p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/27/173905c03ac80497~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;tc&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;title1&quot;&gt;&lt;span&gt;距离结束还有10天&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>分别用两个before和after做出两个矩形即可</p>\n\n        <h3 id=\"Tabs底部伸缩激活\"   >\n          <a href=\"#Tabs底部伸缩激活\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Tabs底部伸缩激活\" class=\"headerlink\" title=\"Tabs底部伸缩激活\"></a>Tabs底部伸缩激活</h3>\n      <p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/326cb83ec94a4184909a974e4547727b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>用before从left:50% width:0 &#x3D;&gt; left:0 width:100% </p>\n\n        <h3 id=\"Tooltip提示\"   >\n          <a href=\"#Tooltip提示\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Tooltip提示\" class=\"headerlink\" title=\"Tooltip提示\"></a>Tooltip提示</h3>"},{"title":"前端工程代码规范 Eslint + Prettier + Husky + Commitlint+ Lint-staged","date":"2022-05-04T16:00:00.000Z","_content":"\n使用代码规范插件实现项目代码规范化\n\n<!-- more -->\n\n首先了解几个工具\n\n**eslint**：开发中，如果写出不符合我们规范的代码，能够及时提醒开发者，便于及时修复\n\n**prettier**：保存/粘贴代码时、使用格式化快捷键时，能够自动按照我们制定的规范、格式化代码\n\n**editorconfig**：不同开发者如果使用不同的编辑器（sublime/vscode）或系统（windows/mac），能够执行统一的代码风格标准。比如：缩进是tab还是space，结尾end_of_line是lf还是crlf\n\n## 一、代码规范\n\n### 代码检查工具 Eslint\n\n安装依赖\n\n```\nnpm i eslint -D\n```\n\n生成配置文件\n\n```\nnpx eslint --init\n```\n\n根据命令行提示进行配置，init命令会自动生成 .eslintrc.js\n\n### 代码风格工具 Prettier\n\n```\nnpm i prettier eslint-config-prettier eslint-plugin-prettier -D\n```\n\n**eslint-config-prettier：**让所有可能会与 prettier 规则存在冲突的 eslint rule，失效，并使用 prettier 的规则进行代码检查。相当于，用 prettier 的规则，覆盖掉 eslint 的部分规则。因此，不会再有冲突。\n\n.eslintrc.js\n\n```\n// 确保prettier在最后面，覆盖前面的规则\n{\n    \"extends\": [\"eslint:recommended\", \"prettier\"]\n}\n```\n\n**eslint-plugin-prettier：**将 prettier 的能力集成到 eslint 中。按照 prettier 的规则检查代码规范性，并进行修复。\n\n```\n{\n    \"extends\": [\"eslint:recommended\",\"plugin:prettier/recommended\"]\t\n}\n```\n\n创建 .prettierrc\n\n```\n// 自己配置\n{\n  \"semi\": false,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"none\",\n  \"singleQuote\": true,\n  \"arrowParens\": \"avoid\"\n}\n```\n\n创建一个.prettierignore文件，让 Prettier CLI 和编辑器知道哪些文件不能格式化\n\n```\n# Ignore artifacts:\ndist\nbuild\ncoverage\n```\n\n配置编辑器（vscode为例）\n\nIDE中安装 **Prettier-Code Formater** 插件\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/859d7ee0fcb44d4889950b612fcfd044~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?)\n\n找到IDE中设置模块，搜索 format On Save，勾上这个就可以了。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bafdb7a36e814cc6ababcce086998726~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?)\n\n现在当我们 Ctrl/Cmd + S 保存代码时，插件就会帮助我们自动格式化了。\n\n### CSS规范\n\nCSS检查代码规范使用 `stylelint` 插件，规范则推荐使用stylelint-config-standard\n\n安装依赖\n\n```\nnpm install --save-dev stylelint stylelint-config-standard\n```\n\n在项目的根目录中创建一个配置文件`.stylelintrc.json`\n\n```\n{\n  \"extends\": \"stylelint-config-standard\"\n}\n```\n\n解决与`prettier`配置的冲突\n\n```\nnpm install --save-dev stylelint-config-prettier\n```\n\n将下面配置复制到`.stylelintrc.json`中\n\n```\n{\n  \"extends\": [\"stylelint-config-standard\", \"stylelint-config-prettier\"]\n}\n```\n\n在 git commitv阶段进行检测\n\n```\n \"lint-staged\": {\n    \"**/*\": \"prettier --write --ignore-unknown\", //格式化\n    \"src/**.{js,jsx,ts,tsx}\": \"eslint --ext .js,.jsx,.ts,.tsx\", //对js文件检测\n    \"**/*.{less,css}\": \"stylelint --fix\" //对css文件进行检测\n  },\n```\n\n\n\n## 二、Git规范\n\nGit 有很多的 hooks, 让我们在不同的阶段,对代码进行不同的操作,控制提交到仓库的代码的规范性,和准确性, 以下只是几个常用的钩子\n\n- **pre-commit**: 通过钩子函数,判断提交的代码是否符合规范\n\n- **commit-msg**: 通过钩子函数,判断 commit 信息是否符合规范\n\n- **pre-push**: 通过钩子,执行测试,避免对以前的内容造成影响\n\n#### 几个工具\n\n- husky：操作Git钩子的工具\n\n- lint-staged：本地暂存代码检查工具\n\n- commitlint：commit信息校验工具\n\n- commitizen：辅助 commit 信息 ,就像这样,通过选择输入,规范提交信息\n\n  ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7470030c2b04b488f0d4bc5729db82f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?)\n\n#### 安装代码校验依赖 husky和lint-staged\n\n```\nnpm install --save-dev husky lint-staged\nnpx husky install\nnpm set-script prepare \"husky install\"  // 在package.json中添加脚本\nnpx husky add .husky/pre-commit \"npx lint-staged\"  // pre-commit 执行 npx lint-staged 指令\n```\n\n然后将以下内容添加到`package.json`中\n\n```\n{\n  \"lint-staged\": {\n    \"**/*\": \"prettier --write --ignore-unknown\"  // 对暂存区的文件格式化\n  }\n}\n```\n\n#### 安装提交信息依赖 commitlint\n\n```\nnpm i commitlint @commitlint/config-conventional -D\nnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\n```\n\n**@commitlint/config-conventional** 这是一个规范配置,标识采用什么规范来执行消息校验, 这个默认是***Angular***的提交规范\n","source":"_posts/前端工程代码规范.md","raw":"---\ntitle: 前端工程代码规范 Eslint + Prettier + Husky + Commitlint+ Lint-staged\ndate: 2022-05-05\n---\n\n使用代码规范插件实现项目代码规范化\n\n<!-- more -->\n\n首先了解几个工具\n\n**eslint**：开发中，如果写出不符合我们规范的代码，能够及时提醒开发者，便于及时修复\n\n**prettier**：保存/粘贴代码时、使用格式化快捷键时，能够自动按照我们制定的规范、格式化代码\n\n**editorconfig**：不同开发者如果使用不同的编辑器（sublime/vscode）或系统（windows/mac），能够执行统一的代码风格标准。比如：缩进是tab还是space，结尾end_of_line是lf还是crlf\n\n## 一、代码规范\n\n### 代码检查工具 Eslint\n\n安装依赖\n\n```\nnpm i eslint -D\n```\n\n生成配置文件\n\n```\nnpx eslint --init\n```\n\n根据命令行提示进行配置，init命令会自动生成 .eslintrc.js\n\n### 代码风格工具 Prettier\n\n```\nnpm i prettier eslint-config-prettier eslint-plugin-prettier -D\n```\n\n**eslint-config-prettier：**让所有可能会与 prettier 规则存在冲突的 eslint rule，失效，并使用 prettier 的规则进行代码检查。相当于，用 prettier 的规则，覆盖掉 eslint 的部分规则。因此，不会再有冲突。\n\n.eslintrc.js\n\n```\n// 确保prettier在最后面，覆盖前面的规则\n{\n    \"extends\": [\"eslint:recommended\", \"prettier\"]\n}\n```\n\n**eslint-plugin-prettier：**将 prettier 的能力集成到 eslint 中。按照 prettier 的规则检查代码规范性，并进行修复。\n\n```\n{\n    \"extends\": [\"eslint:recommended\",\"plugin:prettier/recommended\"]\t\n}\n```\n\n创建 .prettierrc\n\n```\n// 自己配置\n{\n  \"semi\": false,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"none\",\n  \"singleQuote\": true,\n  \"arrowParens\": \"avoid\"\n}\n```\n\n创建一个.prettierignore文件，让 Prettier CLI 和编辑器知道哪些文件不能格式化\n\n```\n# Ignore artifacts:\ndist\nbuild\ncoverage\n```\n\n配置编辑器（vscode为例）\n\nIDE中安装 **Prettier-Code Formater** 插件\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/859d7ee0fcb44d4889950b612fcfd044~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?)\n\n找到IDE中设置模块，搜索 format On Save，勾上这个就可以了。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bafdb7a36e814cc6ababcce086998726~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?)\n\n现在当我们 Ctrl/Cmd + S 保存代码时，插件就会帮助我们自动格式化了。\n\n### CSS规范\n\nCSS检查代码规范使用 `stylelint` 插件，规范则推荐使用stylelint-config-standard\n\n安装依赖\n\n```\nnpm install --save-dev stylelint stylelint-config-standard\n```\n\n在项目的根目录中创建一个配置文件`.stylelintrc.json`\n\n```\n{\n  \"extends\": \"stylelint-config-standard\"\n}\n```\n\n解决与`prettier`配置的冲突\n\n```\nnpm install --save-dev stylelint-config-prettier\n```\n\n将下面配置复制到`.stylelintrc.json`中\n\n```\n{\n  \"extends\": [\"stylelint-config-standard\", \"stylelint-config-prettier\"]\n}\n```\n\n在 git commitv阶段进行检测\n\n```\n \"lint-staged\": {\n    \"**/*\": \"prettier --write --ignore-unknown\", //格式化\n    \"src/**.{js,jsx,ts,tsx}\": \"eslint --ext .js,.jsx,.ts,.tsx\", //对js文件检测\n    \"**/*.{less,css}\": \"stylelint --fix\" //对css文件进行检测\n  },\n```\n\n\n\n## 二、Git规范\n\nGit 有很多的 hooks, 让我们在不同的阶段,对代码进行不同的操作,控制提交到仓库的代码的规范性,和准确性, 以下只是几个常用的钩子\n\n- **pre-commit**: 通过钩子函数,判断提交的代码是否符合规范\n\n- **commit-msg**: 通过钩子函数,判断 commit 信息是否符合规范\n\n- **pre-push**: 通过钩子,执行测试,避免对以前的内容造成影响\n\n#### 几个工具\n\n- husky：操作Git钩子的工具\n\n- lint-staged：本地暂存代码检查工具\n\n- commitlint：commit信息校验工具\n\n- commitizen：辅助 commit 信息 ,就像这样,通过选择输入,规范提交信息\n\n  ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7470030c2b04b488f0d4bc5729db82f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?)\n\n#### 安装代码校验依赖 husky和lint-staged\n\n```\nnpm install --save-dev husky lint-staged\nnpx husky install\nnpm set-script prepare \"husky install\"  // 在package.json中添加脚本\nnpx husky add .husky/pre-commit \"npx lint-staged\"  // pre-commit 执行 npx lint-staged 指令\n```\n\n然后将以下内容添加到`package.json`中\n\n```\n{\n  \"lint-staged\": {\n    \"**/*\": \"prettier --write --ignore-unknown\"  // 对暂存区的文件格式化\n  }\n}\n```\n\n#### 安装提交信息依赖 commitlint\n\n```\nnpm i commitlint @commitlint/config-conventional -D\nnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\n```\n\n**@commitlint/config-conventional** 这是一个规范配置,标识采用什么规范来执行消息校验, 这个默认是***Angular***的提交规范\n","slug":"前端工程代码规范","published":1,"updated":"2022-09-02T16:59:06.859Z","_id":"cl4a3rr250008lgtt0jf8gpgt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用代码规范插件实现项目代码规范化</p>\n<span id=\"more\"></span>\n\n<p>首先了解几个工具</p>\n<p><strong>eslint</strong>：开发中，如果写出不符合我们规范的代码，能够及时提醒开发者，便于及时修复</p>\n<p><strong>prettier</strong>：保存&#x2F;粘贴代码时、使用格式化快捷键时，能够自动按照我们制定的规范、格式化代码</p>\n<p><strong>editorconfig</strong>：不同开发者如果使用不同的编辑器（sublime&#x2F;vscode）或系统（windows&#x2F;mac），能够执行统一的代码风格标准。比如：缩进是tab还是space，结尾end_of_line是lf还是crlf</p>\n\n        <h2 id=\"一、代码规范\"   >\n          <a href=\"#一、代码规范\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一、代码规范\" class=\"headerlink\" title=\"一、代码规范\"></a>一、代码规范</h2>\n      \n        <h3 id=\"代码检查工具-Eslint\"   >\n          <a href=\"#代码检查工具-Eslint\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码检查工具-Eslint\" class=\"headerlink\" title=\"代码检查工具 Eslint\"></a>代码检查工具 Eslint</h3>\n      <p>安装依赖</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint -D</span><br></pre></td></tr></table></div></figure>\n\n<p>生成配置文件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx eslint --init</span><br></pre></td></tr></table></div></figure>\n\n<p>根据命令行提示进行配置，init命令会自动生成 .eslintrc.js</p>\n\n        <h3 id=\"代码风格工具-Prettier\"   >\n          <a href=\"#代码风格工具-Prettier\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码风格工具-Prettier\" class=\"headerlink\" title=\"代码风格工具 Prettier\"></a>代码风格工具 Prettier</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i prettier eslint-config-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>eslint-config-prettier：</strong>让所有可能会与 prettier 规则存在冲突的 eslint rule，失效，并使用 prettier 的规则进行代码检查。相当于，用 prettier 的规则，覆盖掉 eslint 的部分规则。因此，不会再有冲突。</p>\n<p>.eslintrc.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 确保prettier在最后面，覆盖前面的规则</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;extends&quot;: [&quot;eslint:recommended&quot;, &quot;prettier&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>eslint-plugin-prettier：</strong>将 prettier 的能力集成到 eslint 中。按照 prettier 的规则检查代码规范性，并进行修复。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;extends&quot;: [&quot;eslint:recommended&quot;,&quot;plugin:prettier/recommended&quot;]\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>创建 .prettierrc</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自己配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;semi&quot;: false,</span><br><span class=\"line\">  &quot;tabWidth&quot;: 2,</span><br><span class=\"line\">  &quot;trailingComma&quot;: &quot;none&quot;,</span><br><span class=\"line\">  &quot;singleQuote&quot;: true,</span><br><span class=\"line\">  &quot;arrowParens&quot;: &quot;avoid&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>创建一个.prettierignore文件，让 Prettier CLI 和编辑器知道哪些文件不能格式化</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ignore artifacts:</span><br><span class=\"line\">dist</span><br><span class=\"line\">build</span><br><span class=\"line\">coverage</span><br></pre></td></tr></table></div></figure>\n\n<p>配置编辑器（vscode为例）</p>\n<p>IDE中安装 <strong>Prettier-Code Formater</strong> 插件</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/859d7ee0fcb44d4889950b612fcfd044~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>找到IDE中设置模块，搜索 format On Save，勾上这个就可以了。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bafdb7a36e814cc6ababcce086998726~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>现在当我们 Ctrl&#x2F;Cmd + S 保存代码时，插件就会帮助我们自动格式化了。</p>\n\n        <h3 id=\"CSS规范\"   >\n          <a href=\"#CSS规范\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#CSS规范\" class=\"headerlink\" title=\"CSS规范\"></a>CSS规范</h3>\n      <p>CSS检查代码规范使用 <code>stylelint</code> 插件，规范则推荐使用stylelint-config-standard</p>\n<p>安装依赖</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev stylelint stylelint-config-standard</span><br></pre></td></tr></table></div></figure>\n\n<p>在项目的根目录中创建一个配置文件<code>.stylelintrc.json</code></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;extends&quot;: &quot;stylelint-config-standard&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>解决与<code>prettier</code>配置的冲突</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev stylelint-config-prettier</span><br></pre></td></tr></table></div></figure>\n\n<p>将下面配置复制到<code>.stylelintrc.json</code>中</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;extends&quot;: [&quot;stylelint-config-standard&quot;, &quot;stylelint-config-prettier&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在 git commitv阶段进行检测</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;lint-staged&quot;: &#123;</span><br><span class=\"line\">   &quot;**/*&quot;: &quot;prettier --write --ignore-unknown&quot;, //格式化</span><br><span class=\"line\">   &quot;src/**.&#123;js,jsx,ts,tsx&#125;&quot;: &quot;eslint --ext .js,.jsx,.ts,.tsx&quot;, //对js文件检测</span><br><span class=\"line\">   &quot;**/*.&#123;less,css&#125;&quot;: &quot;stylelint --fix&quot; //对css文件进行检测</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h2 id=\"二、Git规范\"   >\n          <a href=\"#二、Git规范\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二、Git规范\" class=\"headerlink\" title=\"二、Git规范\"></a>二、Git规范</h2>\n      <p>Git 有很多的 hooks, 让我们在不同的阶段,对代码进行不同的操作,控制提交到仓库的代码的规范性,和准确性, 以下只是几个常用的钩子</p>\n<ul>\n<li><p><strong>pre-commit</strong>: 通过钩子函数,判断提交的代码是否符合规范</p>\n</li>\n<li><p><strong>commit-msg</strong>: 通过钩子函数,判断 commit 信息是否符合规范</p>\n</li>\n<li><p><strong>pre-push</strong>: 通过钩子,执行测试,避免对以前的内容造成影响</p>\n</li>\n</ul>\n\n        <h4 id=\"几个工具\"   >\n          <a href=\"#几个工具\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#几个工具\" class=\"headerlink\" title=\"几个工具\"></a>几个工具</h4>\n      <ul>\n<li><p>husky：操作Git钩子的工具</p>\n</li>\n<li><p>lint-staged：本地暂存代码检查工具</p>\n</li>\n<li><p>commitlint：commit信息校验工具</p>\n</li>\n<li><p>commitizen：辅助 commit 信息 ,就像这样,通过选择输入,规范提交信息</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7470030c2b04b488f0d4bc5729db82f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"image.png\"></p>\n</li>\n</ul>\n\n        <h4 id=\"安装代码校验依赖-husky和lint-staged\"   >\n          <a href=\"#安装代码校验依赖-husky和lint-staged\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#安装代码校验依赖-husky和lint-staged\" class=\"headerlink\" title=\"安装代码校验依赖 husky和lint-staged\"></a>安装代码校验依赖 husky和lint-staged</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev husky lint-staged</span><br><span class=\"line\">npx husky install</span><br><span class=\"line\">npm set-script prepare &quot;husky install&quot;  // 在package.json中添加脚本</span><br><span class=\"line\">npx husky add .husky/pre-commit &quot;npx lint-staged&quot;  // pre-commit 执行 npx lint-staged 指令</span><br></pre></td></tr></table></div></figure>\n\n<p>然后将以下内容添加到<code>package.json</code>中</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;lint-staged&quot;: &#123;</span><br><span class=\"line\">    &quot;**/*&quot;: &quot;prettier --write --ignore-unknown&quot;  // 对暂存区的文件格式化</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"安装提交信息依赖-commitlint\"   >\n          <a href=\"#安装提交信息依赖-commitlint\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#安装提交信息依赖-commitlint\" class=\"headerlink\" title=\"安装提交信息依赖 commitlint\"></a>安装提交信息依赖 commitlint</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i commitlint @commitlint/config-conventional -D</span><br><span class=\"line\">npx husky add .husky/commit-msg &#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>@commitlint&#x2F;config-conventional</strong> 这是一个规范配置,标识采用什么规范来执行消息校验, 这个默认是<em><strong>Angular</strong></em>的提交规范</p>\n","site":{"data":{}},"excerpt":"<p>使用代码规范插件实现项目代码规范化</p>","more":"<p>首先了解几个工具</p>\n<p><strong>eslint</strong>：开发中，如果写出不符合我们规范的代码，能够及时提醒开发者，便于及时修复</p>\n<p><strong>prettier</strong>：保存&#x2F;粘贴代码时、使用格式化快捷键时，能够自动按照我们制定的规范、格式化代码</p>\n<p><strong>editorconfig</strong>：不同开发者如果使用不同的编辑器（sublime&#x2F;vscode）或系统（windows&#x2F;mac），能够执行统一的代码风格标准。比如：缩进是tab还是space，结尾end_of_line是lf还是crlf</p>\n\n        <h2 id=\"一、代码规范\"   >\n          <a href=\"#一、代码规范\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一、代码规范\" class=\"headerlink\" title=\"一、代码规范\"></a>一、代码规范</h2>\n      \n        <h3 id=\"代码检查工具-Eslint\"   >\n          <a href=\"#代码检查工具-Eslint\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码检查工具-Eslint\" class=\"headerlink\" title=\"代码检查工具 Eslint\"></a>代码检查工具 Eslint</h3>\n      <p>安装依赖</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint -D</span><br></pre></td></tr></table></div></figure>\n\n<p>生成配置文件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx eslint --init</span><br></pre></td></tr></table></div></figure>\n\n<p>根据命令行提示进行配置，init命令会自动生成 .eslintrc.js</p>\n\n        <h3 id=\"代码风格工具-Prettier\"   >\n          <a href=\"#代码风格工具-Prettier\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#代码风格工具-Prettier\" class=\"headerlink\" title=\"代码风格工具 Prettier\"></a>代码风格工具 Prettier</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i prettier eslint-config-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>eslint-config-prettier：</strong>让所有可能会与 prettier 规则存在冲突的 eslint rule，失效，并使用 prettier 的规则进行代码检查。相当于，用 prettier 的规则，覆盖掉 eslint 的部分规则。因此，不会再有冲突。</p>\n<p>.eslintrc.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 确保prettier在最后面，覆盖前面的规则</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;extends&quot;: [&quot;eslint:recommended&quot;, &quot;prettier&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>eslint-plugin-prettier：</strong>将 prettier 的能力集成到 eslint 中。按照 prettier 的规则检查代码规范性，并进行修复。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;extends&quot;: [&quot;eslint:recommended&quot;,&quot;plugin:prettier/recommended&quot;]\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>创建 .prettierrc</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自己配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;semi&quot;: false,</span><br><span class=\"line\">  &quot;tabWidth&quot;: 2,</span><br><span class=\"line\">  &quot;trailingComma&quot;: &quot;none&quot;,</span><br><span class=\"line\">  &quot;singleQuote&quot;: true,</span><br><span class=\"line\">  &quot;arrowParens&quot;: &quot;avoid&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>创建一个.prettierignore文件，让 Prettier CLI 和编辑器知道哪些文件不能格式化</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ignore artifacts:</span><br><span class=\"line\">dist</span><br><span class=\"line\">build</span><br><span class=\"line\">coverage</span><br></pre></td></tr></table></div></figure>\n\n<p>配置编辑器（vscode为例）</p>\n<p>IDE中安装 <strong>Prettier-Code Formater</strong> 插件</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/859d7ee0fcb44d4889950b612fcfd044~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>找到IDE中设置模块，搜索 format On Save，勾上这个就可以了。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bafdb7a36e814cc6ababcce086998726~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>现在当我们 Ctrl&#x2F;Cmd + S 保存代码时，插件就会帮助我们自动格式化了。</p>\n\n        <h3 id=\"CSS规范\"   >\n          <a href=\"#CSS规范\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#CSS规范\" class=\"headerlink\" title=\"CSS规范\"></a>CSS规范</h3>\n      <p>CSS检查代码规范使用 <code>stylelint</code> 插件，规范则推荐使用stylelint-config-standard</p>\n<p>安装依赖</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev stylelint stylelint-config-standard</span><br></pre></td></tr></table></div></figure>\n\n<p>在项目的根目录中创建一个配置文件<code>.stylelintrc.json</code></p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;extends&quot;: &quot;stylelint-config-standard&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>解决与<code>prettier</code>配置的冲突</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev stylelint-config-prettier</span><br></pre></td></tr></table></div></figure>\n\n<p>将下面配置复制到<code>.stylelintrc.json</code>中</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;extends&quot;: [&quot;stylelint-config-standard&quot;, &quot;stylelint-config-prettier&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在 git commitv阶段进行检测</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;lint-staged&quot;: &#123;</span><br><span class=\"line\">   &quot;**/*&quot;: &quot;prettier --write --ignore-unknown&quot;, //格式化</span><br><span class=\"line\">   &quot;src/**.&#123;js,jsx,ts,tsx&#125;&quot;: &quot;eslint --ext .js,.jsx,.ts,.tsx&quot;, //对js文件检测</span><br><span class=\"line\">   &quot;**/*.&#123;less,css&#125;&quot;: &quot;stylelint --fix&quot; //对css文件进行检测</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h2 id=\"二、Git规范\"   >\n          <a href=\"#二、Git规范\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二、Git规范\" class=\"headerlink\" title=\"二、Git规范\"></a>二、Git规范</h2>\n      <p>Git 有很多的 hooks, 让我们在不同的阶段,对代码进行不同的操作,控制提交到仓库的代码的规范性,和准确性, 以下只是几个常用的钩子</p>\n<ul>\n<li><p><strong>pre-commit</strong>: 通过钩子函数,判断提交的代码是否符合规范</p>\n</li>\n<li><p><strong>commit-msg</strong>: 通过钩子函数,判断 commit 信息是否符合规范</p>\n</li>\n<li><p><strong>pre-push</strong>: 通过钩子,执行测试,避免对以前的内容造成影响</p>\n</li>\n</ul>\n\n        <h4 id=\"几个工具\"   >\n          <a href=\"#几个工具\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#几个工具\" class=\"headerlink\" title=\"几个工具\"></a>几个工具</h4>\n      <ul>\n<li><p>husky：操作Git钩子的工具</p>\n</li>\n<li><p>lint-staged：本地暂存代码检查工具</p>\n</li>\n<li><p>commitlint：commit信息校验工具</p>\n</li>\n<li><p>commitizen：辅助 commit 信息 ,就像这样,通过选择输入,规范提交信息</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7470030c2b04b488f0d4bc5729db82f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"image.png\"></p>\n</li>\n</ul>\n\n        <h4 id=\"安装代码校验依赖-husky和lint-staged\"   >\n          <a href=\"#安装代码校验依赖-husky和lint-staged\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#安装代码校验依赖-husky和lint-staged\" class=\"headerlink\" title=\"安装代码校验依赖 husky和lint-staged\"></a>安装代码校验依赖 husky和lint-staged</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev husky lint-staged</span><br><span class=\"line\">npx husky install</span><br><span class=\"line\">npm set-script prepare &quot;husky install&quot;  // 在package.json中添加脚本</span><br><span class=\"line\">npx husky add .husky/pre-commit &quot;npx lint-staged&quot;  // pre-commit 执行 npx lint-staged 指令</span><br></pre></td></tr></table></div></figure>\n\n<p>然后将以下内容添加到<code>package.json</code>中</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;lint-staged&quot;: &#123;</span><br><span class=\"line\">    &quot;**/*&quot;: &quot;prettier --write --ignore-unknown&quot;  // 对暂存区的文件格式化</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"安装提交信息依赖-commitlint\"   >\n          <a href=\"#安装提交信息依赖-commitlint\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#安装提交信息依赖-commitlint\" class=\"headerlink\" title=\"安装提交信息依赖 commitlint\"></a>安装提交信息依赖 commitlint</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i commitlint @commitlint/config-conventional -D</span><br><span class=\"line\">npx husky add .husky/commit-msg &#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>@commitlint&#x2F;config-conventional</strong> 这是一个规范配置,标识采用什么规范来执行消息校验, 这个默认是<em><strong>Angular</strong></em>的提交规范</p>"},{"title":"正则表达式","date":"2022-02-05T16:00:00.000Z","_content":"\n了解一下常用的正则表达式语法吧~\n<!-- more -->\n\n# 一个正则表达式\n`/^a?b+c*\\d\\D\\w[0-9a-zA-Z_]{1,8}$/ig`\n\n# 语法\n\n| single char | quantifiers(数量) | position(位置) |\n| --- | --- | --- |\n| \\d 匹配数字 | * 0个或者更多 | ^ 一行的开头 |\n| \\D 匹配非数字 | + 1个或更多，至少1个 | $ 一行的结尾 |\n| \\w 匹配word(数字、字母、下划线) | ? 0个或1个,一个Optional | \\b 单词\"结界\"(word bounds) |\n| \\W 匹配非word(数字、字母、下划线) | {min,max}出现次数在一个范围内 |  |\n| \\s 匹配white space(包括空格、tab等) | {n}匹配出现n次的 |  |\n| \\S 匹配非white space(包括空格、tab等) |  |  |\n| . 匹配任何，任何的字符 |  |  |\n\n### 贪婪匹配和惰性匹配\n贪婪匹配：匹配时尽可能多的匹配\n\n```\nvar regex = /\\d{2,5}/g;\nvar string = \"123 1234 12345 123456\";\nconsole.log( string.match(regex) ); \n// => [\"123\", \"1234\", \"12345\", \"12345\"]\n```\n惰性匹配：尽可能少的匹配\n\n```\nvar regex = /\\d{2,5}?/g;\nvar string = \"123 1234 12345 123456\";\nconsole.log( string.match(regex) ); \n// => [\"12\", \"12\", \"34\", \"12\", \"34\", \"12\", \"34\", \"56\"]\n```\n其中/\\d{2,5}?/表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。\n\n### 多选分支\n(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。\n要匹配\"good\"和\"nice\"可以使用/good|nice/\n\n```\nvar regex = /good|nice/g;\nvar string = \"good idea, nice try.\";\nconsole.log( string.match(regex) ); \n// => [\"good\", \"nice\"]\n```\n\n### 单词边界\n\n```\nThe cat scattered his food all over the room.\n```\n只是使用 /cat/ 这个正则，就会同时匹配到cat和scattered这两处文本。改写成 /\\bcat\\b/ 这样就能匹配到cat这个单词了。\n","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式\ndate: 2022-02-06\n---\n\n了解一下常用的正则表达式语法吧~\n<!-- more -->\n\n# 一个正则表达式\n`/^a?b+c*\\d\\D\\w[0-9a-zA-Z_]{1,8}$/ig`\n\n# 语法\n\n| single char | quantifiers(数量) | position(位置) |\n| --- | --- | --- |\n| \\d 匹配数字 | * 0个或者更多 | ^ 一行的开头 |\n| \\D 匹配非数字 | + 1个或更多，至少1个 | $ 一行的结尾 |\n| \\w 匹配word(数字、字母、下划线) | ? 0个或1个,一个Optional | \\b 单词\"结界\"(word bounds) |\n| \\W 匹配非word(数字、字母、下划线) | {min,max}出现次数在一个范围内 |  |\n| \\s 匹配white space(包括空格、tab等) | {n}匹配出现n次的 |  |\n| \\S 匹配非white space(包括空格、tab等) |  |  |\n| . 匹配任何，任何的字符 |  |  |\n\n### 贪婪匹配和惰性匹配\n贪婪匹配：匹配时尽可能多的匹配\n\n```\nvar regex = /\\d{2,5}/g;\nvar string = \"123 1234 12345 123456\";\nconsole.log( string.match(regex) ); \n// => [\"123\", \"1234\", \"12345\", \"12345\"]\n```\n惰性匹配：尽可能少的匹配\n\n```\nvar regex = /\\d{2,5}?/g;\nvar string = \"123 1234 12345 123456\";\nconsole.log( string.match(regex) ); \n// => [\"12\", \"12\", \"34\", \"12\", \"34\", \"12\", \"34\", \"56\"]\n```\n其中/\\d{2,5}?/表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。\n\n### 多选分支\n(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。\n要匹配\"good\"和\"nice\"可以使用/good|nice/\n\n```\nvar regex = /good|nice/g;\nvar string = \"good idea, nice try.\";\nconsole.log( string.match(regex) ); \n// => [\"good\", \"nice\"]\n```\n\n### 单词边界\n\n```\nThe cat scattered his food all over the room.\n```\n只是使用 /cat/ 这个正则，就会同时匹配到cat和scattered这两处文本。改写成 /\\bcat\\b/ 这样就能匹配到cat这个单词了。\n","slug":"正则表达式","published":1,"updated":"2022-09-02T17:00:04.560Z","_id":"cl4a3rr260009lgttalx69zt6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>了解一下常用的正则表达式语法吧~</p>\n<span id=\"more\"></span>\n\n\n        <h1 id=\"一个正则表达式\"   >\n          <a href=\"#一个正则表达式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一个正则表达式\" class=\"headerlink\" title=\"一个正则表达式\"></a>一个正则表达式</h1>\n      <p><code>/^a?b+c*\\d\\D\\w[0-9a-zA-Z_]&#123;1,8&#125;$/ig</code></p>\n\n        <h1 id=\"语法\"   >\n          <a href=\"#语法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1>\n      <div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>single char</th>\n<th>quantifiers(数量)</th>\n<th>position(位置)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\d 匹配数字</td>\n<td>* 0个或者更多</td>\n<td>^ 一行的开头</td>\n</tr>\n<tr>\n<td>\\D 匹配非数字</td>\n<td>+ 1个或更多，至少1个</td>\n<td>$ 一行的结尾</td>\n</tr>\n<tr>\n<td>\\w 匹配word(数字、字母、下划线)</td>\n<td>? 0个或1个,一个Optional</td>\n<td>\\b 单词”结界”(word bounds)</td>\n</tr>\n<tr>\n<td>\\W 匹配非word(数字、字母、下划线)</td>\n<td>{min,max}出现次数在一个范围内</td>\n<td></td>\n</tr>\n<tr>\n<td>\\s 匹配white space(包括空格、tab等)</td>\n<td>{n}匹配出现n次的</td>\n<td></td>\n</tr>\n<tr>\n<td>\\S 匹配非white space(包括空格、tab等)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>. 匹配任何，任何的字符</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"贪婪匹配和惰性匹配\"   >\n          <a href=\"#贪婪匹配和惰性匹配\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#贪婪匹配和惰性匹配\" class=\"headerlink\" title=\"贪婪匹配和惰性匹配\"></a>贪婪匹配和惰性匹配</h3>\n      <p>贪婪匹配：匹配时尽可能多的匹配</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /\\d&#123;2,5&#125;/g;</span><br><span class=\"line\">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>惰性匹配：尽可能少的匹配</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /\\d&#123;2,5&#125;?/g;</span><br><span class=\"line\">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>其中&#x2F;\\d{2,5}?&#x2F;表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p>\n\n        <h3 id=\"多选分支\"   >\n          <a href=\"#多选分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多选分支\" class=\"headerlink\" title=\"多选分支\"></a>多选分支</h3>\n      <p>(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。<br>要匹配”good”和”nice”可以使用&#x2F;good|nice&#x2F;</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /good|nice/g;</span><br><span class=\"line\">var string = &quot;good idea, nice try.&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;good&quot;, &quot;nice&quot;]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"单词边界\"   >\n          <a href=\"#单词边界\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单词边界\" class=\"headerlink\" title=\"单词边界\"></a>单词边界</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The cat scattered his food all over the room.</span><br></pre></td></tr></table></div></figure>\n<p>只是使用 &#x2F;cat&#x2F; 这个正则，就会同时匹配到cat和scattered这两处文本。改写成 &#x2F;\\bcat\\b&#x2F; 这样就能匹配到cat这个单词了。</p>\n","site":{"data":{}},"excerpt":"<p>了解一下常用的正则表达式语法吧~</p>","more":"<h1 id=\"一个正则表达式\"   >\n          <a href=\"#一个正则表达式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一个正则表达式\" class=\"headerlink\" title=\"一个正则表达式\"></a>一个正则表达式</h1>\n      <p><code>/^a?b+c*\\d\\D\\w[0-9a-zA-Z_]&#123;1,8&#125;$/ig</code></p>\n\n        <h1 id=\"语法\"   >\n          <a href=\"#语法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1>\n      <div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>single char</th>\n<th>quantifiers(数量)</th>\n<th>position(位置)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\d 匹配数字</td>\n<td>* 0个或者更多</td>\n<td>^ 一行的开头</td>\n</tr>\n<tr>\n<td>\\D 匹配非数字</td>\n<td>+ 1个或更多，至少1个</td>\n<td>$ 一行的结尾</td>\n</tr>\n<tr>\n<td>\\w 匹配word(数字、字母、下划线)</td>\n<td>? 0个或1个,一个Optional</td>\n<td>\\b 单词”结界”(word bounds)</td>\n</tr>\n<tr>\n<td>\\W 匹配非word(数字、字母、下划线)</td>\n<td>{min,max}出现次数在一个范围内</td>\n<td></td>\n</tr>\n<tr>\n<td>\\s 匹配white space(包括空格、tab等)</td>\n<td>{n}匹配出现n次的</td>\n<td></td>\n</tr>\n<tr>\n<td>\\S 匹配非white space(包括空格、tab等)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>. 匹配任何，任何的字符</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"贪婪匹配和惰性匹配\"   >\n          <a href=\"#贪婪匹配和惰性匹配\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#贪婪匹配和惰性匹配\" class=\"headerlink\" title=\"贪婪匹配和惰性匹配\"></a>贪婪匹配和惰性匹配</h3>\n      <p>贪婪匹配：匹配时尽可能多的匹配</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /\\d&#123;2,5&#125;/g;</span><br><span class=\"line\">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>惰性匹配：尽可能少的匹配</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /\\d&#123;2,5&#125;?/g;</span><br><span class=\"line\">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>其中&#x2F;\\d{2,5}?&#x2F;表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p>\n\n        <h3 id=\"多选分支\"   >\n          <a href=\"#多选分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多选分支\" class=\"headerlink\" title=\"多选分支\"></a>多选分支</h3>\n      <p>(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。<br>要匹配”good”和”nice”可以使用&#x2F;good|nice&#x2F;</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /good|nice/g;</span><br><span class=\"line\">var string = &quot;good idea, nice try.&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;good&quot;, &quot;nice&quot;]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"单词边界\"   >\n          <a href=\"#单词边界\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单词边界\" class=\"headerlink\" title=\"单词边界\"></a>单词边界</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The cat scattered his food all over the room.</span><br></pre></td></tr></table></div></figure>\n<p>只是使用 &#x2F;cat&#x2F; 这个正则，就会同时匹配到cat和scattered这两处文本。改写成 &#x2F;\\bcat\\b&#x2F; 这样就能匹配到cat这个单词了。</p>"},{"title":"虚拟列表","date":"2022-03-05T16:00:00.000Z","_content":"\n进行大量列表的渲染时，过多的DOM元素需要消耗大量的性能，这时使用虚拟列表是个不错的选择！\n<!-- more -->\n\n## 什么是虚拟列表\n\n**虚拟列表**其实是按需显示的一种实现，即只对**可见区域**进行渲染，对**非可见区域**中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。\n\n假设有1万条记录需要同时渲染，我们屏幕的**可见区域**的高度为**500px**,而列表项的高度为**50px**，则此时我们在屏幕中最多只能看到10个列表项。\n\n假设滚动发生，滚动条距顶部的位置为**150px**,则我们可得知在**可见区域**内的列表项为**第4项**至**第13项**。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-watermark.awebp)\n\n## 实现\n\n```\n<div class=\"infinite-list-container\">\n    <div class=\"infinite-list-phantom\"></div>\n    <div class=\"infinite-list\">\n      <!-- item-1 -->\n      <!-- item-2 -->\n      <!-- ...... -->\n      <!-- item-n -->\n    </div>\n</div>\n```\n\n\n1. 设置占位容器，用于撑起滚动条。infinite-list-phantom 为容器内的占位。\n2. 渲染屏幕内能够容纳的元素，根据索引对总数据进行截取。infinite-list 为列表项的渲染区域\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-watermark.awebp)\n\n1. 计算当前可视区域**起始数据索引****startIndex**\n2. 计算当前可视区域**结束数据索引****endIndex**\n3. 计算**当前可视区域的数据**，并渲染到页面中\n4. 计算**startIndex**对应的数据在整个列表中的**偏移位置startOffset**并设置到列表上\n\n\n\n- 列表总高度listHeight = listData.length * itemSize\n- 可显示的列表项数visibleCount = Math.ceil(screenHeight / itemSize)，数量为(500 / 50) + 1，**多一个偏移项**。\n- 数据的起始索引startIndex = Math.floor(scrollTop / itemSize)\n- 数据的结束索引endIndex = startIndex + visibleCount，最大为数据总长度。\n- 列表显示数据为visibleData = listData.slice(startIndex,endIndex)\n\n当滚动后，由于渲染区域相对于可视区域已经发生了偏移，此时我需要获取一个偏移量startOffset，通过**样式控制**将渲染区域偏移至可视区域中。\n\n- 偏移量startOffset = scrollTop - (scrollTop % itemSize);不超过一个，不用偏移，超过一个，偏移超过的floor值。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-watermark.awebp)\n\n\n\n监听容器内的滚动事件，不断的对上面的数据进行重新赋值即可。\n\n以上思路仅适用于固定高度列表。","source":"_posts/虚拟列表.md","raw":"---\ntitle: 虚拟列表\ndate: 2022-03-06\n---\n\n进行大量列表的渲染时，过多的DOM元素需要消耗大量的性能，这时使用虚拟列表是个不错的选择！\n<!-- more -->\n\n## 什么是虚拟列表\n\n**虚拟列表**其实是按需显示的一种实现，即只对**可见区域**进行渲染，对**非可见区域**中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。\n\n假设有1万条记录需要同时渲染，我们屏幕的**可见区域**的高度为**500px**,而列表项的高度为**50px**，则此时我们在屏幕中最多只能看到10个列表项。\n\n假设滚动发生，滚动条距顶部的位置为**150px**,则我们可得知在**可见区域**内的列表项为**第4项**至**第13项**。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-watermark.awebp)\n\n## 实现\n\n```\n<div class=\"infinite-list-container\">\n    <div class=\"infinite-list-phantom\"></div>\n    <div class=\"infinite-list\">\n      <!-- item-1 -->\n      <!-- item-2 -->\n      <!-- ...... -->\n      <!-- item-n -->\n    </div>\n</div>\n```\n\n\n1. 设置占位容器，用于撑起滚动条。infinite-list-phantom 为容器内的占位。\n2. 渲染屏幕内能够容纳的元素，根据索引对总数据进行截取。infinite-list 为列表项的渲染区域\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-watermark.awebp)\n\n1. 计算当前可视区域**起始数据索引****startIndex**\n2. 计算当前可视区域**结束数据索引****endIndex**\n3. 计算**当前可视区域的数据**，并渲染到页面中\n4. 计算**startIndex**对应的数据在整个列表中的**偏移位置startOffset**并设置到列表上\n\n\n\n- 列表总高度listHeight = listData.length * itemSize\n- 可显示的列表项数visibleCount = Math.ceil(screenHeight / itemSize)，数量为(500 / 50) + 1，**多一个偏移项**。\n- 数据的起始索引startIndex = Math.floor(scrollTop / itemSize)\n- 数据的结束索引endIndex = startIndex + visibleCount，最大为数据总长度。\n- 列表显示数据为visibleData = listData.slice(startIndex,endIndex)\n\n当滚动后，由于渲染区域相对于可视区域已经发生了偏移，此时我需要获取一个偏移量startOffset，通过**样式控制**将渲染区域偏移至可视区域中。\n\n- 偏移量startOffset = scrollTop - (scrollTop % itemSize);不超过一个，不用偏移，超过一个，偏移超过的floor值。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-watermark.awebp)\n\n\n\n监听容器内的滚动事件，不断的对上面的数据进行重新赋值即可。\n\n以上思路仅适用于固定高度列表。","slug":"虚拟列表","published":1,"updated":"2022-09-02T16:59:52.913Z","_id":"cl4a3rr26000algtt1niwezxv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>进行大量列表的渲染时，过多的DOM元素需要消耗大量的性能，这时使用虚拟列表是个不错的选择！</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"什么是虚拟列表\"   >\n          <a href=\"#什么是虚拟列表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是虚拟列表\" class=\"headerlink\" title=\"什么是虚拟列表\"></a>什么是虚拟列表</h2>\n      <p><strong>虚拟列表</strong>其实是按需显示的一种实现，即只对<strong>可见区域</strong>进行渲染，对<strong>非可见区域</strong>中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。</p>\n<p>假设有1万条记录需要同时渲染，我们屏幕的<strong>可见区域</strong>的高度为<strong>500px</strong>,而列表项的高度为<strong>50px</strong>，则此时我们在屏幕中最多只能看到10个列表项。</p>\n<p>假设滚动发生，滚动条距顶部的位置为<strong>150px</strong>,则我们可得知在<strong>可见区域</strong>内的列表项为<strong>第4项</strong>至<strong>第13项</strong>。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n\n        <h2 id=\"实现\"   >\n          <a href=\"#实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;infinite-list-container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;infinite-list-phantom&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;infinite-list&quot;&gt;</span><br><span class=\"line\">      &lt;!-- item-1 --&gt;</span><br><span class=\"line\">      &lt;!-- item-2 --&gt;</span><br><span class=\"line\">      &lt;!-- ...... --&gt;</span><br><span class=\"line\">      &lt;!-- item-n --&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n\n\n<ol>\n<li>设置占位容器，用于撑起滚动条。infinite-list-phantom 为容器内的占位。</li>\n<li>渲染屏幕内能够容纳的元素，根据索引对总数据进行截取。infinite-list 为列表项的渲染区域</li>\n</ol>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n<ol>\n<li>计算当前可视区域<strong>起始数据索引****startIndex</strong></li>\n<li>计算当前可视区域<strong>结束数据索引****endIndex</strong></li>\n<li>计算<strong>当前可视区域的数据</strong>，并渲染到页面中</li>\n<li>计算<strong>startIndex</strong>对应的数据在整个列表中的<strong>偏移位置startOffset</strong>并设置到列表上</li>\n</ol>\n<ul>\n<li>列表总高度listHeight &#x3D; listData.length * itemSize</li>\n<li>可显示的列表项数visibleCount &#x3D; Math.ceil(screenHeight &#x2F; itemSize)，数量为(500 &#x2F; 50) + 1，<strong>多一个偏移项</strong>。</li>\n<li>数据的起始索引startIndex &#x3D; Math.floor(scrollTop &#x2F; itemSize)</li>\n<li>数据的结束索引endIndex &#x3D; startIndex + visibleCount，最大为数据总长度。</li>\n<li>列表显示数据为visibleData &#x3D; listData.slice(startIndex,endIndex)</li>\n</ul>\n<p>当滚动后，由于渲染区域相对于可视区域已经发生了偏移，此时我需要获取一个偏移量startOffset，通过<strong>样式控制</strong>将渲染区域偏移至可视区域中。</p>\n<ul>\n<li>偏移量startOffset &#x3D; scrollTop - (scrollTop % itemSize);不超过一个，不用偏移，超过一个，偏移超过的floor值。</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n<p>监听容器内的滚动事件，不断的对上面的数据进行重新赋值即可。</p>\n<p>以上思路仅适用于固定高度列表。</p>\n","site":{"data":{}},"excerpt":"<p>进行大量列表的渲染时，过多的DOM元素需要消耗大量的性能，这时使用虚拟列表是个不错的选择！</p>","more":"<h2 id=\"什么是虚拟列表\"   >\n          <a href=\"#什么是虚拟列表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是虚拟列表\" class=\"headerlink\" title=\"什么是虚拟列表\"></a>什么是虚拟列表</h2>\n      <p><strong>虚拟列表</strong>其实是按需显示的一种实现，即只对<strong>可见区域</strong>进行渲染，对<strong>非可见区域</strong>中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。</p>\n<p>假设有1万条记录需要同时渲染，我们屏幕的<strong>可见区域</strong>的高度为<strong>500px</strong>,而列表项的高度为<strong>50px</strong>，则此时我们在屏幕中最多只能看到10个列表项。</p>\n<p>假设滚动发生，滚动条距顶部的位置为<strong>150px</strong>,则我们可得知在<strong>可见区域</strong>内的列表项为<strong>第4项</strong>至<strong>第13项</strong>。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n\n        <h2 id=\"实现\"   >\n          <a href=\"#实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;infinite-list-container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;infinite-list-phantom&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;infinite-list&quot;&gt;</span><br><span class=\"line\">      &lt;!-- item-1 --&gt;</span><br><span class=\"line\">      &lt;!-- item-2 --&gt;</span><br><span class=\"line\">      &lt;!-- ...... --&gt;</span><br><span class=\"line\">      &lt;!-- item-n --&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n\n\n<ol>\n<li>设置占位容器，用于撑起滚动条。infinite-list-phantom 为容器内的占位。</li>\n<li>渲染屏幕内能够容纳的元素，根据索引对总数据进行截取。infinite-list 为列表项的渲染区域</li>\n</ol>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n<ol>\n<li>计算当前可视区域<strong>起始数据索引****startIndex</strong></li>\n<li>计算当前可视区域<strong>结束数据索引****endIndex</strong></li>\n<li>计算<strong>当前可视区域的数据</strong>，并渲染到页面中</li>\n<li>计算<strong>startIndex</strong>对应的数据在整个列表中的<strong>偏移位置startOffset</strong>并设置到列表上</li>\n</ol>\n<ul>\n<li>列表总高度listHeight &#x3D; listData.length * itemSize</li>\n<li>可显示的列表项数visibleCount &#x3D; Math.ceil(screenHeight &#x2F; itemSize)，数量为(500 &#x2F; 50) + 1，<strong>多一个偏移项</strong>。</li>\n<li>数据的起始索引startIndex &#x3D; Math.floor(scrollTop &#x2F; itemSize)</li>\n<li>数据的结束索引endIndex &#x3D; startIndex + visibleCount，最大为数据总长度。</li>\n<li>列表显示数据为visibleData &#x3D; listData.slice(startIndex,endIndex)</li>\n</ul>\n<p>当滚动后，由于渲染区域相对于可视区域已经发生了偏移，此时我需要获取一个偏移量startOffset，通过<strong>样式控制</strong>将渲染区域偏移至可视区域中。</p>\n<ul>\n<li>偏移量startOffset &#x3D; scrollTop - (scrollTop % itemSize);不超过一个，不用偏移，超过一个，偏移超过的floor值。</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n<p>监听容器内的滚动事件，不断的对上面的数据进行重新赋值即可。</p>\n<p>以上思路仅适用于固定高度列表。</p>"},{"title":"前端路由模式hash和history","date":"2022-06-17T16:00:00.000Z","_content":"\n最近工作时，遇到了页面关于页面跳转的问题，就继续了解了下两种路由模式的异同。\n<!-- more -->\n\n## 前端路由实现方式\n\n**SPA：**即**单页面应用**(Single Page Application)。单页应用程序 (SPA) 是加载单个 `HTML` 页面并在**用户与应用程序交互时**动态更新该页面的 `Web` 应用程序。浏览器一开始会加载必需的 `HTML` 、 `CSS` 和 `JavaScript` ，所有的操作都在这张页面上完成，都由 `JavaScript` 来控制。\n\n在单页面web网页中, 单纯的**浏览器地址改变, 网页不会重载**，如单纯的hash网址改变网页不会变化，因此我们的路由主要是`通过监听事件，并利用js实现动态改变网页内容`，有两种实现方式：\n\n`hash模式`：监听浏览器地址hash值变化，执行相应的js切换网页；\n\n`history模式`：利用history API实现url地址改变，网页内容改变； 它们的区别最明显的就是hash会在浏览器地址后面增加#号，而history可以自定义地址。\n\n\n\n## Hash模式\n\n### 定义\n\n`hash` 模式是一种把前端路由的路径用井号 `#` 拼接在真实 `url` 后面的模式。当井号 `#` 后面的路径发生变化时，浏览器并不会重新发起请求，而是会触发 `onhashchange` 事件。\n\n```\n//http://127.0.0.1:8001/01-hash.html?a=100&b=20#/aaa/bbb\n\nlocation.protocal // 'http:'\nlocaltion.hostname // '127.0.0.1'\nlocation.host // '127.0.0.1:8001'\nlocation.port //8001\nlocation.pathname //'01-hash.html'\nlocation.serach // '?a=100&b=20'\nlocation.hash // '#/aaa/bbb'\n```\n\n### 特点\n\n- hash指的是地址中#号以及后面的字符，也称为**散列值**。hash也称作**锚点**，本身是用来做页面跳转定位的。如`http://localhost/index.html#abc`，这里的#abc就是hash\n- `hash` 可以改变 `url` ，但是不会触发页面重新加载（hash的改变是记录在 `window.history` 中，**`hash` 永远不会提交到 `server` 端，所以改变hash，不会重新加载页面**）。也就是说，所有页面的跳转都是在客户端进行操作。因此，这并不算是一次 `http` 请求，所以这种模式不利于 `SEO` 优化。`hash` 只能修改 `#` 后面的部分，所以只能跳转到与当前 `url` 同文档的 `url` 。\n\n- `hash` 通过 `window.onhashchange` 的方式，来监听 `hash` 的改变，借此实现无刷新跳转的功能。当散列值改变时，可以通过 location.hash 来获取和设置hash值；\n\n## History模式\n\n### 定义\n\n`history API` 是 `H5` 提供的新特性，允许开发者**直接更改前端路由**，即更新浏览器 `URL` 地址而**不重新发起请求**。\n\n| API                                       | 定义                                                         |\n| ----------------------------------------- | ------------------------------------------------------------ |\n| history.pushState(data, title [, url])    | pushState主要用于**往历史记录堆栈顶部添加一条记录**。各参数解析如下：**①data**会在onpopstate事件触发时作为参数传递过去；**②title**为页面标题，当前所有浏览器都会忽略此参数；③**url**为页面地址，可选，缺少时表示为当前页地址 |\n| history.replaceState(data, title [, url]) | 更改当前的历史记录，参数同上； 上面的pushState是添加，这个更改 |\n| history.state                             | 用于存储以上方法的data数据，不同浏览器的读写权限不一样       |\n| window.onpopstate                         | 响应pushState或者replaceState的调用                          |\n| history.back()                            | 移动到上一个网址，等同于点击浏览器的后退键                   |\n| history.forward()                         | 移动到下一个网址，等同于点击浏览器的前进键                   |\n| history.go()                              | 接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址。如果参数超过实际存在的网址范围，该方法无效果；如果不指定参数，默认参数为0，相当于刷新当前页面。 |\n\n### 特点\n\n- 新的 `url` 可以是与当前 `url` 同源的任意 `url` ，也可以是与当前 `url` 一样的地址，但是这样会导致的一个问题是，会把**重复的这一次操作**记录到栈当中。\n\n- 通过 `history.state` ，添加任意类型的数据到记录中。\n\n- 可以额外设置 `title` 属性，以便后续使用。\n\n- 通过 `pushState` 、 `replaceState` 来实现无刷新跳转的功能。\n\n## 对比\n\n| hash                                                         | history                                                      |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 有 # 号                                                      | 没有 # 号，**更美观**                                        |\n| 能够**兼容到IE8**                                            | 只能兼容到IE10                                               |\n| 实际的url之前使用哈希字符，这部分url不会发送到服务器，**不需要在服务器层面上进行任何处理** | 每访问一个页面都需要服务器进行路由匹配生成 html 文件再发送响应给浏览器，消耗服务器大量资源 |\n| 刷新不会存在 404 问题                                        | **浏览器直接访问嵌套路由时，会报 404 问题。**                |\n| **不需要服务器任何配置**                                     | 需要在服务器配置一个回调路由                                 |\n|                                                              |                                                              |\n\n推荐使用hash模式，但hash模式也有不足\n\n1、hash 模式中的 # 也称作锚点，这里的的 # 和 css 中的 # 是一个意思，**所以在 hash 模式内，页面定位会失效。**\n\n2、hash改变不进行http请求，**不利于 SEO**（搜索引擎优化）。\n\n3、**白屏时间问题**。浏览器需要等待 JavaScript 文件加载完成之后渲染 HTML 文档内容，用户等待时间稍长。\n\n","source":"_posts/前端路由模式hash和history.md","raw":"---\ntitle: 前端路由模式hash和history\ndate: 2022-06-18\n---\n\n最近工作时，遇到了页面关于页面跳转的问题，就继续了解了下两种路由模式的异同。\n<!-- more -->\n\n## 前端路由实现方式\n\n**SPA：**即**单页面应用**(Single Page Application)。单页应用程序 (SPA) 是加载单个 `HTML` 页面并在**用户与应用程序交互时**动态更新该页面的 `Web` 应用程序。浏览器一开始会加载必需的 `HTML` 、 `CSS` 和 `JavaScript` ，所有的操作都在这张页面上完成，都由 `JavaScript` 来控制。\n\n在单页面web网页中, 单纯的**浏览器地址改变, 网页不会重载**，如单纯的hash网址改变网页不会变化，因此我们的路由主要是`通过监听事件，并利用js实现动态改变网页内容`，有两种实现方式：\n\n`hash模式`：监听浏览器地址hash值变化，执行相应的js切换网页；\n\n`history模式`：利用history API实现url地址改变，网页内容改变； 它们的区别最明显的就是hash会在浏览器地址后面增加#号，而history可以自定义地址。\n\n\n\n## Hash模式\n\n### 定义\n\n`hash` 模式是一种把前端路由的路径用井号 `#` 拼接在真实 `url` 后面的模式。当井号 `#` 后面的路径发生变化时，浏览器并不会重新发起请求，而是会触发 `onhashchange` 事件。\n\n```\n//http://127.0.0.1:8001/01-hash.html?a=100&b=20#/aaa/bbb\n\nlocation.protocal // 'http:'\nlocaltion.hostname // '127.0.0.1'\nlocation.host // '127.0.0.1:8001'\nlocation.port //8001\nlocation.pathname //'01-hash.html'\nlocation.serach // '?a=100&b=20'\nlocation.hash // '#/aaa/bbb'\n```\n\n### 特点\n\n- hash指的是地址中#号以及后面的字符，也称为**散列值**。hash也称作**锚点**，本身是用来做页面跳转定位的。如`http://localhost/index.html#abc`，这里的#abc就是hash\n- `hash` 可以改变 `url` ，但是不会触发页面重新加载（hash的改变是记录在 `window.history` 中，**`hash` 永远不会提交到 `server` 端，所以改变hash，不会重新加载页面**）。也就是说，所有页面的跳转都是在客户端进行操作。因此，这并不算是一次 `http` 请求，所以这种模式不利于 `SEO` 优化。`hash` 只能修改 `#` 后面的部分，所以只能跳转到与当前 `url` 同文档的 `url` 。\n\n- `hash` 通过 `window.onhashchange` 的方式，来监听 `hash` 的改变，借此实现无刷新跳转的功能。当散列值改变时，可以通过 location.hash 来获取和设置hash值；\n\n## History模式\n\n### 定义\n\n`history API` 是 `H5` 提供的新特性，允许开发者**直接更改前端路由**，即更新浏览器 `URL` 地址而**不重新发起请求**。\n\n| API                                       | 定义                                                         |\n| ----------------------------------------- | ------------------------------------------------------------ |\n| history.pushState(data, title [, url])    | pushState主要用于**往历史记录堆栈顶部添加一条记录**。各参数解析如下：**①data**会在onpopstate事件触发时作为参数传递过去；**②title**为页面标题，当前所有浏览器都会忽略此参数；③**url**为页面地址，可选，缺少时表示为当前页地址 |\n| history.replaceState(data, title [, url]) | 更改当前的历史记录，参数同上； 上面的pushState是添加，这个更改 |\n| history.state                             | 用于存储以上方法的data数据，不同浏览器的读写权限不一样       |\n| window.onpopstate                         | 响应pushState或者replaceState的调用                          |\n| history.back()                            | 移动到上一个网址，等同于点击浏览器的后退键                   |\n| history.forward()                         | 移动到下一个网址，等同于点击浏览器的前进键                   |\n| history.go()                              | 接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址。如果参数超过实际存在的网址范围，该方法无效果；如果不指定参数，默认参数为0，相当于刷新当前页面。 |\n\n### 特点\n\n- 新的 `url` 可以是与当前 `url` 同源的任意 `url` ，也可以是与当前 `url` 一样的地址，但是这样会导致的一个问题是，会把**重复的这一次操作**记录到栈当中。\n\n- 通过 `history.state` ，添加任意类型的数据到记录中。\n\n- 可以额外设置 `title` 属性，以便后续使用。\n\n- 通过 `pushState` 、 `replaceState` 来实现无刷新跳转的功能。\n\n## 对比\n\n| hash                                                         | history                                                      |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 有 # 号                                                      | 没有 # 号，**更美观**                                        |\n| 能够**兼容到IE8**                                            | 只能兼容到IE10                                               |\n| 实际的url之前使用哈希字符，这部分url不会发送到服务器，**不需要在服务器层面上进行任何处理** | 每访问一个页面都需要服务器进行路由匹配生成 html 文件再发送响应给浏览器，消耗服务器大量资源 |\n| 刷新不会存在 404 问题                                        | **浏览器直接访问嵌套路由时，会报 404 问题。**                |\n| **不需要服务器任何配置**                                     | 需要在服务器配置一个回调路由                                 |\n|                                                              |                                                              |\n\n推荐使用hash模式，但hash模式也有不足\n\n1、hash 模式中的 # 也称作锚点，这里的的 # 和 css 中的 # 是一个意思，**所以在 hash 模式内，页面定位会失效。**\n\n2、hash改变不进行http请求，**不利于 SEO**（搜索引擎优化）。\n\n3、**白屏时间问题**。浏览器需要等待 JavaScript 文件加载完成之后渲染 HTML 文档内容，用户等待时间稍长。\n\n","slug":"前端路由模式hash和history","published":1,"updated":"2022-09-02T16:59:20.713Z","_id":"cl4jizvdp0000rgtt3dwx5hz0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近工作时，遇到了页面关于页面跳转的问题，就继续了解了下两种路由模式的异同。</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"前端路由实现方式\"   >\n          <a href=\"#前端路由实现方式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#前端路由实现方式\" class=\"headerlink\" title=\"前端路由实现方式\"></a>前端路由实现方式</h2>\n      <p><strong>SPA：</strong>即<strong>单页面应用</strong>(Single Page Application)。单页应用程序 (SPA) 是加载单个 <code>HTML</code> 页面并在<strong>用户与应用程序交互时</strong>动态更新该页面的 <code>Web</code> 应用程序。浏览器一开始会加载必需的 <code>HTML</code> 、 <code>CSS</code> 和 <code>JavaScript</code> ，所有的操作都在这张页面上完成，都由 <code>JavaScript</code> 来控制。</p>\n<p>在单页面web网页中, 单纯的<strong>浏览器地址改变, 网页不会重载</strong>，如单纯的hash网址改变网页不会变化，因此我们的路由主要是<code>通过监听事件，并利用js实现动态改变网页内容</code>，有两种实现方式：</p>\n<p><code>hash模式</code>：监听浏览器地址hash值变化，执行相应的js切换网页；</p>\n<p><code>history模式</code>：利用history API实现url地址改变，网页内容改变； 它们的区别最明显的就是hash会在浏览器地址后面增加#号，而history可以自定义地址。</p>\n\n        <h2 id=\"Hash模式\"   >\n          <a href=\"#Hash模式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Hash模式\" class=\"headerlink\" title=\"Hash模式\"></a>Hash模式</h2>\n      \n        <h3 id=\"定义\"   >\n          <a href=\"#定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\n      <p><code>hash</code> 模式是一种把前端路由的路径用井号 <code>#</code> 拼接在真实 <code>url</code> 后面的模式。当井号 <code>#</code> 后面的路径发生变化时，浏览器并不会重新发起请求，而是会触发 <code>onhashchange</code> 事件。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//http://127.0.0.1:8001/01-hash.html?a=100&amp;b=20#/aaa/bbb</span><br><span class=\"line\"></span><br><span class=\"line\">location.protocal // &#x27;http:&#x27;</span><br><span class=\"line\">localtion.hostname // &#x27;127.0.0.1&#x27;</span><br><span class=\"line\">location.host // &#x27;127.0.0.1:8001&#x27;</span><br><span class=\"line\">location.port //8001</span><br><span class=\"line\">location.pathname //&#x27;01-hash.html&#x27;</span><br><span class=\"line\">location.serach // &#x27;?a=100&amp;b=20&#x27;</span><br><span class=\"line\">location.hash // &#x27;#/aaa/bbb&#x27;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"特点\"   >\n          <a href=\"#特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <ul>\n<li><p>hash指的是地址中#号以及后面的字符，也称为<strong>散列值</strong>。hash也称作<strong>锚点</strong>，本身是用来做页面跳转定位的。如<code>http://localhost/index.html#abc</code>，这里的#abc就是hash</p>\n</li>\n<li><p><code>hash</code> 可以改变 <code>url</code> ，但是不会触发页面重新加载（hash的改变是记录在 <code>window.history</code> 中，**<code>hash</code> 永远不会提交到 <code>server</code> 端，所以改变hash，不会重新加载页面**）。也就是说，所有页面的跳转都是在客户端进行操作。因此，这并不算是一次 <code>http</code> 请求，所以这种模式不利于 <code>SEO</code> 优化。<code>hash</code> 只能修改 <code>#</code> 后面的部分，所以只能跳转到与当前 <code>url</code> 同文档的 <code>url</code> 。</p>\n</li>\n<li><p><code>hash</code> 通过 <code>window.onhashchange</code> 的方式，来监听 <code>hash</code> 的改变，借此实现无刷新跳转的功能。当散列值改变时，可以通过 location.hash 来获取和设置hash值；</p>\n</li>\n</ul>\n\n        <h2 id=\"History模式\"   >\n          <a href=\"#History模式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#History模式\" class=\"headerlink\" title=\"History模式\"></a>History模式</h2>\n      \n        <h3 id=\"定义-1\"   >\n          <a href=\"#定义-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\n      <p><code>history API</code> 是 <code>H5</code> 提供的新特性，允许开发者<strong>直接更改前端路由</strong>，即更新浏览器 <code>URL</code> 地址而<strong>不重新发起请求</strong>。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>API</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>history.pushState(data, title [, url])</td>\n<td>pushState主要用于<strong>往历史记录堆栈顶部添加一条记录</strong>。各参数解析如下：<strong>①data</strong>会在onpopstate事件触发时作为参数传递过去；<strong>②title</strong>为页面标题，当前所有浏览器都会忽略此参数；③<strong>url</strong>为页面地址，可选，缺少时表示为当前页地址</td>\n</tr>\n<tr>\n<td>history.replaceState(data, title [, url])</td>\n<td>更改当前的历史记录，参数同上； 上面的pushState是添加，这个更改</td>\n</tr>\n<tr>\n<td>history.state</td>\n<td>用于存储以上方法的data数据，不同浏览器的读写权限不一样</td>\n</tr>\n<tr>\n<td>window.onpopstate</td>\n<td>响应pushState或者replaceState的调用</td>\n</tr>\n<tr>\n<td>history.back()</td>\n<td>移动到上一个网址，等同于点击浏览器的后退键</td>\n</tr>\n<tr>\n<td>history.forward()</td>\n<td>移动到下一个网址，等同于点击浏览器的前进键</td>\n</tr>\n<tr>\n<td>history.go()</td>\n<td>接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址。如果参数超过实际存在的网址范围，该方法无效果；如果不指定参数，默认参数为0，相当于刷新当前页面。</td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"特点-1\"   >\n          <a href=\"#特点-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <ul>\n<li><p>新的 <code>url</code> 可以是与当前 <code>url</code> 同源的任意 <code>url</code> ，也可以是与当前 <code>url</code> 一样的地址，但是这样会导致的一个问题是，会把<strong>重复的这一次操作</strong>记录到栈当中。</p>\n</li>\n<li><p>通过 <code>history.state</code> ，添加任意类型的数据到记录中。</p>\n</li>\n<li><p>可以额外设置 <code>title</code> 属性，以便后续使用。</p>\n</li>\n<li><p>通过 <code>pushState</code> 、 <code>replaceState</code> 来实现无刷新跳转的功能。</p>\n</li>\n</ul>\n\n        <h2 id=\"对比\"   >\n          <a href=\"#对比\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2>\n      <div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>hash</th>\n<th>history</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>有 # 号</td>\n<td>没有 # 号，<strong>更美观</strong></td>\n</tr>\n<tr>\n<td>能够<strong>兼容到IE8</strong></td>\n<td>只能兼容到IE10</td>\n</tr>\n<tr>\n<td>实际的url之前使用哈希字符，这部分url不会发送到服务器，<strong>不需要在服务器层面上进行任何处理</strong></td>\n<td>每访问一个页面都需要服务器进行路由匹配生成 html 文件再发送响应给浏览器，消耗服务器大量资源</td>\n</tr>\n<tr>\n<td>刷新不会存在 404 问题</td>\n<td><strong>浏览器直接访问嵌套路由时，会报 404 问题。</strong></td>\n</tr>\n<tr>\n<td><strong>不需要服务器任何配置</strong></td>\n<td>需要在服务器配置一个回调路由</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n<p>推荐使用hash模式，但hash模式也有不足</p>\n<p>1、hash 模式中的 # 也称作锚点，这里的的 # 和 css 中的 # 是一个意思，<strong>所以在 hash 模式内，页面定位会失效。</strong></p>\n<p>2、hash改变不进行http请求，<strong>不利于 SEO</strong>（搜索引擎优化）。</p>\n<p>3、<strong>白屏时间问题</strong>。浏览器需要等待 JavaScript 文件加载完成之后渲染 HTML 文档内容，用户等待时间稍长。</p>\n","site":{"data":{}},"excerpt":"<p>最近工作时，遇到了页面关于页面跳转的问题，就继续了解了下两种路由模式的异同。</p>","more":"<h2 id=\"前端路由实现方式\"   >\n          <a href=\"#前端路由实现方式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#前端路由实现方式\" class=\"headerlink\" title=\"前端路由实现方式\"></a>前端路由实现方式</h2>\n      <p><strong>SPA：</strong>即<strong>单页面应用</strong>(Single Page Application)。单页应用程序 (SPA) 是加载单个 <code>HTML</code> 页面并在<strong>用户与应用程序交互时</strong>动态更新该页面的 <code>Web</code> 应用程序。浏览器一开始会加载必需的 <code>HTML</code> 、 <code>CSS</code> 和 <code>JavaScript</code> ，所有的操作都在这张页面上完成，都由 <code>JavaScript</code> 来控制。</p>\n<p>在单页面web网页中, 单纯的<strong>浏览器地址改变, 网页不会重载</strong>，如单纯的hash网址改变网页不会变化，因此我们的路由主要是<code>通过监听事件，并利用js实现动态改变网页内容</code>，有两种实现方式：</p>\n<p><code>hash模式</code>：监听浏览器地址hash值变化，执行相应的js切换网页；</p>\n<p><code>history模式</code>：利用history API实现url地址改变，网页内容改变； 它们的区别最明显的就是hash会在浏览器地址后面增加#号，而history可以自定义地址。</p>\n\n        <h2 id=\"Hash模式\"   >\n          <a href=\"#Hash模式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Hash模式\" class=\"headerlink\" title=\"Hash模式\"></a>Hash模式</h2>\n      \n        <h3 id=\"定义\"   >\n          <a href=\"#定义\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\n      <p><code>hash</code> 模式是一种把前端路由的路径用井号 <code>#</code> 拼接在真实 <code>url</code> 后面的模式。当井号 <code>#</code> 后面的路径发生变化时，浏览器并不会重新发起请求，而是会触发 <code>onhashchange</code> 事件。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//http://127.0.0.1:8001/01-hash.html?a=100&amp;b=20#/aaa/bbb</span><br><span class=\"line\"></span><br><span class=\"line\">location.protocal // &#x27;http:&#x27;</span><br><span class=\"line\">localtion.hostname // &#x27;127.0.0.1&#x27;</span><br><span class=\"line\">location.host // &#x27;127.0.0.1:8001&#x27;</span><br><span class=\"line\">location.port //8001</span><br><span class=\"line\">location.pathname //&#x27;01-hash.html&#x27;</span><br><span class=\"line\">location.serach // &#x27;?a=100&amp;b=20&#x27;</span><br><span class=\"line\">location.hash // &#x27;#/aaa/bbb&#x27;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"特点\"   >\n          <a href=\"#特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <ul>\n<li><p>hash指的是地址中#号以及后面的字符，也称为<strong>散列值</strong>。hash也称作<strong>锚点</strong>，本身是用来做页面跳转定位的。如<code>http://localhost/index.html#abc</code>，这里的#abc就是hash</p>\n</li>\n<li><p><code>hash</code> 可以改变 <code>url</code> ，但是不会触发页面重新加载（hash的改变是记录在 <code>window.history</code> 中，**<code>hash</code> 永远不会提交到 <code>server</code> 端，所以改变hash，不会重新加载页面**）。也就是说，所有页面的跳转都是在客户端进行操作。因此，这并不算是一次 <code>http</code> 请求，所以这种模式不利于 <code>SEO</code> 优化。<code>hash</code> 只能修改 <code>#</code> 后面的部分，所以只能跳转到与当前 <code>url</code> 同文档的 <code>url</code> 。</p>\n</li>\n<li><p><code>hash</code> 通过 <code>window.onhashchange</code> 的方式，来监听 <code>hash</code> 的改变，借此实现无刷新跳转的功能。当散列值改变时，可以通过 location.hash 来获取和设置hash值；</p>\n</li>\n</ul>\n\n        <h2 id=\"History模式\"   >\n          <a href=\"#History模式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#History模式\" class=\"headerlink\" title=\"History模式\"></a>History模式</h2>\n      \n        <h3 id=\"定义-1\"   >\n          <a href=\"#定义-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3>\n      <p><code>history API</code> 是 <code>H5</code> 提供的新特性，允许开发者<strong>直接更改前端路由</strong>，即更新浏览器 <code>URL</code> 地址而<strong>不重新发起请求</strong>。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>API</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>history.pushState(data, title [, url])</td>\n<td>pushState主要用于<strong>往历史记录堆栈顶部添加一条记录</strong>。各参数解析如下：<strong>①data</strong>会在onpopstate事件触发时作为参数传递过去；<strong>②title</strong>为页面标题，当前所有浏览器都会忽略此参数；③<strong>url</strong>为页面地址，可选，缺少时表示为当前页地址</td>\n</tr>\n<tr>\n<td>history.replaceState(data, title [, url])</td>\n<td>更改当前的历史记录，参数同上； 上面的pushState是添加，这个更改</td>\n</tr>\n<tr>\n<td>history.state</td>\n<td>用于存储以上方法的data数据，不同浏览器的读写权限不一样</td>\n</tr>\n<tr>\n<td>window.onpopstate</td>\n<td>响应pushState或者replaceState的调用</td>\n</tr>\n<tr>\n<td>history.back()</td>\n<td>移动到上一个网址，等同于点击浏览器的后退键</td>\n</tr>\n<tr>\n<td>history.forward()</td>\n<td>移动到下一个网址，等同于点击浏览器的前进键</td>\n</tr>\n<tr>\n<td>history.go()</td>\n<td>接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址。如果参数超过实际存在的网址范围，该方法无效果；如果不指定参数，默认参数为0，相当于刷新当前页面。</td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"特点-1\"   >\n          <a href=\"#特点-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <ul>\n<li><p>新的 <code>url</code> 可以是与当前 <code>url</code> 同源的任意 <code>url</code> ，也可以是与当前 <code>url</code> 一样的地址，但是这样会导致的一个问题是，会把<strong>重复的这一次操作</strong>记录到栈当中。</p>\n</li>\n<li><p>通过 <code>history.state</code> ，添加任意类型的数据到记录中。</p>\n</li>\n<li><p>可以额外设置 <code>title</code> 属性，以便后续使用。</p>\n</li>\n<li><p>通过 <code>pushState</code> 、 <code>replaceState</code> 来实现无刷新跳转的功能。</p>\n</li>\n</ul>\n\n        <h2 id=\"对比\"   >\n          <a href=\"#对比\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2>\n      <div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>hash</th>\n<th>history</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>有 # 号</td>\n<td>没有 # 号，<strong>更美观</strong></td>\n</tr>\n<tr>\n<td>能够<strong>兼容到IE8</strong></td>\n<td>只能兼容到IE10</td>\n</tr>\n<tr>\n<td>实际的url之前使用哈希字符，这部分url不会发送到服务器，<strong>不需要在服务器层面上进行任何处理</strong></td>\n<td>每访问一个页面都需要服务器进行路由匹配生成 html 文件再发送响应给浏览器，消耗服务器大量资源</td>\n</tr>\n<tr>\n<td>刷新不会存在 404 问题</td>\n<td><strong>浏览器直接访问嵌套路由时，会报 404 问题。</strong></td>\n</tr>\n<tr>\n<td><strong>不需要服务器任何配置</strong></td>\n<td>需要在服务器配置一个回调路由</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n<p>推荐使用hash模式，但hash模式也有不足</p>\n<p>1、hash 模式中的 # 也称作锚点，这里的的 # 和 css 中的 # 是一个意思，<strong>所以在 hash 模式内，页面定位会失效。</strong></p>\n<p>2、hash改变不进行http请求，<strong>不利于 SEO</strong>（搜索引擎优化）。</p>\n<p>3、<strong>白屏时间问题</strong>。浏览器需要等待 JavaScript 文件加载完成之后渲染 HTML 文档内容，用户等待时间稍长。</p>"},{"title":"按需引入组件库的几种方式","date":"2022-08-06T16:00:00.000Z","_content":"\n之前升级项目的ui版本时，ui组件的版本错误。无论修改npm版本还是cdn版本均无法解决。\n经过同事 **@东哥** 的排查，发现是样式被覆盖，去除项目中的某sdk组件可恢复正常。\n细究原因，项目和sdk中引入了相同ui组件，sdk是使用webpack打包的文件，打包成一个总文件，项目中ui组件版本被覆盖，导致项目样式错误。\n因此，决定了解关于项目实现按需引入的方式。\n<!-- more -->\n\n## 手动引入\n\n在没有其他辅助手段的情况下，实现按需引入，仅引入需要使用的组件即可。\n\n```\n// test/index.js\nimport Button from 'test-project/lib/components/Button'\nimport 'test-project/style/button.css'\n```\n\n### 结论\n\n手动引入的方式， 需要深入了解组件库代码，了解各组件位置等信息，不方便。\n\n因此，现在大部分组件库已经放弃了这种方式。\n\n## Babel-plugin-import插件\n\n让程序帮我们把引入组件的语句**转化成手动引入**的语句\n\n```\n// test/index.js\nimport {Button} from 'test-project'\n```\n\n配置.babelrc文件\n\n```\n// test/.babelrc\n{\n    \"presets\": [\n      \"@babel/preset-env\"\n    ],\n    // 注意：借助babel-plugin-import引入\n    \"plugins\": [[\"import\",{\n      \t// 组件库名称\n        \"libraryName\": \"test-project\",\n      \t// 组件位置\n        \"libraryDirectory\": \"lib/components\",\n        // \"styleLibraryDirectory\": \"lib/theme\", 配置的话会在project/lib/theme/button中引入样式\n      \t// 组件样式位置\n        \"style\": \"style/index.css\"\n        // style：true的时候加载未编译为css的less，也就可以改变主题\n\t\t// style：“css”就是加载编译好的css，无法更改主题\n    }]]\n}\n```\n\n### 结论\n\nBabel-plugin-import借助Babel解析编辑ATS的能力实现了一种成熟的组件按需引入方式。\n\n**优点：**只需要按照babel文档进行配置即可\n\n**缺点：**代码中需增加本无需的Babel及相关的配置\n\n## Tree-Shaking \n\n`Tree Shaking`中文含义是摇树，在webpack中作用是消除不可能执行的代码。\n\n而`webpack5`已经自带了这个功能了，当打包环境为`production`时，默认开启`tree-shaking`功能。\n\n\n\nTree-shaking是依赖ESM这种模块引入方式的：\n\n> ES6模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析，从而构成了tree-shaking的基础。\n>\n> 所谓静态分析就是不执行代码，从字面量上对代码进行分析，可以想一下在commonjs的模块化中我们可以动态require一个模块，只有执行后才知道引用的什么模块，这个就不能通过静态分析去做优化。总之就是一句话——代码是否有用只有在编译时分析，才不会影响运行时的状态。\n\n在webpack中使用tree-shaking，**webpack官方文档**的总结如下：\n\n我们学到为了利用 tree shaking 的优势， 你必须…\n\n**1、使用 ES2015 模块语法（即 import 和 export）。**\n**2、确保没有编译器将您的 ES2015 模块语法转换为 CommonJS 的（顺带一提，这是现在常用的 @babel/preset-env 的默认行为，详细信息请参阅文档）。**\n**3、在项目的 package.json 文件中，添加 \"sideEffects\" 属性。**\n**4、使用 mode 为 \"production\" 的配置项以启用更多优化项，包括压缩代码与 tree shaking。**\n\nwebpack5中，mode为`production`时，已自动开启DCE工具（消除无用代码）UglifyJSPlugin和tree-shaking\n\n## 组件库打包：支持按需加载\n\n根据以上我们得知，组件库支持按需加载需满足：\n\n1. 组件库以es6模块化方式导出（注意babel）\n2. package.json中添加sideEffects属性\n3. 宿主项目中引用方式写法到位或者配置了babel-plugin-import\n4. 宿主项目通过webpack打包支持tree-shaking\n\n\n\n实现按需加载存在的问题\n\n**webpack不支持ESM导出**\n\nwebpack umd 形式导出，打包出来的东西才能供别人使用\n\n```\n// webapack.config\noutput: {\n  library: 'xmh',\n  libraryTarget: 'umd'\n}\n```\n\n但是是整体定义成一个模块，不能支持按需加载\n\n解决方式：\n\n1. 使用支持ESM模块导出的Gulp进行打包。\n2. **放弃或限制**Babel的使用，毕竟能导入ESM代码的项目应该是支持ES6语法的。\n3. 不支持ES6模块引入的项目，我们继续采用上述的webpack打包方式。","source":"_posts/按需引入组件库的几种方式.md","raw":"---\ntitle: 按需引入组件库的几种方式\ndate: 2022-08-07\n---\n\n之前升级项目的ui版本时，ui组件的版本错误。无论修改npm版本还是cdn版本均无法解决。\n经过同事 **@东哥** 的排查，发现是样式被覆盖，去除项目中的某sdk组件可恢复正常。\n细究原因，项目和sdk中引入了相同ui组件，sdk是使用webpack打包的文件，打包成一个总文件，项目中ui组件版本被覆盖，导致项目样式错误。\n因此，决定了解关于项目实现按需引入的方式。\n<!-- more -->\n\n## 手动引入\n\n在没有其他辅助手段的情况下，实现按需引入，仅引入需要使用的组件即可。\n\n```\n// test/index.js\nimport Button from 'test-project/lib/components/Button'\nimport 'test-project/style/button.css'\n```\n\n### 结论\n\n手动引入的方式， 需要深入了解组件库代码，了解各组件位置等信息，不方便。\n\n因此，现在大部分组件库已经放弃了这种方式。\n\n## Babel-plugin-import插件\n\n让程序帮我们把引入组件的语句**转化成手动引入**的语句\n\n```\n// test/index.js\nimport {Button} from 'test-project'\n```\n\n配置.babelrc文件\n\n```\n// test/.babelrc\n{\n    \"presets\": [\n      \"@babel/preset-env\"\n    ],\n    // 注意：借助babel-plugin-import引入\n    \"plugins\": [[\"import\",{\n      \t// 组件库名称\n        \"libraryName\": \"test-project\",\n      \t// 组件位置\n        \"libraryDirectory\": \"lib/components\",\n        // \"styleLibraryDirectory\": \"lib/theme\", 配置的话会在project/lib/theme/button中引入样式\n      \t// 组件样式位置\n        \"style\": \"style/index.css\"\n        // style：true的时候加载未编译为css的less，也就可以改变主题\n\t\t// style：“css”就是加载编译好的css，无法更改主题\n    }]]\n}\n```\n\n### 结论\n\nBabel-plugin-import借助Babel解析编辑ATS的能力实现了一种成熟的组件按需引入方式。\n\n**优点：**只需要按照babel文档进行配置即可\n\n**缺点：**代码中需增加本无需的Babel及相关的配置\n\n## Tree-Shaking \n\n`Tree Shaking`中文含义是摇树，在webpack中作用是消除不可能执行的代码。\n\n而`webpack5`已经自带了这个功能了，当打包环境为`production`时，默认开启`tree-shaking`功能。\n\n\n\nTree-shaking是依赖ESM这种模块引入方式的：\n\n> ES6模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析，从而构成了tree-shaking的基础。\n>\n> 所谓静态分析就是不执行代码，从字面量上对代码进行分析，可以想一下在commonjs的模块化中我们可以动态require一个模块，只有执行后才知道引用的什么模块，这个就不能通过静态分析去做优化。总之就是一句话——代码是否有用只有在编译时分析，才不会影响运行时的状态。\n\n在webpack中使用tree-shaking，**webpack官方文档**的总结如下：\n\n我们学到为了利用 tree shaking 的优势， 你必须…\n\n**1、使用 ES2015 模块语法（即 import 和 export）。**\n**2、确保没有编译器将您的 ES2015 模块语法转换为 CommonJS 的（顺带一提，这是现在常用的 @babel/preset-env 的默认行为，详细信息请参阅文档）。**\n**3、在项目的 package.json 文件中，添加 \"sideEffects\" 属性。**\n**4、使用 mode 为 \"production\" 的配置项以启用更多优化项，包括压缩代码与 tree shaking。**\n\nwebpack5中，mode为`production`时，已自动开启DCE工具（消除无用代码）UglifyJSPlugin和tree-shaking\n\n## 组件库打包：支持按需加载\n\n根据以上我们得知，组件库支持按需加载需满足：\n\n1. 组件库以es6模块化方式导出（注意babel）\n2. package.json中添加sideEffects属性\n3. 宿主项目中引用方式写法到位或者配置了babel-plugin-import\n4. 宿主项目通过webpack打包支持tree-shaking\n\n\n\n实现按需加载存在的问题\n\n**webpack不支持ESM导出**\n\nwebpack umd 形式导出，打包出来的东西才能供别人使用\n\n```\n// webapack.config\noutput: {\n  library: 'xmh',\n  libraryTarget: 'umd'\n}\n```\n\n但是是整体定义成一个模块，不能支持按需加载\n\n解决方式：\n\n1. 使用支持ESM模块导出的Gulp进行打包。\n2. **放弃或限制**Babel的使用，毕竟能导入ESM代码的项目应该是支持ES6语法的。\n3. 不支持ES6模块引入的项目，我们继续采用上述的webpack打包方式。","slug":"按需引入组件库的几种方式","published":1,"updated":"2022-09-02T16:58:21.339Z","_id":"cl6jdtfam000010tt51u089sw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前升级项目的ui版本时，ui组件的版本错误。无论修改npm版本还是cdn版本均无法解决。<br>经过同事 <strong>@东哥</strong> 的排查，发现是样式被覆盖，去除项目中的某sdk组件可恢复正常。<br>细究原因，项目和sdk中引入了相同ui组件，sdk是使用webpack打包的文件，打包成一个总文件，项目中ui组件版本被覆盖，导致项目样式错误。<br>因此，决定了解关于项目实现按需引入的方式。</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"手动引入\"   >\n          <a href=\"#手动引入\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#手动引入\" class=\"headerlink\" title=\"手动引入\"></a>手动引入</h2>\n      <p>在没有其他辅助手段的情况下，实现按需引入，仅引入需要使用的组件即可。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test/index.js</span><br><span class=\"line\">import Button from &#x27;test-project/lib/components/Button&#x27;</span><br><span class=\"line\">import &#x27;test-project/style/button.css&#x27;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"结论\"   >\n          <a href=\"#结论\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3>\n      <p>手动引入的方式， 需要深入了解组件库代码，了解各组件位置等信息，不方便。</p>\n<p>因此，现在大部分组件库已经放弃了这种方式。</p>\n\n        <h2 id=\"Babel-plugin-import插件\"   >\n          <a href=\"#Babel-plugin-import插件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Babel-plugin-import插件\" class=\"headerlink\" title=\"Babel-plugin-import插件\"></a>Babel-plugin-import插件</h2>\n      <p>让程序帮我们把引入组件的语句<strong>转化成手动引入</strong>的语句</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test/index.js</span><br><span class=\"line\">import &#123;Button&#125; from &#x27;test-project&#x27;</span><br></pre></td></tr></table></div></figure>\n\n<p>配置.babelrc文件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test/.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;: [</span><br><span class=\"line\">      &quot;@babel/preset-env&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    // 注意：借助babel-plugin-import引入</span><br><span class=\"line\">    &quot;plugins&quot;: [[&quot;import&quot;,&#123;</span><br><span class=\"line\">      \t// 组件库名称</span><br><span class=\"line\">        &quot;libraryName&quot;: &quot;test-project&quot;,</span><br><span class=\"line\">      \t// 组件位置</span><br><span class=\"line\">        &quot;libraryDirectory&quot;: &quot;lib/components&quot;,</span><br><span class=\"line\">        // &quot;styleLibraryDirectory&quot;: &quot;lib/theme&quot;, 配置的话会在project/lib/theme/button中引入样式</span><br><span class=\"line\">      \t// 组件样式位置</span><br><span class=\"line\">        &quot;style&quot;: &quot;style/index.css&quot;</span><br><span class=\"line\">        // style：true的时候加载未编译为css的less，也就可以改变主题</span><br><span class=\"line\">\t\t// style：“css”就是加载编译好的css，无法更改主题</span><br><span class=\"line\">    &#125;]]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"结论-1\"   >\n          <a href=\"#结论-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#结论-1\" class=\"headerlink\" title=\"结论\"></a>结论</h3>\n      <p>Babel-plugin-import借助Babel解析编辑ATS的能力实现了一种成熟的组件按需引入方式。</p>\n<p><strong>优点：</strong>只需要按照babel文档进行配置即可</p>\n<p><strong>缺点：</strong>代码中需增加本无需的Babel及相关的配置</p>\n\n        <h2 id=\"Tree-Shaking\"   >\n          <a href=\"#Tree-Shaking\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Tree-Shaking\" class=\"headerlink\" title=\"Tree-Shaking\"></a>Tree-Shaking</h2>\n      <p><code>Tree Shaking</code>中文含义是摇树，在webpack中作用是消除不可能执行的代码。</p>\n<p>而<code>webpack5</code>已经自带了这个功能了，当打包环境为<code>production</code>时，默认开启<code>tree-shaking</code>功能。</p>\n<p>Tree-shaking是依赖ESM这种模块引入方式的：</p>\n<blockquote>\n<p>ES6模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析，从而构成了tree-shaking的基础。</p>\n<p>所谓静态分析就是不执行代码，从字面量上对代码进行分析，可以想一下在commonjs的模块化中我们可以动态require一个模块，只有执行后才知道引用的什么模块，这个就不能通过静态分析去做优化。总之就是一句话——代码是否有用只有在编译时分析，才不会影响运行时的状态。</p>\n</blockquote>\n<p>在webpack中使用tree-shaking，<strong>webpack官方文档</strong>的总结如下：</p>\n<p>我们学到为了利用 tree shaking 的优势， 你必须…</p>\n<p><strong>1、使用 ES2015 模块语法（即 import 和 export）。</strong><br><strong>2、确保没有编译器将您的 ES2015 模块语法转换为 CommonJS 的（顺带一提，这是现在常用的 @babel&#x2F;preset-env 的默认行为，详细信息请参阅文档）。</strong><br><strong>3、在项目的 package.json 文件中，添加 “sideEffects” 属性。</strong><br><strong>4、使用 mode 为 “production” 的配置项以启用更多优化项，包括压缩代码与 tree shaking。</strong></p>\n<p>webpack5中，mode为<code>production</code>时，已自动开启DCE工具（消除无用代码）UglifyJSPlugin和tree-shaking</p>\n\n        <h2 id=\"组件库打包：支持按需加载\"   >\n          <a href=\"#组件库打包：支持按需加载\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#组件库打包：支持按需加载\" class=\"headerlink\" title=\"组件库打包：支持按需加载\"></a>组件库打包：支持按需加载</h2>\n      <p>根据以上我们得知，组件库支持按需加载需满足：</p>\n<ol>\n<li>组件库以es6模块化方式导出（注意babel）</li>\n<li>package.json中添加sideEffects属性</li>\n<li>宿主项目中引用方式写法到位或者配置了babel-plugin-import</li>\n<li>宿主项目通过webpack打包支持tree-shaking</li>\n</ol>\n<p>实现按需加载存在的问题</p>\n<p><strong>webpack不支持ESM导出</strong></p>\n<p>webpack umd 形式导出，打包出来的东西才能供别人使用</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webapack.config</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">  library: &#x27;xmh&#x27;,</span><br><span class=\"line\">  libraryTarget: &#x27;umd&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>但是是整体定义成一个模块，不能支持按需加载</p>\n<p>解决方式：</p>\n<ol>\n<li>使用支持ESM模块导出的Gulp进行打包。</li>\n<li><strong>放弃或限制</strong>Babel的使用，毕竟能导入ESM代码的项目应该是支持ES6语法的。</li>\n<li>不支持ES6模块引入的项目，我们继续采用上述的webpack打包方式。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>之前升级项目的ui版本时，ui组件的版本错误。无论修改npm版本还是cdn版本均无法解决。<br>经过同事 <strong>@东哥</strong> 的排查，发现是样式被覆盖，去除项目中的某sdk组件可恢复正常。<br>细究原因，项目和sdk中引入了相同ui组件，sdk是使用webpack打包的文件，打包成一个总文件，项目中ui组件版本被覆盖，导致项目样式错误。<br>因此，决定了解关于项目实现按需引入的方式。</p>","more":"<h2 id=\"手动引入\"   >\n          <a href=\"#手动引入\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#手动引入\" class=\"headerlink\" title=\"手动引入\"></a>手动引入</h2>\n      <p>在没有其他辅助手段的情况下，实现按需引入，仅引入需要使用的组件即可。</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test/index.js</span><br><span class=\"line\">import Button from &#x27;test-project/lib/components/Button&#x27;</span><br><span class=\"line\">import &#x27;test-project/style/button.css&#x27;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"结论\"   >\n          <a href=\"#结论\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3>\n      <p>手动引入的方式， 需要深入了解组件库代码，了解各组件位置等信息，不方便。</p>\n<p>因此，现在大部分组件库已经放弃了这种方式。</p>\n\n        <h2 id=\"Babel-plugin-import插件\"   >\n          <a href=\"#Babel-plugin-import插件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Babel-plugin-import插件\" class=\"headerlink\" title=\"Babel-plugin-import插件\"></a>Babel-plugin-import插件</h2>\n      <p>让程序帮我们把引入组件的语句<strong>转化成手动引入</strong>的语句</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test/index.js</span><br><span class=\"line\">import &#123;Button&#125; from &#x27;test-project&#x27;</span><br></pre></td></tr></table></div></figure>\n\n<p>配置.babelrc文件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test/.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;: [</span><br><span class=\"line\">      &quot;@babel/preset-env&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    // 注意：借助babel-plugin-import引入</span><br><span class=\"line\">    &quot;plugins&quot;: [[&quot;import&quot;,&#123;</span><br><span class=\"line\">      \t// 组件库名称</span><br><span class=\"line\">        &quot;libraryName&quot;: &quot;test-project&quot;,</span><br><span class=\"line\">      \t// 组件位置</span><br><span class=\"line\">        &quot;libraryDirectory&quot;: &quot;lib/components&quot;,</span><br><span class=\"line\">        // &quot;styleLibraryDirectory&quot;: &quot;lib/theme&quot;, 配置的话会在project/lib/theme/button中引入样式</span><br><span class=\"line\">      \t// 组件样式位置</span><br><span class=\"line\">        &quot;style&quot;: &quot;style/index.css&quot;</span><br><span class=\"line\">        // style：true的时候加载未编译为css的less，也就可以改变主题</span><br><span class=\"line\">\t\t// style：“css”就是加载编译好的css，无法更改主题</span><br><span class=\"line\">    &#125;]]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"结论-1\"   >\n          <a href=\"#结论-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#结论-1\" class=\"headerlink\" title=\"结论\"></a>结论</h3>\n      <p>Babel-plugin-import借助Babel解析编辑ATS的能力实现了一种成熟的组件按需引入方式。</p>\n<p><strong>优点：</strong>只需要按照babel文档进行配置即可</p>\n<p><strong>缺点：</strong>代码中需增加本无需的Babel及相关的配置</p>\n\n        <h2 id=\"Tree-Shaking\"   >\n          <a href=\"#Tree-Shaking\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Tree-Shaking\" class=\"headerlink\" title=\"Tree-Shaking\"></a>Tree-Shaking</h2>\n      <p><code>Tree Shaking</code>中文含义是摇树，在webpack中作用是消除不可能执行的代码。</p>\n<p>而<code>webpack5</code>已经自带了这个功能了，当打包环境为<code>production</code>时，默认开启<code>tree-shaking</code>功能。</p>\n<p>Tree-shaking是依赖ESM这种模块引入方式的：</p>\n<blockquote>\n<p>ES6模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析，从而构成了tree-shaking的基础。</p>\n<p>所谓静态分析就是不执行代码，从字面量上对代码进行分析，可以想一下在commonjs的模块化中我们可以动态require一个模块，只有执行后才知道引用的什么模块，这个就不能通过静态分析去做优化。总之就是一句话——代码是否有用只有在编译时分析，才不会影响运行时的状态。</p>\n</blockquote>\n<p>在webpack中使用tree-shaking，<strong>webpack官方文档</strong>的总结如下：</p>\n<p>我们学到为了利用 tree shaking 的优势， 你必须…</p>\n<p><strong>1、使用 ES2015 模块语法（即 import 和 export）。</strong><br><strong>2、确保没有编译器将您的 ES2015 模块语法转换为 CommonJS 的（顺带一提，这是现在常用的 @babel&#x2F;preset-env 的默认行为，详细信息请参阅文档）。</strong><br><strong>3、在项目的 package.json 文件中，添加 “sideEffects” 属性。</strong><br><strong>4、使用 mode 为 “production” 的配置项以启用更多优化项，包括压缩代码与 tree shaking。</strong></p>\n<p>webpack5中，mode为<code>production</code>时，已自动开启DCE工具（消除无用代码）UglifyJSPlugin和tree-shaking</p>\n\n        <h2 id=\"组件库打包：支持按需加载\"   >\n          <a href=\"#组件库打包：支持按需加载\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#组件库打包：支持按需加载\" class=\"headerlink\" title=\"组件库打包：支持按需加载\"></a>组件库打包：支持按需加载</h2>\n      <p>根据以上我们得知，组件库支持按需加载需满足：</p>\n<ol>\n<li>组件库以es6模块化方式导出（注意babel）</li>\n<li>package.json中添加sideEffects属性</li>\n<li>宿主项目中引用方式写法到位或者配置了babel-plugin-import</li>\n<li>宿主项目通过webpack打包支持tree-shaking</li>\n</ol>\n<p>实现按需加载存在的问题</p>\n<p><strong>webpack不支持ESM导出</strong></p>\n<p>webpack umd 形式导出，打包出来的东西才能供别人使用</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webapack.config</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">  library: &#x27;xmh&#x27;,</span><br><span class=\"line\">  libraryTarget: &#x27;umd&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>但是是整体定义成一个模块，不能支持按需加载</p>\n<p>解决方式：</p>\n<ol>\n<li>使用支持ESM模块导出的Gulp进行打包。</li>\n<li><strong>放弃或限制</strong>Babel的使用，毕竟能导入ESM代码的项目应该是支持ES6语法的。</li>\n<li>不支持ES6模块引入的项目，我们继续采用上述的webpack打包方式。</li>\n</ol>"},{"title":"lerna实现Monorepo","date":"2022-08-13T16:00:00.000Z","_content":"\nlerna的方式实现Monorepo\n<!-- more -->\n\n### 1、全局安装lerna\n\n```\nnpm i --g lerna\n```\n\n### 2、使用`git init`初始化一个项目仓库\n\n```\ngit init lerna-learning && cd lerna-learning\n```\n\n### 3、执行lerna初始化\n\n```\nlerna init -i  // -i 表示各包 独立的版本控制\n```\n\n### 4、创建新的package\n\n```\nlerna create main\nlerna create com-a\nlerna create util\n```\n\n![image-20220814161658610](C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220814161658610.png)\n\n### 5、将其余包添加到main中，一并导出\n\n```\nlerna add xjh-test-lerna-com-a --scope=xjh-test-main\nlerna add xjh-test--lerna-util --scope=xjh-test-main\n```\n\n```\n// main/lib/index.js\n\nvar util = require('xjh-test-lerna-util');\nvar comA = require('xjh-test-lerna-com-a');\n\nexport default {\n    util,\n    comA\n};\n```\n\n\n\n在根目录配置打包命令\n\n```\n// package.json\n\n\"scripts\": {\n   \"build\": \"lerna run --stream --sort build\",\n  }\n```\n\n配置rollup.config.js\n\n```\n// rollup.config.js\nimport postcss from 'rollup-plugin-postcss';\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\n\nconst fs = require('fs');\nconst pkJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n\nexport default {\n    input: 'lib',\n    output: {\n      file: 'dist/index.js',\n      format: 'es',\n      name: 'index'\n      // name: pkJson._globalName\n    },\n    plugins: [\n        nodeResolve(),\n        postcss(),\n        commonjs(),\n    ]\n}\n```\n\nnpm run build打包各包文件\n\nlerna publish发布各包文件即可\n\n\n\n单独引入包或者按需引入\n\n```\nimport util from 'xjh-test-lerna-util';\n\nimport {util} from 'xjh-test-lerna-main';\n```\n","source":"_posts/lerna实现Monorepo.md","raw":"---\ntitle: lerna实现Monorepo\ndate: 2022-08-14\n---\n\nlerna的方式实现Monorepo\n<!-- more -->\n\n### 1、全局安装lerna\n\n```\nnpm i --g lerna\n```\n\n### 2、使用`git init`初始化一个项目仓库\n\n```\ngit init lerna-learning && cd lerna-learning\n```\n\n### 3、执行lerna初始化\n\n```\nlerna init -i  // -i 表示各包 独立的版本控制\n```\n\n### 4、创建新的package\n\n```\nlerna create main\nlerna create com-a\nlerna create util\n```\n\n![image-20220814161658610](C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220814161658610.png)\n\n### 5、将其余包添加到main中，一并导出\n\n```\nlerna add xjh-test-lerna-com-a --scope=xjh-test-main\nlerna add xjh-test--lerna-util --scope=xjh-test-main\n```\n\n```\n// main/lib/index.js\n\nvar util = require('xjh-test-lerna-util');\nvar comA = require('xjh-test-lerna-com-a');\n\nexport default {\n    util,\n    comA\n};\n```\n\n\n\n在根目录配置打包命令\n\n```\n// package.json\n\n\"scripts\": {\n   \"build\": \"lerna run --stream --sort build\",\n  }\n```\n\n配置rollup.config.js\n\n```\n// rollup.config.js\nimport postcss from 'rollup-plugin-postcss';\nimport { nodeResolve } from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\n\nconst fs = require('fs');\nconst pkJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n\nexport default {\n    input: 'lib',\n    output: {\n      file: 'dist/index.js',\n      format: 'es',\n      name: 'index'\n      // name: pkJson._globalName\n    },\n    plugins: [\n        nodeResolve(),\n        postcss(),\n        commonjs(),\n    ]\n}\n```\n\nnpm run build打包各包文件\n\nlerna publish发布各包文件即可\n\n\n\n单独引入包或者按需引入\n\n```\nimport util from 'xjh-test-lerna-util';\n\nimport {util} from 'xjh-test-lerna-main';\n```\n","slug":"lerna实现Monorepo","published":1,"updated":"2022-09-02T17:01:19.397Z","_id":"cl6t2hea00000kkttaiqygu1m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>lerna的方式实现Monorepo</p>\n<span id=\"more\"></span>\n\n\n        <h3 id=\"1、全局安装lerna\"   >\n          <a href=\"#1、全局安装lerna\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#1、全局安装lerna\" class=\"headerlink\" title=\"1、全局安装lerna\"></a>1、全局安装lerna</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --g lerna</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"2、使用git-init初始化一个项目仓库\"   >\n          <a href=\"#2、使用git-init初始化一个项目仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#2、使用git-init初始化一个项目仓库\" class=\"headerlink\" title=\"2、使用git init初始化一个项目仓库\"></a>2、使用<code>git init</code>初始化一个项目仓库</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init lerna-learning &amp;&amp; cd lerna-learning</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"3、执行lerna初始化\"   >\n          <a href=\"#3、执行lerna初始化\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#3、执行lerna初始化\" class=\"headerlink\" title=\"3、执行lerna初始化\"></a>3、执行lerna初始化</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lerna init -i  // -i 表示各包 独立的版本控制</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"4、创建新的package\"   >\n          <a href=\"#4、创建新的package\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#4、创建新的package\" class=\"headerlink\" title=\"4、创建新的package\"></a>4、创建新的package</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lerna create main</span><br><span class=\"line\">lerna create com-a</span><br><span class=\"line\">lerna create util</span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220814161658610.png\" alt=\"image-20220814161658610\"></p>\n\n        <h3 id=\"5、将其余包添加到main中，一并导出\"   >\n          <a href=\"#5、将其余包添加到main中，一并导出\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#5、将其余包添加到main中，一并导出\" class=\"headerlink\" title=\"5、将其余包添加到main中，一并导出\"></a>5、将其余包添加到main中，一并导出</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lerna add xjh-test-lerna-com-a --scope=xjh-test-main</span><br><span class=\"line\">lerna add xjh-test--lerna-util --scope=xjh-test-main</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main/lib/index.js</span><br><span class=\"line\"></span><br><span class=\"line\">var util = require(&#x27;xjh-test-lerna-util&#x27;);</span><br><span class=\"line\">var comA = require(&#x27;xjh-test-lerna-com-a&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    util,</span><br><span class=\"line\">    comA</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<p>在根目录配置打包命令</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">   &quot;build&quot;: &quot;lerna run --stream --sort build&quot;,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>配置rollup.config.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// rollup.config.js</span><br><span class=\"line\">import postcss from &#x27;rollup-plugin-postcss&#x27;;</span><br><span class=\"line\">import &#123; nodeResolve &#125; from &#x27;@rollup/plugin-node-resolve&#x27;;</span><br><span class=\"line\">import commonjs from &#x27;@rollup/plugin-commonjs&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const pkJson = JSON.parse(fs.readFileSync(&#x27;package.json&#x27;, &#x27;utf8&#x27;));</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    input: &#x27;lib&#x27;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      file: &#x27;dist/index.js&#x27;,</span><br><span class=\"line\">      format: &#x27;es&#x27;,</span><br><span class=\"line\">      name: &#x27;index&#x27;</span><br><span class=\"line\">      // name: pkJson._globalName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        nodeResolve(),</span><br><span class=\"line\">        postcss(),</span><br><span class=\"line\">        commonjs(),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>npm run build打包各包文件</p>\n<p>lerna publish发布各包文件即可</p>\n<p>单独引入包或者按需引入</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import util from &#x27;xjh-test-lerna-util&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;util&#125; from &#x27;xjh-test-lerna-main&#x27;;</span><br></pre></td></tr></table></div></figure>\n","site":{"data":{}},"excerpt":"<p>lerna的方式实现Monorepo</p>","more":"<h3 id=\"1、全局安装lerna\"   >\n          <a href=\"#1、全局安装lerna\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#1、全局安装lerna\" class=\"headerlink\" title=\"1、全局安装lerna\"></a>1、全局安装lerna</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --g lerna</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"2、使用git-init初始化一个项目仓库\"   >\n          <a href=\"#2、使用git-init初始化一个项目仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#2、使用git-init初始化一个项目仓库\" class=\"headerlink\" title=\"2、使用git init初始化一个项目仓库\"></a>2、使用<code>git init</code>初始化一个项目仓库</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init lerna-learning &amp;&amp; cd lerna-learning</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"3、执行lerna初始化\"   >\n          <a href=\"#3、执行lerna初始化\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#3、执行lerna初始化\" class=\"headerlink\" title=\"3、执行lerna初始化\"></a>3、执行lerna初始化</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lerna init -i  // -i 表示各包 独立的版本控制</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"4、创建新的package\"   >\n          <a href=\"#4、创建新的package\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#4、创建新的package\" class=\"headerlink\" title=\"4、创建新的package\"></a>4、创建新的package</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lerna create main</span><br><span class=\"line\">lerna create com-a</span><br><span class=\"line\">lerna create util</span><br></pre></td></tr></table></div></figure>\n\n<p><img src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220814161658610.png\" alt=\"image-20220814161658610\"></p>\n\n        <h3 id=\"5、将其余包添加到main中，一并导出\"   >\n          <a href=\"#5、将其余包添加到main中，一并导出\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#5、将其余包添加到main中，一并导出\" class=\"headerlink\" title=\"5、将其余包添加到main中，一并导出\"></a>5、将其余包添加到main中，一并导出</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lerna add xjh-test-lerna-com-a --scope=xjh-test-main</span><br><span class=\"line\">lerna add xjh-test--lerna-util --scope=xjh-test-main</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main/lib/index.js</span><br><span class=\"line\"></span><br><span class=\"line\">var util = require(&#x27;xjh-test-lerna-util&#x27;);</span><br><span class=\"line\">var comA = require(&#x27;xjh-test-lerna-com-a&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    util,</span><br><span class=\"line\">    comA</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<p>在根目录配置打包命令</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">   &quot;build&quot;: &quot;lerna run --stream --sort build&quot;,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>配置rollup.config.js</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// rollup.config.js</span><br><span class=\"line\">import postcss from &#x27;rollup-plugin-postcss&#x27;;</span><br><span class=\"line\">import &#123; nodeResolve &#125; from &#x27;@rollup/plugin-node-resolve&#x27;;</span><br><span class=\"line\">import commonjs from &#x27;@rollup/plugin-commonjs&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const fs = require(&#x27;fs&#x27;);</span><br><span class=\"line\">const pkJson = JSON.parse(fs.readFileSync(&#x27;package.json&#x27;, &#x27;utf8&#x27;));</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    input: &#x27;lib&#x27;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      file: &#x27;dist/index.js&#x27;,</span><br><span class=\"line\">      format: &#x27;es&#x27;,</span><br><span class=\"line\">      name: &#x27;index&#x27;</span><br><span class=\"line\">      // name: pkJson._globalName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        nodeResolve(),</span><br><span class=\"line\">        postcss(),</span><br><span class=\"line\">        commonjs(),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>npm run build打包各包文件</p>\n<p>lerna publish发布各包文件即可</p>\n<p>单独引入包或者按需引入</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import util from &#x27;xjh-test-lerna-util&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;util&#125; from &#x27;xjh-test-lerna-main&#x27;;</span><br></pre></td></tr></table></div></figure>"},{"title":"Docker实现前后端自动化部署","date":"2022-08-29T16:00:00.000Z","_content":"\n用Docker实现Github上提交代码后自动化部署，让购买的`百度云`服务器派上用场~\n<!-- more -->\n\n## Docker部署\n\n### 1、安装Docker\n\n### 2、项目根目录创建`nginx.conf`文件\n\n容器监听80端口，代理到/app文件夹中index.html文件\n\n```\nuser  nginx;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid \n       /var/run/nginx.pid;\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  include       /etc/nginx/mime.types;\n  default_type  application/octet-stream;\n  log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  access_log  /var/log/nginx/access.log  main;\n  sendfile        on;\n  keepalive_timeout  65;\n\n  server {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n      root   /app;\n      index  index.html;\n      try_files $uri $uri/ /index.html;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    \n    location = /50x.html {\n      root   /usr/share/nginx/html;\n    }\n    \n  }\n}\n```\n\n### 3、在项目根目录创建`Dockerfile`文件\n\n```\nFROM node:14\n\nWORKDIR /app\nCOPY ./ /app\nRUN npm install && npm run build\n\nFROM nginx\n\nRUN mkdir /app\n# --from=0获取第一阶段构建完成的目录\nCOPY --from=0 /app/dist /app\n# COPY /app/dist /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/nginx.conf\n```\n\n### 4、打包docker镜像并上传\n\n上传到docker Hub之前需要登录docker\n\n```\ndocker build -t docker仓库/镜像名称:latest .\ndocker push docker仓库/镜像名称:latest\n```\n\n### 5、云服务器拉取镜像并生成容器运行\n\n```\n# deploy.sh\n\ndocker pull docker仓库/镜像名称:latest\ndocker stop fe-container\ndocker rm fe-container\ndocker run -itd -p 8081:80 --name fe-container docker仓库/镜像名称:latest\n# 删除所有未被 tag 标记和未被容器使用的镜像\ndocker image prune -f\n# 清理所有已经停止的容器\ndocker container prune -f\n```\n\n## Docker部署后端服务\n\n### 安装Mysql\n\n仓库拉取mysql8.0\n\n```\ndocker pull mysql:8.0\n```\n\n安装并运行mysql容器\n\n```\ndocker run -p 3307:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0\n备注：\n-p 将本地主机的端口映射到docker容器端口（因为本机的3306端口已被其它版本占用，所以使用3307）\n--name 容器名称命名\n-e 配置信息，配置root密码\n-d 镜像名称\n```\n\n让mysql支持远程连接\n\n```\n// 进入mysql后\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';\nflush privileges; //刷新权限\n```\n\n若云服务器存在防火墙，需要将3306等端口开放才能连接\n\n![image-20220904164227943](C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220904164227943.png)\n\n之后需要被node服务连接数据库，可以先创建测试的数据库。\n\n### 启动后端服务\n\n后端服务和前端类似，Dockerfile有些改动\n\n测试使用的是midway框架，npm run build && npm start\n\n```\nFROM node\nWORKDIR /app\nCOPY package*.json /app/\nRUN npm install\nCOPY . .\n\nEXPOSE 7001\nCMD npm run build && npm start\n```\n\n用软链的方式，将node容器和mysql容器进行互联。\n\n连接的是mysql容器，将mysql配置修改\n\n此时已经互联，所以port为mysql内部端口3306，host为mysql容器\n\n```\n// 添加orm配置\n  orm: {\n    type: 'mysql',\n    host: 'mysql',\n    // host: '127.0.0.1', // 改成你的mysql数据库IP\n    port: 3306, // 改成你的mysql数据库端口\n    ...\n  },\n```\n\n启动node容器并将mysql容器软链\n\n```\ndocker run -dti -p 7007:7001 --name node-container --link mysql:mysql 1440054388/midway-image\n// mysql:mysql 前端为容器名，后面为别名\n```\n\n**单独连接fe容器、node容器、mysql容器比较麻烦，不过docker已有相关的编排工具docker-compose**\n\n#### docker-compose.yml配置\n\n以上，存在3个容器，他们的依赖关系是：前端容器=》后端容器=》数据库容器，需要按启动顺序启动。\n\n配置3项，用depends_on确定依赖关系，并且将它们都添加到同一个network中，才能互联\n\n```\nversion: '3'\n\nnetworks:\n  app-web:\n   driver: bridge\n\nservices:\n  mysql:\n    container_name: mysql\n    image: mysql:8.0\n    ports:\n     - 3306:3306\n    restart: always\n    networks:\n     - app-web\n    environment:\n     # 等同于 -e MYSQL_ROOT_PASSWORD指定root的登录密码\n     MYSQL_ROOT_PASSWORD: '123456'\n     MYSQL_ALLOW_EMPTY_PASSWORD: 'no'\n     # 这里这个指令compose启动成功后会自动创建名为node的数据库\n     MYSQL_DATABASE: 'node'\n     # 此处就是相当于 mysql create user，创建了数据库的登录用户。\n     # mysql8.0不用添加以下root，因为默认就已经添加了\n    #  MYSQL_USER: 'root'\n    #  MYSQL_PASSWORD: '123456' \n    # volumes:\n      # - /root/docker/compose/mysql/data:/var/lib/mysql\n      # 这里的my.cnf可以从原来的安装的MySQL里面找，如果没有不配置也不影响，只是为了方便外部更改\n      # - /root/docker/compose/mysql/conf/my.cnf:/etc/my.cnf\n      # - /root/docker/compose/mysql/init:/docker-entrypoint-initdb.d\n    # 解决外部无法访问\n    command: --default-authentication-plugin=mysql_native_password\n  backend:\n    container_name: node-container\n    image: 1440054388/midway-image\n    ports:\n     - 7001:7001\n    depends_on:\n     - mysql\n    networks:\n     - app-web\n  frontend:\n    container_name: fe-container\n    image: 1440054388/fe-image\n    ports:\n     - 8081:80\n    depends_on:\n     - backend\n```\n\n并且互联后，可以把host改成127.0.0.1\n\n```\n orm: {\n    type: 'mysql',\n    // host: 'mysql',\n    host: '127.0.0.1', // 改成你的mysql数据库IP\n```\n\n启动服务，-d表示以守护进程的方式运行\n\n```\ndocker compose up -d\n```\n\n启动后有一些异常关闭的话，可以查看日志进行排查\n\n```\ndocker logs 容器名\n```\n\n## Github Action自动化部署\n\n**通过Github Action，监听分支代码变化，触发自定义的任务。**\n\n**自动打包代码，镜像上传并登录云服务器执行部署脚本。**\n\n### Github Action\n\n当我们想往自己的项目里接入**Github Actions**时，要在根项目目录里新建`.github/workflows`目录。然后通过编写`yml`格式文件定义**Workflow(工作流程)去实现`CI`。`yml`文件Workflow**中一些比较重要的概念：\n\n- **Event(触发事件)**：指触发 **Workflow(工作流程)** 运行的事件。\n- **Job(作业)**：一个**工作流程**中包含一个或多个**Job**，这些**Job**默认情况下并行运行，但我们也可以通过设置让其按顺序执行。每个**Job**都在指定的环境(虚拟机或容器)里开启一个**Runner**(可以理解为一个进程)运行，包含多个**Step(步骤)**。\n- **Step(步骤)**：**Job**的组成部分，用于定义每一部的工作内容。每个**Step**在运行器环境中以其单独的进程运行，且可以访问工作区和文件系统。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27deef91333747ab8f7e09bd2649b5bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?)\n\n在项目根目录创建`.github/workflows/deploy.yml`目录及文件\n\n```\nname: CI/CD\n# 触发条件为 push\non:\n  push:\n    branches:\n      - master\n    # 修改文件范围, 不在范围内不触发\n    paths:\n      - '.github/workflows/**'\n      - '__test__/**'\n      - 'src/**'\n      - '**/**'\n# 任务\njobs:\n  test:\n    # 运行的环境\n    runs-on: ubuntu-latest\n    # 步骤\n    steps:\n      - uses: actions/checkout@v2 # git pull\n      - name: Use Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: 14\n      - name: 打包镜像, 上传 Docker Hub\n        run: |\n          docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}\n          docker build -t ${{ secrets.DOCKER_REPOSITORY }} .\n          docker push ${{ secrets.DOCKER_REPOSITORY }}\n\n      - name: 登录服务器, 执行脚本\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.REMOTE_HOST }}\n          username: root\n          password: ${{ secrets.REMOTE_PASSWORD }}\n          # 执行脚本\n          script: cd ~ && sh deploy.sh\n          \n```\n\ndeploy.yml文件中的敏感信息用变量表示，在setting中可以配置变量\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddaf12fad12b43be94ea330648f2d349~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?)\n\n修改代码并提交分支，即可触发deploy.yml流程，大功告成！","source":"_posts/Docker实现前后端自动化部署.md","raw":"---\ntitle: Docker实现前后端自动化部署\ndate: 2022-08-30\n---\n\n用Docker实现Github上提交代码后自动化部署，让购买的`百度云`服务器派上用场~\n<!-- more -->\n\n## Docker部署\n\n### 1、安装Docker\n\n### 2、项目根目录创建`nginx.conf`文件\n\n容器监听80端口，代理到/app文件夹中index.html文件\n\n```\nuser  nginx;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid \n       /var/run/nginx.pid;\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  include       /etc/nginx/mime.types;\n  default_type  application/octet-stream;\n  log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  access_log  /var/log/nginx/access.log  main;\n  sendfile        on;\n  keepalive_timeout  65;\n\n  server {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n      root   /app;\n      index  index.html;\n      try_files $uri $uri/ /index.html;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    \n    location = /50x.html {\n      root   /usr/share/nginx/html;\n    }\n    \n  }\n}\n```\n\n### 3、在项目根目录创建`Dockerfile`文件\n\n```\nFROM node:14\n\nWORKDIR /app\nCOPY ./ /app\nRUN npm install && npm run build\n\nFROM nginx\n\nRUN mkdir /app\n# --from=0获取第一阶段构建完成的目录\nCOPY --from=0 /app/dist /app\n# COPY /app/dist /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx/nginx.conf\n```\n\n### 4、打包docker镜像并上传\n\n上传到docker Hub之前需要登录docker\n\n```\ndocker build -t docker仓库/镜像名称:latest .\ndocker push docker仓库/镜像名称:latest\n```\n\n### 5、云服务器拉取镜像并生成容器运行\n\n```\n# deploy.sh\n\ndocker pull docker仓库/镜像名称:latest\ndocker stop fe-container\ndocker rm fe-container\ndocker run -itd -p 8081:80 --name fe-container docker仓库/镜像名称:latest\n# 删除所有未被 tag 标记和未被容器使用的镜像\ndocker image prune -f\n# 清理所有已经停止的容器\ndocker container prune -f\n```\n\n## Docker部署后端服务\n\n### 安装Mysql\n\n仓库拉取mysql8.0\n\n```\ndocker pull mysql:8.0\n```\n\n安装并运行mysql容器\n\n```\ndocker run -p 3307:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0\n备注：\n-p 将本地主机的端口映射到docker容器端口（因为本机的3306端口已被其它版本占用，所以使用3307）\n--name 容器名称命名\n-e 配置信息，配置root密码\n-d 镜像名称\n```\n\n让mysql支持远程连接\n\n```\n// 进入mysql后\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';\nflush privileges; //刷新权限\n```\n\n若云服务器存在防火墙，需要将3306等端口开放才能连接\n\n![image-20220904164227943](C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220904164227943.png)\n\n之后需要被node服务连接数据库，可以先创建测试的数据库。\n\n### 启动后端服务\n\n后端服务和前端类似，Dockerfile有些改动\n\n测试使用的是midway框架，npm run build && npm start\n\n```\nFROM node\nWORKDIR /app\nCOPY package*.json /app/\nRUN npm install\nCOPY . .\n\nEXPOSE 7001\nCMD npm run build && npm start\n```\n\n用软链的方式，将node容器和mysql容器进行互联。\n\n连接的是mysql容器，将mysql配置修改\n\n此时已经互联，所以port为mysql内部端口3306，host为mysql容器\n\n```\n// 添加orm配置\n  orm: {\n    type: 'mysql',\n    host: 'mysql',\n    // host: '127.0.0.1', // 改成你的mysql数据库IP\n    port: 3306, // 改成你的mysql数据库端口\n    ...\n  },\n```\n\n启动node容器并将mysql容器软链\n\n```\ndocker run -dti -p 7007:7001 --name node-container --link mysql:mysql 1440054388/midway-image\n// mysql:mysql 前端为容器名，后面为别名\n```\n\n**单独连接fe容器、node容器、mysql容器比较麻烦，不过docker已有相关的编排工具docker-compose**\n\n#### docker-compose.yml配置\n\n以上，存在3个容器，他们的依赖关系是：前端容器=》后端容器=》数据库容器，需要按启动顺序启动。\n\n配置3项，用depends_on确定依赖关系，并且将它们都添加到同一个network中，才能互联\n\n```\nversion: '3'\n\nnetworks:\n  app-web:\n   driver: bridge\n\nservices:\n  mysql:\n    container_name: mysql\n    image: mysql:8.0\n    ports:\n     - 3306:3306\n    restart: always\n    networks:\n     - app-web\n    environment:\n     # 等同于 -e MYSQL_ROOT_PASSWORD指定root的登录密码\n     MYSQL_ROOT_PASSWORD: '123456'\n     MYSQL_ALLOW_EMPTY_PASSWORD: 'no'\n     # 这里这个指令compose启动成功后会自动创建名为node的数据库\n     MYSQL_DATABASE: 'node'\n     # 此处就是相当于 mysql create user，创建了数据库的登录用户。\n     # mysql8.0不用添加以下root，因为默认就已经添加了\n    #  MYSQL_USER: 'root'\n    #  MYSQL_PASSWORD: '123456' \n    # volumes:\n      # - /root/docker/compose/mysql/data:/var/lib/mysql\n      # 这里的my.cnf可以从原来的安装的MySQL里面找，如果没有不配置也不影响，只是为了方便外部更改\n      # - /root/docker/compose/mysql/conf/my.cnf:/etc/my.cnf\n      # - /root/docker/compose/mysql/init:/docker-entrypoint-initdb.d\n    # 解决外部无法访问\n    command: --default-authentication-plugin=mysql_native_password\n  backend:\n    container_name: node-container\n    image: 1440054388/midway-image\n    ports:\n     - 7001:7001\n    depends_on:\n     - mysql\n    networks:\n     - app-web\n  frontend:\n    container_name: fe-container\n    image: 1440054388/fe-image\n    ports:\n     - 8081:80\n    depends_on:\n     - backend\n```\n\n并且互联后，可以把host改成127.0.0.1\n\n```\n orm: {\n    type: 'mysql',\n    // host: 'mysql',\n    host: '127.0.0.1', // 改成你的mysql数据库IP\n```\n\n启动服务，-d表示以守护进程的方式运行\n\n```\ndocker compose up -d\n```\n\n启动后有一些异常关闭的话，可以查看日志进行排查\n\n```\ndocker logs 容器名\n```\n\n## Github Action自动化部署\n\n**通过Github Action，监听分支代码变化，触发自定义的任务。**\n\n**自动打包代码，镜像上传并登录云服务器执行部署脚本。**\n\n### Github Action\n\n当我们想往自己的项目里接入**Github Actions**时，要在根项目目录里新建`.github/workflows`目录。然后通过编写`yml`格式文件定义**Workflow(工作流程)去实现`CI`。`yml`文件Workflow**中一些比较重要的概念：\n\n- **Event(触发事件)**：指触发 **Workflow(工作流程)** 运行的事件。\n- **Job(作业)**：一个**工作流程**中包含一个或多个**Job**，这些**Job**默认情况下并行运行，但我们也可以通过设置让其按顺序执行。每个**Job**都在指定的环境(虚拟机或容器)里开启一个**Runner**(可以理解为一个进程)运行，包含多个**Step(步骤)**。\n- **Step(步骤)**：**Job**的组成部分，用于定义每一部的工作内容。每个**Step**在运行器环境中以其单独的进程运行，且可以访问工作区和文件系统。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27deef91333747ab8f7e09bd2649b5bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?)\n\n在项目根目录创建`.github/workflows/deploy.yml`目录及文件\n\n```\nname: CI/CD\n# 触发条件为 push\non:\n  push:\n    branches:\n      - master\n    # 修改文件范围, 不在范围内不触发\n    paths:\n      - '.github/workflows/**'\n      - '__test__/**'\n      - 'src/**'\n      - '**/**'\n# 任务\njobs:\n  test:\n    # 运行的环境\n    runs-on: ubuntu-latest\n    # 步骤\n    steps:\n      - uses: actions/checkout@v2 # git pull\n      - name: Use Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: 14\n      - name: 打包镜像, 上传 Docker Hub\n        run: |\n          docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}\n          docker build -t ${{ secrets.DOCKER_REPOSITORY }} .\n          docker push ${{ secrets.DOCKER_REPOSITORY }}\n\n      - name: 登录服务器, 执行脚本\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.REMOTE_HOST }}\n          username: root\n          password: ${{ secrets.REMOTE_PASSWORD }}\n          # 执行脚本\n          script: cd ~ && sh deploy.sh\n          \n```\n\ndeploy.yml文件中的敏感信息用变量表示，在setting中可以配置变量\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddaf12fad12b43be94ea330648f2d349~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?)\n\n修改代码并提交分支，即可触发deploy.yml流程，大功告成！","slug":"Docker实现前后端自动化部署","published":1,"updated":"2022-09-04T14:55:39.703Z","_id":"cl7gd408v0000jcttc5m63wwt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>用Docker实现Github上提交代码后自动化部署，让购买的<code>百度云</code>服务器派上用场~</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"Docker部署\"   >\n          <a href=\"#Docker部署\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Docker部署\" class=\"headerlink\" title=\"Docker部署\"></a>Docker部署</h2>\n      \n        <h3 id=\"1、安装Docker\"   >\n          <a href=\"#1、安装Docker\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#1、安装Docker\" class=\"headerlink\" title=\"1、安装Docker\"></a>1、安装Docker</h3>\n      \n        <h3 id=\"2、项目根目录创建nginx-conf文件\"   >\n          <a href=\"#2、项目根目录创建nginx-conf文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#2、项目根目录创建nginx-conf文件\" class=\"headerlink\" title=\"2、项目根目录创建nginx.conf文件\"></a>2、项目根目录创建<code>nginx.conf</code>文件</h3>\n      <p>容器监听80端口，代理到&#x2F;app文件夹中index.html文件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid </span><br><span class=\"line\">       /var/run/nginx.pid;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">  worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  include       /etc/nginx/mime.types;</span><br><span class=\"line\">  default_type  application/octet-stream;</span><br><span class=\"line\">  log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                    &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                    &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\">  access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">  sendfile        on;</span><br><span class=\"line\">  keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      root   /app;</span><br><span class=\"line\">      index  index.html;</span><br><span class=\"line\">      try_files $uri $uri/ /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    </span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">      root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"3、在项目根目录创建Dockerfile文件\"   >\n          <a href=\"#3、在项目根目录创建Dockerfile文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#3、在项目根目录创建Dockerfile文件\" class=\"headerlink\" title=\"3、在项目根目录创建Dockerfile文件\"></a>3、在项目根目录创建<code>Dockerfile</code>文件</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:14</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY ./ /app</span><br><span class=\"line\">RUN npm install &amp;&amp; npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">FROM nginx</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir /app</span><br><span class=\"line\"># --from=0获取第一阶段构建完成的目录</span><br><span class=\"line\">COPY --from=0 /app/dist /app</span><br><span class=\"line\"># COPY /app/dist /usr/share/nginx/html</span><br><span class=\"line\">COPY nginx.conf /etc/nginx/nginx.conf</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"4、打包docker镜像并上传\"   >\n          <a href=\"#4、打包docker镜像并上传\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#4、打包docker镜像并上传\" class=\"headerlink\" title=\"4、打包docker镜像并上传\"></a>4、打包docker镜像并上传</h3>\n      <p>上传到docker Hub之前需要登录docker</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t docker仓库/镜像名称:latest .</span><br><span class=\"line\">docker push docker仓库/镜像名称:latest</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"5、云服务器拉取镜像并生成容器运行\"   >\n          <a href=\"#5、云服务器拉取镜像并生成容器运行\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#5、云服务器拉取镜像并生成容器运行\" class=\"headerlink\" title=\"5、云服务器拉取镜像并生成容器运行\"></a>5、云服务器拉取镜像并生成容器运行</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># deploy.sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull docker仓库/镜像名称:latest</span><br><span class=\"line\">docker stop fe-container</span><br><span class=\"line\">docker rm fe-container</span><br><span class=\"line\">docker run -itd -p 8081:80 --name fe-container docker仓库/镜像名称:latest</span><br><span class=\"line\"># 删除所有未被 tag 标记和未被容器使用的镜像</span><br><span class=\"line\">docker image prune -f</span><br><span class=\"line\"># 清理所有已经停止的容器</span><br><span class=\"line\">docker container prune -f</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Docker部署后端服务\"   >\n          <a href=\"#Docker部署后端服务\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Docker部署后端服务\" class=\"headerlink\" title=\"Docker部署后端服务\"></a>Docker部署后端服务</h2>\n      \n        <h3 id=\"安装Mysql\"   >\n          <a href=\"#安装Mysql\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#安装Mysql\" class=\"headerlink\" title=\"安装Mysql\"></a>安装Mysql</h3>\n      <p>仓库拉取mysql8.0</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:8.0</span><br></pre></td></tr></table></div></figure>\n\n<p>安装并运行mysql容器</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3307:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0</span><br><span class=\"line\">备注：</span><br><span class=\"line\">-p 将本地主机的端口映射到docker容器端口（因为本机的3306端口已被其它版本占用，所以使用3307）</span><br><span class=\"line\">--name 容器名称命名</span><br><span class=\"line\">-e 配置信息，配置root密码</span><br><span class=\"line\">-d 镜像名称</span><br></pre></td></tr></table></div></figure>\n\n<p>让mysql支持远程连接</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 进入mysql后</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class=\"line\">flush privileges; //刷新权限</span><br></pre></td></tr></table></div></figure>\n\n<p>若云服务器存在防火墙，需要将3306等端口开放才能连接</p>\n<p><img src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220904164227943.png\" alt=\"image-20220904164227943\"></p>\n<p>之后需要被node服务连接数据库，可以先创建测试的数据库。</p>\n\n        <h3 id=\"启动后端服务\"   >\n          <a href=\"#启动后端服务\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#启动后端服务\" class=\"headerlink\" title=\"启动后端服务\"></a>启动后端服务</h3>\n      <p>后端服务和前端类似，Dockerfile有些改动</p>\n<p>测试使用的是midway框架，npm run build &amp;&amp; npm start</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY package*.json /app/</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 7001</span><br><span class=\"line\">CMD npm run build &amp;&amp; npm start</span><br></pre></td></tr></table></div></figure>\n\n<p>用软链的方式，将node容器和mysql容器进行互联。</p>\n<p>连接的是mysql容器，将mysql配置修改</p>\n<p>此时已经互联，所以port为mysql内部端口3306，host为mysql容器</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 添加orm配置</span><br><span class=\"line\">  orm: &#123;</span><br><span class=\"line\">    type: &#x27;mysql&#x27;,</span><br><span class=\"line\">    host: &#x27;mysql&#x27;,</span><br><span class=\"line\">    // host: &#x27;127.0.0.1&#x27;, // 改成你的mysql数据库IP</span><br><span class=\"line\">    port: 3306, // 改成你的mysql数据库端口</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></div></figure>\n\n<p>启动node容器并将mysql容器软链</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -dti -p 7007:7001 --name node-container --link mysql:mysql 1440054388/midway-image</span><br><span class=\"line\">// mysql:mysql 前端为容器名，后面为别名</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>单独连接fe容器、node容器、mysql容器比较麻烦，不过docker已有相关的编排工具docker-compose</strong></p>\n\n        <h4 id=\"docker-compose-yml配置\"   >\n          <a href=\"#docker-compose-yml配置\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#docker-compose-yml配置\" class=\"headerlink\" title=\"docker-compose.yml配置\"></a>docker-compose.yml配置</h4>\n      <p>以上，存在3个容器，他们的依赖关系是：前端容器&#x3D;》后端容器&#x3D;》数据库容器，需要按启动顺序启动。</p>\n<p>配置3项，用depends_on确定依赖关系，并且将它们都添加到同一个network中，才能互联</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  app-web:</span><br><span class=\"line\">   driver: bridge</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    container_name: mysql</span><br><span class=\"line\">    image: mysql:8.0</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">     - 3306:3306</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">     - app-web</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">     # 等同于 -e MYSQL_ROOT_PASSWORD指定root的登录密码</span><br><span class=\"line\">     MYSQL_ROOT_PASSWORD: &#x27;123456&#x27;</span><br><span class=\"line\">     MYSQL_ALLOW_EMPTY_PASSWORD: &#x27;no&#x27;</span><br><span class=\"line\">     # 这里这个指令compose启动成功后会自动创建名为node的数据库</span><br><span class=\"line\">     MYSQL_DATABASE: &#x27;node&#x27;</span><br><span class=\"line\">     # 此处就是相当于 mysql create user，创建了数据库的登录用户。</span><br><span class=\"line\">     # mysql8.0不用添加以下root，因为默认就已经添加了</span><br><span class=\"line\">    #  MYSQL_USER: &#x27;root&#x27;</span><br><span class=\"line\">    #  MYSQL_PASSWORD: &#x27;123456&#x27; </span><br><span class=\"line\">    # volumes:</span><br><span class=\"line\">      # - /root/docker/compose/mysql/data:/var/lib/mysql</span><br><span class=\"line\">      # 这里的my.cnf可以从原来的安装的MySQL里面找，如果没有不配置也不影响，只是为了方便外部更改</span><br><span class=\"line\">      # - /root/docker/compose/mysql/conf/my.cnf:/etc/my.cnf</span><br><span class=\"line\">      # - /root/docker/compose/mysql/init:/docker-entrypoint-initdb.d</span><br><span class=\"line\">    # 解决外部无法访问</span><br><span class=\"line\">    command: --default-authentication-plugin=mysql_native_password</span><br><span class=\"line\">  backend:</span><br><span class=\"line\">    container_name: node-container</span><br><span class=\"line\">    image: 1440054388/midway-image</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">     - 7001:7001</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">     - mysql</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">     - app-web</span><br><span class=\"line\">  frontend:</span><br><span class=\"line\">    container_name: fe-container</span><br><span class=\"line\">    image: 1440054388/fe-image</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">     - 8081:80</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">     - backend</span><br></pre></td></tr></table></div></figure>\n\n<p>并且互联后，可以把host改成127.0.0.1</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orm: &#123;</span><br><span class=\"line\">   type: &#x27;mysql&#x27;,</span><br><span class=\"line\">   // host: &#x27;mysql&#x27;,</span><br><span class=\"line\">   host: &#x27;127.0.0.1&#x27;, // 改成你的mysql数据库IP</span><br></pre></td></tr></table></div></figure>\n\n<p>启动服务，-d表示以守护进程的方式运行</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></div></figure>\n\n<p>启动后有一些异常关闭的话，可以查看日志进行排查</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs 容器名</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Github-Action自动化部署\"   >\n          <a href=\"#Github-Action自动化部署\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Github-Action自动化部署\" class=\"headerlink\" title=\"Github Action自动化部署\"></a>Github Action自动化部署</h2>\n      <p><strong>通过Github Action，监听分支代码变化，触发自定义的任务。</strong></p>\n<p><strong>自动打包代码，镜像上传并登录云服务器执行部署脚本。</strong></p>\n\n        <h3 id=\"Github-Action\"   >\n          <a href=\"#Github-Action\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Github-Action\" class=\"headerlink\" title=\"Github Action\"></a>Github Action</h3>\n      <p>当我们想往自己的项目里接入<strong>Github Actions</strong>时，要在根项目目录里新建<code>.github/workflows</code>目录。然后通过编写<code>yml</code>格式文件定义<strong>Workflow(工作流程)去实现<code>CI</code>。<code>yml</code>文件Workflow</strong>中一些比较重要的概念：</p>\n<ul>\n<li>**Event(触发事件)**：指触发 <strong>Workflow(工作流程)</strong> 运行的事件。</li>\n<li><strong>Job(作业)<strong>：一个</strong>工作流程</strong>中包含一个或多个<strong>Job</strong>，这些<strong>Job</strong>默认情况下并行运行，但我们也可以通过设置让其按顺序执行。每个<strong>Job</strong>都在指定的环境(虚拟机或容器)里开启一个<strong>Runner</strong>(可以理解为一个进程)运行，包含多个**Step(步骤)**。</li>\n<li><strong>Step(步骤)<strong>：</strong>Job</strong>的组成部分，用于定义每一部的工作内容。每个<strong>Step</strong>在运行器环境中以其单独的进程运行，且可以访问工作区和文件系统。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27deef91333747ab8f7e09bd2649b5bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>在项目根目录创建<code>.github/workflows/deploy.yml</code>目录及文件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: CI/CD</span><br><span class=\"line\"># 触发条件为 push</span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">    # 修改文件范围, 不在范围内不触发</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">      - &#x27;.github/workflows/**&#x27;</span><br><span class=\"line\">      - &#x27;__test__/**&#x27;</span><br><span class=\"line\">      - &#x27;src/**&#x27;</span><br><span class=\"line\">      - &#x27;**/**&#x27;</span><br><span class=\"line\"># 任务</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  test:</span><br><span class=\"line\">    # 运行的环境</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    # 步骤</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v2 # git pull</span><br><span class=\"line\">      - name: Use Node.js</span><br><span class=\"line\">        uses: actions/setup-node@v1</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: 14</span><br><span class=\"line\">      - name: 打包镜像, 上传 Docker Hub</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          docker login -u $&#123;&#123; secrets.REGISTRY_USERNAME &#125;&#125; -p $&#123;&#123; secrets.REGISTRY_PASSWORD &#125;&#125;</span><br><span class=\"line\">          docker build -t $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125; .</span><br><span class=\"line\">          docker push $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: 登录服务器, 执行脚本</span><br><span class=\"line\">        uses: appleboy/ssh-action@master</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          host: $&#123;&#123; secrets.REMOTE_HOST &#125;&#125;</span><br><span class=\"line\">          username: root</span><br><span class=\"line\">          password: $&#123;&#123; secrets.REMOTE_PASSWORD &#125;&#125;</span><br><span class=\"line\">          # 执行脚本</span><br><span class=\"line\">          script: cd ~ &amp;&amp; sh deploy.sh</span><br><span class=\"line\">          </span><br></pre></td></tr></table></div></figure>\n\n<p>deploy.yml文件中的敏感信息用变量表示，在setting中可以配置变量</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddaf12fad12b43be94ea330648f2d349~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>修改代码并提交分支，即可触发deploy.yml流程，大功告成！</p>\n","site":{"data":{}},"excerpt":"<p>用Docker实现Github上提交代码后自动化部署，让购买的<code>百度云</code>服务器派上用场~</p>","more":"<h2 id=\"Docker部署\"   >\n          <a href=\"#Docker部署\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Docker部署\" class=\"headerlink\" title=\"Docker部署\"></a>Docker部署</h2>\n      \n        <h3 id=\"1、安装Docker\"   >\n          <a href=\"#1、安装Docker\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#1、安装Docker\" class=\"headerlink\" title=\"1、安装Docker\"></a>1、安装Docker</h3>\n      \n        <h3 id=\"2、项目根目录创建nginx-conf文件\"   >\n          <a href=\"#2、项目根目录创建nginx-conf文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#2、项目根目录创建nginx-conf文件\" class=\"headerlink\" title=\"2、项目根目录创建nginx.conf文件\"></a>2、项目根目录创建<code>nginx.conf</code>文件</h3>\n      <p>容器监听80端口，代理到&#x2F;app文件夹中index.html文件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid </span><br><span class=\"line\">       /var/run/nginx.pid;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">  worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  include       /etc/nginx/mime.types;</span><br><span class=\"line\">  default_type  application/octet-stream;</span><br><span class=\"line\">  log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                    &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                    &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\">  access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">  sendfile        on;</span><br><span class=\"line\">  keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      root   /app;</span><br><span class=\"line\">      index  index.html;</span><br><span class=\"line\">      try_files $uri $uri/ /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    </span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">      root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"3、在项目根目录创建Dockerfile文件\"   >\n          <a href=\"#3、在项目根目录创建Dockerfile文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#3、在项目根目录创建Dockerfile文件\" class=\"headerlink\" title=\"3、在项目根目录创建Dockerfile文件\"></a>3、在项目根目录创建<code>Dockerfile</code>文件</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:14</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY ./ /app</span><br><span class=\"line\">RUN npm install &amp;&amp; npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">FROM nginx</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir /app</span><br><span class=\"line\"># --from=0获取第一阶段构建完成的目录</span><br><span class=\"line\">COPY --from=0 /app/dist /app</span><br><span class=\"line\"># COPY /app/dist /usr/share/nginx/html</span><br><span class=\"line\">COPY nginx.conf /etc/nginx/nginx.conf</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"4、打包docker镜像并上传\"   >\n          <a href=\"#4、打包docker镜像并上传\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#4、打包docker镜像并上传\" class=\"headerlink\" title=\"4、打包docker镜像并上传\"></a>4、打包docker镜像并上传</h3>\n      <p>上传到docker Hub之前需要登录docker</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t docker仓库/镜像名称:latest .</span><br><span class=\"line\">docker push docker仓库/镜像名称:latest</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"5、云服务器拉取镜像并生成容器运行\"   >\n          <a href=\"#5、云服务器拉取镜像并生成容器运行\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#5、云服务器拉取镜像并生成容器运行\" class=\"headerlink\" title=\"5、云服务器拉取镜像并生成容器运行\"></a>5、云服务器拉取镜像并生成容器运行</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># deploy.sh</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull docker仓库/镜像名称:latest</span><br><span class=\"line\">docker stop fe-container</span><br><span class=\"line\">docker rm fe-container</span><br><span class=\"line\">docker run -itd -p 8081:80 --name fe-container docker仓库/镜像名称:latest</span><br><span class=\"line\"># 删除所有未被 tag 标记和未被容器使用的镜像</span><br><span class=\"line\">docker image prune -f</span><br><span class=\"line\"># 清理所有已经停止的容器</span><br><span class=\"line\">docker container prune -f</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Docker部署后端服务\"   >\n          <a href=\"#Docker部署后端服务\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Docker部署后端服务\" class=\"headerlink\" title=\"Docker部署后端服务\"></a>Docker部署后端服务</h2>\n      \n        <h3 id=\"安装Mysql\"   >\n          <a href=\"#安装Mysql\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#安装Mysql\" class=\"headerlink\" title=\"安装Mysql\"></a>安装Mysql</h3>\n      <p>仓库拉取mysql8.0</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:8.0</span><br></pre></td></tr></table></div></figure>\n\n<p>安装并运行mysql容器</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 3307:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0</span><br><span class=\"line\">备注：</span><br><span class=\"line\">-p 将本地主机的端口映射到docker容器端口（因为本机的3306端口已被其它版本占用，所以使用3307）</span><br><span class=\"line\">--name 容器名称命名</span><br><span class=\"line\">-e 配置信息，配置root密码</span><br><span class=\"line\">-d 镜像名称</span><br></pre></td></tr></table></div></figure>\n\n<p>让mysql支持远程连接</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 进入mysql后</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class=\"line\">flush privileges; //刷新权限</span><br></pre></td></tr></table></div></figure>\n\n<p>若云服务器存在防火墙，需要将3306等端口开放才能连接</p>\n<p><img src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220904164227943.png\" alt=\"image-20220904164227943\"></p>\n<p>之后需要被node服务连接数据库，可以先创建测试的数据库。</p>\n\n        <h3 id=\"启动后端服务\"   >\n          <a href=\"#启动后端服务\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#启动后端服务\" class=\"headerlink\" title=\"启动后端服务\"></a>启动后端服务</h3>\n      <p>后端服务和前端类似，Dockerfile有些改动</p>\n<p>测试使用的是midway框架，npm run build &amp;&amp; npm start</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY package*.json /app/</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 7001</span><br><span class=\"line\">CMD npm run build &amp;&amp; npm start</span><br></pre></td></tr></table></div></figure>\n\n<p>用软链的方式，将node容器和mysql容器进行互联。</p>\n<p>连接的是mysql容器，将mysql配置修改</p>\n<p>此时已经互联，所以port为mysql内部端口3306，host为mysql容器</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 添加orm配置</span><br><span class=\"line\">  orm: &#123;</span><br><span class=\"line\">    type: &#x27;mysql&#x27;,</span><br><span class=\"line\">    host: &#x27;mysql&#x27;,</span><br><span class=\"line\">    // host: &#x27;127.0.0.1&#x27;, // 改成你的mysql数据库IP</span><br><span class=\"line\">    port: 3306, // 改成你的mysql数据库端口</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></div></figure>\n\n<p>启动node容器并将mysql容器软链</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -dti -p 7007:7001 --name node-container --link mysql:mysql 1440054388/midway-image</span><br><span class=\"line\">// mysql:mysql 前端为容器名，后面为别名</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>单独连接fe容器、node容器、mysql容器比较麻烦，不过docker已有相关的编排工具docker-compose</strong></p>\n\n        <h4 id=\"docker-compose-yml配置\"   >\n          <a href=\"#docker-compose-yml配置\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#docker-compose-yml配置\" class=\"headerlink\" title=\"docker-compose.yml配置\"></a>docker-compose.yml配置</h4>\n      <p>以上，存在3个容器，他们的依赖关系是：前端容器&#x3D;》后端容器&#x3D;》数据库容器，需要按启动顺序启动。</p>\n<p>配置3项，用depends_on确定依赖关系，并且将它们都添加到同一个network中，才能互联</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  app-web:</span><br><span class=\"line\">   driver: bridge</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    container_name: mysql</span><br><span class=\"line\">    image: mysql:8.0</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">     - 3306:3306</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">     - app-web</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">     # 等同于 -e MYSQL_ROOT_PASSWORD指定root的登录密码</span><br><span class=\"line\">     MYSQL_ROOT_PASSWORD: &#x27;123456&#x27;</span><br><span class=\"line\">     MYSQL_ALLOW_EMPTY_PASSWORD: &#x27;no&#x27;</span><br><span class=\"line\">     # 这里这个指令compose启动成功后会自动创建名为node的数据库</span><br><span class=\"line\">     MYSQL_DATABASE: &#x27;node&#x27;</span><br><span class=\"line\">     # 此处就是相当于 mysql create user，创建了数据库的登录用户。</span><br><span class=\"line\">     # mysql8.0不用添加以下root，因为默认就已经添加了</span><br><span class=\"line\">    #  MYSQL_USER: &#x27;root&#x27;</span><br><span class=\"line\">    #  MYSQL_PASSWORD: &#x27;123456&#x27; </span><br><span class=\"line\">    # volumes:</span><br><span class=\"line\">      # - /root/docker/compose/mysql/data:/var/lib/mysql</span><br><span class=\"line\">      # 这里的my.cnf可以从原来的安装的MySQL里面找，如果没有不配置也不影响，只是为了方便外部更改</span><br><span class=\"line\">      # - /root/docker/compose/mysql/conf/my.cnf:/etc/my.cnf</span><br><span class=\"line\">      # - /root/docker/compose/mysql/init:/docker-entrypoint-initdb.d</span><br><span class=\"line\">    # 解决外部无法访问</span><br><span class=\"line\">    command: --default-authentication-plugin=mysql_native_password</span><br><span class=\"line\">  backend:</span><br><span class=\"line\">    container_name: node-container</span><br><span class=\"line\">    image: 1440054388/midway-image</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">     - 7001:7001</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">     - mysql</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">     - app-web</span><br><span class=\"line\">  frontend:</span><br><span class=\"line\">    container_name: fe-container</span><br><span class=\"line\">    image: 1440054388/fe-image</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">     - 8081:80</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">     - backend</span><br></pre></td></tr></table></div></figure>\n\n<p>并且互联后，可以把host改成127.0.0.1</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orm: &#123;</span><br><span class=\"line\">   type: &#x27;mysql&#x27;,</span><br><span class=\"line\">   // host: &#x27;mysql&#x27;,</span><br><span class=\"line\">   host: &#x27;127.0.0.1&#x27;, // 改成你的mysql数据库IP</span><br></pre></td></tr></table></div></figure>\n\n<p>启动服务，-d表示以守护进程的方式运行</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></div></figure>\n\n<p>启动后有一些异常关闭的话，可以查看日志进行排查</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs 容器名</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Github-Action自动化部署\"   >\n          <a href=\"#Github-Action自动化部署\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Github-Action自动化部署\" class=\"headerlink\" title=\"Github Action自动化部署\"></a>Github Action自动化部署</h2>\n      <p><strong>通过Github Action，监听分支代码变化，触发自定义的任务。</strong></p>\n<p><strong>自动打包代码，镜像上传并登录云服务器执行部署脚本。</strong></p>\n\n        <h3 id=\"Github-Action\"   >\n          <a href=\"#Github-Action\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Github-Action\" class=\"headerlink\" title=\"Github Action\"></a>Github Action</h3>\n      <p>当我们想往自己的项目里接入<strong>Github Actions</strong>时，要在根项目目录里新建<code>.github/workflows</code>目录。然后通过编写<code>yml</code>格式文件定义<strong>Workflow(工作流程)去实现<code>CI</code>。<code>yml</code>文件Workflow</strong>中一些比较重要的概念：</p>\n<ul>\n<li>**Event(触发事件)**：指触发 <strong>Workflow(工作流程)</strong> 运行的事件。</li>\n<li><strong>Job(作业)<strong>：一个</strong>工作流程</strong>中包含一个或多个<strong>Job</strong>，这些<strong>Job</strong>默认情况下并行运行，但我们也可以通过设置让其按顺序执行。每个<strong>Job</strong>都在指定的环境(虚拟机或容器)里开启一个<strong>Runner</strong>(可以理解为一个进程)运行，包含多个**Step(步骤)**。</li>\n<li><strong>Step(步骤)<strong>：</strong>Job</strong>的组成部分，用于定义每一部的工作内容。每个<strong>Step</strong>在运行器环境中以其单独的进程运行，且可以访问工作区和文件系统。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27deef91333747ab8f7e09bd2649b5bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>在项目根目录创建<code>.github/workflows/deploy.yml</code>目录及文件</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: CI/CD</span><br><span class=\"line\"># 触发条件为 push</span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches:</span><br><span class=\"line\">      - master</span><br><span class=\"line\">    # 修改文件范围, 不在范围内不触发</span><br><span class=\"line\">    paths:</span><br><span class=\"line\">      - &#x27;.github/workflows/**&#x27;</span><br><span class=\"line\">      - &#x27;__test__/**&#x27;</span><br><span class=\"line\">      - &#x27;src/**&#x27;</span><br><span class=\"line\">      - &#x27;**/**&#x27;</span><br><span class=\"line\"># 任务</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  test:</span><br><span class=\"line\">    # 运行的环境</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    # 步骤</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v2 # git pull</span><br><span class=\"line\">      - name: Use Node.js</span><br><span class=\"line\">        uses: actions/setup-node@v1</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: 14</span><br><span class=\"line\">      - name: 打包镜像, 上传 Docker Hub</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          docker login -u $&#123;&#123; secrets.REGISTRY_USERNAME &#125;&#125; -p $&#123;&#123; secrets.REGISTRY_PASSWORD &#125;&#125;</span><br><span class=\"line\">          docker build -t $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125; .</span><br><span class=\"line\">          docker push $&#123;&#123; secrets.DOCKER_REPOSITORY &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: 登录服务器, 执行脚本</span><br><span class=\"line\">        uses: appleboy/ssh-action@master</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          host: $&#123;&#123; secrets.REMOTE_HOST &#125;&#125;</span><br><span class=\"line\">          username: root</span><br><span class=\"line\">          password: $&#123;&#123; secrets.REMOTE_PASSWORD &#125;&#125;</span><br><span class=\"line\">          # 执行脚本</span><br><span class=\"line\">          script: cd ~ &amp;&amp; sh deploy.sh</span><br><span class=\"line\">          </span><br></pre></td></tr></table></div></figure>\n\n<p>deploy.yml文件中的敏感信息用变量表示，在setting中可以配置变量</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddaf12fad12b43be94ea330648f2d349~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"image.png\"></p>\n<p>修改代码并提交分支，即可触发deploy.yml流程，大功告成！</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}