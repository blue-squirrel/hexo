{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/stun-logo.svg","path":"images/icons/stun-logo.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Git常用命令.md","hash":"9a061a9e329d09f501fef74619783df10832ac66","modified":1647785520311},{"_id":"source/_posts/hexo使用帮助.md","hash":"e08056869e558875b33bd75fc68910d0bcff5c95","modified":1645952083248},{"_id":"source/_posts/postman参数类型.md","hash":"9468acbcab9d103372130e9b4641d1075e72d9c2","modified":1645952062599},{"_id":"source/_posts/正则表达式.md","hash":"3fb15dc6cabb8520fac7b36f35a1226a98a7de67","modified":1645952186613},{"_id":"source/_posts/虚拟列表.md","hash":"6b7c216c7ca8c63df725f26ab37855fa9dfb24ff","modified":1646500088790},{"_id":"themes/stun/.commitlintrc.js","hash":"4d6f90e0c056abfd011315003b47debd7b352e4f","modified":1645951562851},{"_id":"themes/stun/.cz-config.js","hash":"8b2799bd6d9c9069f5e8bad48a8b349344b9992f","modified":1645951562851},{"_id":"themes/stun/.eslintrc","hash":"eb9ab913dd95b3712f19b9b1f884f8fbceb6f72e","modified":1645951562851},{"_id":"themes/stun/.editorconfig","hash":"8a427ba0adde052cb562ee790bb6b80c270fa55a","modified":1645951562851},{"_id":"themes/stun/CHANGELOG.md","hash":"d14d98eeaba868bd363a35e9783a6a11a90ac259","modified":1645951562855},{"_id":"themes/stun/.gitignore","hash":"6f961e080d4e0d167fc0459464d280d63e888195","modified":1645951562854},{"_id":"themes/stun/.prettierrc","hash":"a9a62bfb68859d94c9e8e153a6d6ab104c98dd60","modified":1645951562854},{"_id":"themes/stun/.stylintrc","hash":"5d6395f53b8f451986358a4c0326c48bb5cd5dd2","modified":1645951562854},{"_id":"themes/stun/FAQ.md","hash":"8b6ea6b1dcfb80a8702eb730095f24de475f33da","modified":1645951562855},{"_id":"themes/stun/LICENSE","hash":"0758a784b2748505aaa2298c9d3af67a1a6563ba","modified":1645951562855},{"_id":"themes/stun/README.md","hash":"01fcb582da538f8055d7d93c750dbe9cc6c969ee","modified":1645951562856},{"_id":"themes/stun/_config.yml","hash":"95bd5940c1679c0831e92527f292debd47dd4c8b","modified":1646502137970},{"_id":"themes/stun/package.json","hash":"f286c08b2c5a82dd83d92b77082ddcdeb57c5038","modified":1645951562877},{"_id":"themes/stun/README_en-US.md","hash":"3c91201d354b1ef6fbd13b64ec6f07abc83d4099","modified":1645951562856},{"_id":"themes/stun/.github/FUNDING.yml","hash":"707c2ecd695c49e608916bf8c969241622404187","modified":1645951562852},{"_id":"themes/stun/languages/en.yml","hash":"12631f9f2a7f4a814ed8a11104fbe091273376f0","modified":1645951562857},{"_id":"themes/stun/languages/es.yml","hash":"22f563f9ba8075352c7c8f771aaadf10f5ff88df","modified":1645951562857},{"_id":"themes/stun/languages/zh-CN.yml","hash":"4d7170553fa2171054fd856da9d4cb10a55f594d","modified":1645951562857},{"_id":"themes/stun/layout/archive.pug","hash":"9aa9b30e43fa14dd01f55dcdc3ba379af1e884eb","modified":1645951562873},{"_id":"themes/stun/layout/category.pug","hash":"c849ba60901506bcc1b2e8293455f45f78a0a0ad","modified":1645951562873},{"_id":"themes/stun/languages/zh-HK.yml","hash":"a47aefed5c15c763aa356fd477f23092df1f3d80","modified":1645951562857},{"_id":"themes/stun/layout/_layout.pug","hash":"edad2be4a401e995d31b7f8cac9964f2a4b460b6","modified":1645951562858},{"_id":"themes/stun/layout/page.pug","hash":"55a96c04aac274088f0641e5c8a778c2756889ac","modified":1645951562873},{"_id":"themes/stun/layout/index.pug","hash":"03287304c2614d0d4d60bc5d55266695c3b8f527","modified":1645951562873},{"_id":"themes/stun/layout/post.pug","hash":"6a27bd2c14e2ef20e4ff29d12ba9a813727c74c7","modified":1645951562874},{"_id":"themes/stun/layout/tag.pug","hash":"f26d4de2523946fff7fcfd6c701adda3c004c70e","modified":1645951562874},{"_id":"themes/stun/scripts/engine.js","hash":"41250b58e354d0500e2fffe9ad0ff9c99f534b50","modified":1645951562877},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/bug-report_en.md","hash":"c81aa8866f9d67d59af4174c79c11bc25b1dce66","modified":1645951562852},{"_id":"themes/stun/scripts/merge-config.js","hash":"65dabee746834b112b2a496c9c7d4a90e6ed4970","modified":1645951562879},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/bug-report_zh.md","hash":"4f67fa27c6f0b149680abfe57f448851b9139ea8","modified":1645951562852},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/feature-request_en.md","hash":"597b8ae27ce734681a898cdfc66182deba91fcee","modified":1645951562852},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/other_en.md","hash":"20cd29abeefe18be3a374c78e63d69570fc1f5cd","modified":1645951562853},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/feature-request_zh.md","hash":"662943353c4488450ed7ab164cdc9bd161ca1d80","modified":1645951562853},{"_id":"themes/stun/.github/ISSUE_TEMPLATE/other_zh.md","hash":"90555989a81d8c16760779c450656bd73e989f0a","modified":1645951562853},{"_id":"themes/stun/.github/workflows/codeql-analysis.yml","hash":"6f6b55946dda82dc41f24af837dc4e1d47f436bf","modified":1645951562853},{"_id":"themes/stun/.github/workflows/files-shaking.yml","hash":"a417f17f752c4be06b29b01cb3dc4c7cdfd2aea1","modified":1645951562854},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"fdb9f7ecdecba26ccafb295063990807a66f3813","modified":1645951562858},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"8c32cdbe8d5d8799d2e53bb8bd9a3fea6d060a6b","modified":1645951562859},{"_id":"themes/stun/layout/_mixins/meta-item.pug","hash":"333ad56f6fa8e93d27ae3b09ffc62269c82bca70","modified":1645951562859},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"4a76652315e5ea734ca8eef4f87a1fce91d032ab","modified":1645951562858},{"_id":"themes/stun/layout/_mixins/timeline.pug","hash":"0108c63e79bf71b9744db1ffb749adc143a9c9bb","modified":1645951562859},{"_id":"themes/stun/layout/_partials/config.pug","hash":"b7b5cc6740c6d4c2d4e97a68dd94e5f514c6adc6","modified":1645951562860},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"782bdc337a76614f3291ff159cb669e322380065","modified":1645951562866},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"9d31399baa47d599e3bd0f451004b256b6cc4254","modified":1645951562871},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"b20216a1fe3c72f9b57119c25a9952ae8ab8f605","modified":1645951562866},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1645951562896},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1645951562895},{"_id":"themes/stun/source/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1645951562895},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"edf08485d02f8f9efe902704bfabb34bb78ecd32","modified":1645951562872},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1645951562896},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1645951562896},{"_id":"themes/stun/source/css/index.styl","hash":"7abf7869aabb5f726093f4981b7a58ae2536d854","modified":1645951562895},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1645951562896},{"_id":"themes/stun/source/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1645951562897},{"_id":"themes/stun/source/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1645951562896},{"_id":"themes/stun/source/js/scroll.js","hash":"7b0342d95f7fe21e57b3ba093870f7b0bf7821a2","modified":1645951562898},{"_id":"themes/stun/source/js/header.js","hash":"efc852fd053ae6c8163f575cefc8c0a68bbf63e6","modified":1645951562898},{"_id":"themes/stun/source/js/sidebar.js","hash":"81d1b9313afcb75d4991d0f79a8bcbda49aa8129","modified":1645951562898},{"_id":"themes/stun/source/js/stun-boot.js","hash":"fb2737d595f4be58e3a4fc136c94b306942bae87","modified":1645951562899},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"3863dc2fb671c8520d8632185fb255159ec8ab47","modified":1645951562877},{"_id":"themes/stun/source/js/utils.js","hash":"df9066589273219d78353291f6db0d0be101b63b","modified":1645951562899},{"_id":"themes/stun/scripts/filters/image-setting.js","hash":"4434cb64de9bcc7f51427855ca3d49334ba19ae5","modified":1645951562878},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"c4fb7d225c095c7de0ab9fa51eaf8bac5f06ed4b","modified":1645951562878},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"b4fb3713f126b4970521ebdc71828d7b4f048322","modified":1645951562878},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"125b93da90c302b7cb21f5e58824ace5034ec496","modified":1645951562878},{"_id":"themes/stun/scripts/tags/friends.js","hash":"8a5a38437d621845f1f9749d558d457360ccfc35","modified":1645951562879},{"_id":"themes/stun/scripts/tags/note.js","hash":"fb45de53daa8bd4b2dc910ae082ee9ccf15b20d4","modified":1645951562879},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"df7a5a7b0b59da113ad8d702b42ce5da438cdae4","modified":1645951562859},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"fcd26a87a024f719d0b3920a3e1734b04ef52c1b","modified":1645951562878},{"_id":"themes/stun/scripts/tags/table.js","hash":"33120450cf9be28c9167417ea2ab8dc9bf8fc68c","modified":1645951562879},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"f1ebea686f66165294643a03252650118a09c496","modified":1645951562860},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"98a1916db8df36f5174fc4bcdc36370a16138df9","modified":1645951562861},{"_id":"themes/stun/layout/_partials/head/kill-old-ie.pug","hash":"cd384f25aba5beb774b8a010619c342c3ebfe596","modified":1645951562861},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"381afbb33e25171521eddb162ab4cbc11d76d98f","modified":1645951562861},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"258a97d25c610b2b17018951dece5f23f570cfa0","modified":1645951562862},{"_id":"themes/stun/layout/_partials/search/assist-btns.pug","hash":"549a139a4deda9989527d20cf8da330cef8cb21a","modified":1645951562862},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"178d6eee822776ad80e384442b60fd9a68d35f28","modified":1645951562863},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"7da35d4ec40dcbfb9925ad592ec8f91239d905d1","modified":1645951562862},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"85a07868967a98a4223ab41bd804ac8237ce326d","modified":1645951562863},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"871888f51bef0988b4e4a27d857689684e67f0ea","modified":1645951562863},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"07fc07a80bde44ebc6684e921c4c1a4f7787733e","modified":1645951562864},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"5ce95f71c91f4be3400c800e5dc31a820257367b","modified":1645951562864},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"273998efc25fadd7a819b055dd0414b687885827","modified":1645951562864},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"1acace606b1348eaf7a4a32b97d85a717dbe93b8","modified":1645951562864},{"_id":"themes/stun/layout/_partials/widgets/night-mode.pug","hash":"3a6175601ada6ba2ca146607571456414de965c8","modified":1645951562864},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"ffae863a4d9397f9e28790a747221b7dad6b5745","modified":1645951562865},{"_id":"themes/stun/layout/_partials/widgets/paginator.pug","hash":"4d6fef24e8cf30ac12928b4ce34e9e6caff16f9c","modified":1645951562865},{"_id":"themes/stun/layout/_partials/widgets/share.pug","hash":"77d2ded368e6c98f43d5a69f8fb286cdd601eb1f","modified":1645951562865},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"fc3d256854f27b5b6f2adc107957a23f743a4f21","modified":1645951562865},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"7820dfaf4eb1a80d12d40a9b1ee58e729d8fbbce","modified":1645951562868},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"249c8464277d6fdb7941076cea476666c25fffa5","modified":1645951562867},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"a34dbd7748a05ab1627dede1841a95c6214e835f","modified":1645951562868},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"c95cdb7b9014ac25f1cdf8dffb2ec1451d431bf4","modified":1645951562867},{"_id":"themes/stun/layout/_third-party/analytics/tencent-analytics.pug","hash":"13cac8031f634df7eaf5835eaf5157032984efdc","modified":1645951562868},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"0da6d167bf79105ae1575a2ee27f6053ce6a30da","modified":1645951562867},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"889ca81727a656b0a36d9f736f2b1aabc59e3491","modified":1645951562867},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"35196069417c027eb3c9c27dd22b1d09aa28ce4f","modified":1645951562868},{"_id":"themes/stun/layout/_third-party/comments/fbcomments.pug","hash":"d8abecfa3a205591d763f24491e9b643c156615c","modified":1645951562869},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"3fdb845f2f62533062c04a67925ebd9926f1b177","modified":1645951562869},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"772519ebddb05400e6099d51727f5e3f3f07df36","modified":1645951562869},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"0ff0832063ea7e630d30bf4ec051f5736f348022","modified":1645951562869},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"439cbadd7b87862d552d47083a4a4c367f7e5f9f","modified":1645951562870},{"_id":"themes/stun/layout/_third-party/comments/utterances.pug","hash":"753808a22eff7dca5b34aaab08d4debca583fdee","modified":1645951562870},{"_id":"themes/stun/layout/_third-party/comments/waline.pug","hash":"88a3cf35036e94cf988ee4f0321e9d794fe2e429","modified":1645951562870},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"217d4fe3a03bf85c432bb0ef5d66c3ec646bf85b","modified":1645951562871},{"_id":"themes/stun/layout/_third-party/comments/minivaline.pug","hash":"44b700fda7b498da9f255cc0a6b25f98b2b263fa","modified":1645951562870},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"9ba568a9899d21706ea8842291c7b6c9cb1ca169","modified":1645951562871},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"102bdcd972f74a53976427636506a639b48138c0","modified":1645951562872},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"3447a97c4d5711251555c18068e88dd11b6d720f","modified":1645951562871},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"178d6eee822776ad80e384442b60fd9a68d35f28","modified":1645951562872},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"c7df8230de3c127bb680239bafcc76950b6e5504","modified":1645951562873},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"aba3f8f2dec84b604985093cd65bf43770076cea","modified":1645951562894},{"_id":"themes/stun/source/css/_common/index.styl","hash":"016426a8b8363393b5b7a77ad23482b3baa46736","modified":1645951562891},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"a7672c735539c4828cd4c54a1fca28a5fc6b756e","modified":1645951562892},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"4d0757a1565936ca5ad9eed49c35c001a96af273","modified":1645951562894},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"36052025063fc923e6b4fd7660ad7ce6adee0818","modified":1645951562894},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"10316d82a91f7c218960ca7a5bf3263139c1ca3c","modified":1646500422000},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"a044fd61902531b11d681e545420896057215c85","modified":1646500422000},{"_id":"themes/stun/source/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1645951562897},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"36cbf4c963972dde6680f21064b3d69fd36828c3","modified":1645951562883},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"34cd9f24602550fb5172cf5cf61f1466e96b3037","modified":1645951562892},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"eadd5a0c5d2ba86178384b24dfd2c72effe7886e","modified":1645951562892},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"e8003f897e0ee5cd886df4402c0c28cd27d80a73","modified":1645951562893},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"d30385d3e3a68fbff0e4560c5b520d572121aa69","modified":1645951562893},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"0b06abb4739e5da44058cd5147be173e8f801cf6","modified":1645951562893},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"beafc7d7c1685ac73fa263cffae37bf699a8f269","modified":1645951562880},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"1d658ff634b2da6b8b4818ffc1084acb65a36ca8","modified":1645951562893},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"055fac810c3b76562482681d1aaa174a98234b5e","modified":1645951562881},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"2d3ff81f11520710927efd5698b5dd9b145cb3a5","modified":1645951562881},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"43676e5a64dcc6fae4031695cad116cff570513f","modified":1645951562881},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"e0bdb2e6ef1feb8a4efd9bda322277f18085023e","modified":1645951562882},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"429b41bc2c38d10df7d38c494c8ffe9fe7ad22b4","modified":1645951562882},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"660f90a9fa59ec83f4192dc603d4cc40e0fffca5","modified":1645951562882},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"ab775fefb98c48906dfd05d368b7c2f985048f3f","modified":1645951562883},{"_id":"themes/stun/source/css/_common/components/pages/timeline.styl","hash":"55e23326e31a055babc4c2db7c03591cf1b5092a","modified":1645951562884},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"84e8bef33970281e9e89500676b13b86e59ab1e8","modified":1645951562883},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"04540885ffd7c79141869f0adeef4474bd25514d","modified":1645951562884},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"8b976b58cbfb4f8b5a4c35476d745f02637b382b","modified":1645951562884},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"1e5e2ea60d3b9fcefb6b43b32ab564f9ec52ba6e","modified":1645951562884},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"04742a9f12b8b7f06b74f022cb0ea63cd6e75c45","modified":1645951562885},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"3adfb147fd1d71bcdf28ba46221145fe5616bcd6","modified":1645951562885},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"b3eaa86f013301451e46d7c2553b4f7259a51e5d","modified":1645951562885},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"50c2cd66822a001c2ad7cf6e154ea3841fca6b86","modified":1645951562886},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"cff8d1ced73a4e02aae6f0bcb68e3801acbe19d7","modified":1645951562886},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1c6c29cee4534935fa899078cd73d8fee56aa144","modified":1645951562887},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"0d94d87e37b990e89cbce6a48dfe98582d410cc8","modified":1645951562886},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"c969a0c307352b80c262c7d8ccc5a3c4b3b53b9a","modified":1645951562887},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"2fa5ec7db3c6e969628253aa226de50b72b88c74","modified":1645951562887},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"a251aaccd8e36f4335c2d9d61d21c219a9649dc4","modified":1645951562888},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"721e62acc60b8b138279ec05059ad0fcafa2d739","modified":1645951562887},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"ab24673e566e303ffb348374229a6d80c43b941a","modified":1645951562888},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"cb969ab21d4f255d05e3203d7edb01e15bcbc64a","modified":1645951562888},{"_id":"themes/stun/source/css/_common/components/widgets/ending.styl","hash":"8ef8d3a399262fa54bc5242aa79bc7c7f4a319c7","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"5a7f6546d66474fa45aac2b4789c0ddd78ab9bbf","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"d414daca2e7400dd074146437ab37a063a6f5081","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/widgets/font-icon.styl","hash":"766457aed4cdf1d2898e5b2b1302b47aa342bb78","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"124e289f660cf68219dfb09fe3cb7857228c33aa","modified":1645951562889},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"679a0ce0cd66ac8f562279153011d2d00dea4c08","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"c15af8c457531c3adc11e46e6ff35c2b05bae928","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"8b8323bf45e3b1be99f0b162b32cecc20c1964d4","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/night-mode.styl","hash":"1c8bd075913a85d45cdf693955ecc4d6959d9d5c","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/paginator.styl","hash":"4167ff6c8e9e74f98fb1ce8ce234547fc9b2d24f","modified":1645951562890},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"ddde7e7966acf313c87319a4d371a2854fbea0ca","modified":1645951562891},{"_id":"themes/stun/source/css/_common/components/widgets/share.styl","hash":"3d47efc51a13a9fd8cca6da07a7bdec14b79aefe","modified":1645951562891},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"4d9df7b1f1f8e6b08129479dd00603921c377f33","modified":1645951562891},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"638c127108f95213cfa749923d880d9e52801e8d","modified":1645951562891},{"_id":"themes/stun/package-lock.json","hash":"4b0af555aeec9a212a6b7118ff9644a19b0e096a","modified":1645951562876},{"_id":"public/2022/03/06/虚拟列表/index.html","hash":"d7625657d439f9f15d127adfdd24dd98f4086695","modified":1646670332948},{"_id":"public/2022/02/27/postman参数类型/index.html","hash":"ff249cc2aec0ca4e4961a91ad953429133a543e0","modified":1646670332948},{"_id":"public/2022/02/26/Git常用命令/index.html","hash":"4c0e6e04991a2d6e0f1f9a3b18f1e3c5c65689a4","modified":1647785524266},{"_id":"public/2022/02/06/正则表达式/index.html","hash":"59c9df7a71732725e355d7fad791bd3b50311c2d","modified":1646670332948},{"_id":"public/2022/02/06/hexo使用帮助/index.html","hash":"37df6d878982c89e0f77fc49c539fdbe702725d4","modified":1646670332948},{"_id":"public/archives/index.html","hash":"be5689e190e9a1538cb279f536571b01fbd20f33","modified":1646670444428},{"_id":"public/archives/2022/index.html","hash":"b367a8df6fcf5b212c97f71b7a8a9346a23be340","modified":1646670444428},{"_id":"public/archives/2022/02/index.html","hash":"efbf1d1592b44f517d2d8664d277b344dc767cb7","modified":1646670444428},{"_id":"public/archives/2022/03/index.html","hash":"529c878e29998952611fd73c91bfb365ff50359d","modified":1646670444428},{"_id":"public/index.html","hash":"866cefa1f52ef573ffb311dc99a24b32e74c665b","modified":1647784584842},{"_id":"public/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1646552772615},{"_id":"public/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1646552772615},{"_id":"public/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1646552772615},{"_id":"public/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1646552772615},{"_id":"public/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1646552772615},{"_id":"public/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1646552772615},{"_id":"public/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1646552772615},{"_id":"public/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1646552772615},{"_id":"public/images/icons/favicon-16x16.png","hash":"10316d82a91f7c218960ca7a5bf3263139c1ca3c","modified":1646552772615},{"_id":"public/images/icons/favicon-32x32.png","hash":"a044fd61902531b11d681e545420896057215c85","modified":1646552772615},{"_id":"public/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1646552772615},{"_id":"public/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1646552772615},{"_id":"public/js/sidebar.js","hash":"20adff7f54bcd8299d32690d41ebc7a4eb7a8728","modified":1646552772615},{"_id":"public/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1646552772615},{"_id":"public/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1646552772615},{"_id":"public/css/index.css","hash":"5887e77dd4b60723f3d98256d270e0f7ac7675ce","modified":1646552772615},{"_id":"public/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1646552772615},{"_id":"source/_posts/JS简化技巧.md","hash":"3d907cb72d5eb7c360726de9310a9d4e072bf98f","modified":1646567121805},{"_id":"public/2022/03/06/JS简化技巧/index.html","hash":"6278b042b7e20f36390e1ebc473ca252822f58b3","modified":1646670444428},{"_id":"source/_posts/HTTP2.0.md","hash":"23f113417ccf170dab0bbe0aaa86567ad51f4e8a","modified":1646670427723},{"_id":"public/2022/03/08/HTTP2.0/index.html","hash":"bb08a223511e539233bfd3d7acca75784b9edc13","modified":1646670444428}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Git常用命令","_content":"\n工作中常用到的git使用命令和技巧\n<!-- more -->\n\n## 基本命令\n\ngit add .   添加全部到暂存区\ngit commit -m \"备注信息\"    提交暂存的修改\ngit commit --am     合并提交\ngit pull    拉取代码并合入 === git fetch && git merge\ngit fetch   只拉取，不合入\ngit checkout .  放弃所有没加入暂存区的代码\n\ngithub上创建仓库\ngit remote add origin https://github.com/blue-squirrel/仓库名.git   设置远程仓库\ngit push -u origin master   推送到远程分支\n\n## 分支\n\ngit branch  列出本地分支\ngit branch -a   列出本地和远程分支\ngit branch -D 分支名    强制删除分支\ngit checkout -b 分支名 origin/分支名    拉取远程到本地\n\n## git stash 暂存\n\ngit stash   把本地的改动暂存\ngit stash save \"message\"    执行存储时，添加备注\ngit stash pop   应用最近一次暂存，并删除暂存记录\ngit stash apply     应用某个存储,但不会把删除，默认使用第一个,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} 。\ngit stash list     查看stash列表\ngit stash clear     删除所有stash\n\n## 合并前几次commit为一次\n\n![avatar](http://mms2.baidu.com/it/u=2534115628,2023806309&fm=253&app=138&f=PNG&fmt=auto&q=75?w=417&h=203)\n\ngit rebase -i <base-commit>\n\n以base-commit为基准，合并基准之后的所有commit\n\n将类似\n\npick  第一次提交\npick  第二次提交\npick  第三次提交\npick  第四次提交\n\n改成\n\npick  第一次提交\ns     第二次提交\ns     第三次提交\ns     第四次提交\n\n然后会弹出提交commit注释的编辑，保存后会保留注释并合并成一条\n\n## git rebase\n\n![avatar](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7db69f93ee440a8a5b9b62dd68668c~tplv-k3u1fbpfcp-watermark.awebp)\n\n### 拉取远程的新代码\n\ngit pull --rebase\n\nrebase 会将两个分支进行合并，同时合并之前的 commit 历史。如果出现冲突，解决冲突后执行以下命令即可：\n\ngit add\ngit rebase --continue   继续变基\n\n### 公共代码库提交PR，拉取新代码\n\ngit pull --rebase upstream master\n\n修改后 git add . && git commit -m \"\"\n\ngit push -f 即可\n","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git常用命令\n---\n\n工作中常用到的git使用命令和技巧\n<!-- more -->\n\n## 基本命令\n\ngit add .   添加全部到暂存区\ngit commit -m \"备注信息\"    提交暂存的修改\ngit commit --am     合并提交\ngit pull    拉取代码并合入 === git fetch && git merge\ngit fetch   只拉取，不合入\ngit checkout .  放弃所有没加入暂存区的代码\n\ngithub上创建仓库\ngit remote add origin https://github.com/blue-squirrel/仓库名.git   设置远程仓库\ngit push -u origin master   推送到远程分支\n\n## 分支\n\ngit branch  列出本地分支\ngit branch -a   列出本地和远程分支\ngit branch -D 分支名    强制删除分支\ngit checkout -b 分支名 origin/分支名    拉取远程到本地\n\n## git stash 暂存\n\ngit stash   把本地的改动暂存\ngit stash save \"message\"    执行存储时，添加备注\ngit stash pop   应用最近一次暂存，并删除暂存记录\ngit stash apply     应用某个存储,但不会把删除，默认使用第一个,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} 。\ngit stash list     查看stash列表\ngit stash clear     删除所有stash\n\n## 合并前几次commit为一次\n\n![avatar](http://mms2.baidu.com/it/u=2534115628,2023806309&fm=253&app=138&f=PNG&fmt=auto&q=75?w=417&h=203)\n\ngit rebase -i <base-commit>\n\n以base-commit为基准，合并基准之后的所有commit\n\n将类似\n\npick  第一次提交\npick  第二次提交\npick  第三次提交\npick  第四次提交\n\n改成\n\npick  第一次提交\ns     第二次提交\ns     第三次提交\ns     第四次提交\n\n然后会弹出提交commit注释的编辑，保存后会保留注释并合并成一条\n\n## git rebase\n\n![avatar](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7db69f93ee440a8a5b9b62dd68668c~tplv-k3u1fbpfcp-watermark.awebp)\n\n### 拉取远程的新代码\n\ngit pull --rebase\n\nrebase 会将两个分支进行合并，同时合并之前的 commit 历史。如果出现冲突，解决冲突后执行以下命令即可：\n\ngit add\ngit rebase --continue   继续变基\n\n### 公共代码库提交PR，拉取新代码\n\ngit pull --rebase upstream master\n\n修改后 git add . && git commit -m \"\"\n\ngit push -f 即可\n","slug":"Git常用命令","published":1,"date":"2022-02-26T13:32:07.114Z","updated":"2022-03-20T14:12:00.311Z","_id":"cl0ez0azp0000aottagiygpe0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>工作中常用到的git使用命令和技巧</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"基本命令\"   >\n          <a href=\"#基本命令\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2>\n      <p>git add .   添加全部到暂存区<br>git commit -m “备注信息”    提交暂存的修改<br>git commit –am     合并提交<br>git pull    拉取代码并合入 &#x3D;&#x3D;&#x3D; git fetch &amp;&amp; git merge<br>git fetch   只拉取，不合入<br>git checkout .  放弃所有没加入暂存区的代码</p>\n<p>github上创建仓库<br>git remote add origin <span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://github.com/blue-squirrel/%E4%BB%93%E5%BA%93%E5%90%8D.git\" >https://github.com/blue-squirrel/仓库名.git</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>   设置远程仓库<br>git push -u origin master   推送到远程分支</p>\n\n        <h2 id=\"分支\"   >\n          <a href=\"#分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2>\n      <p>git branch  列出本地分支<br>git branch -a   列出本地和远程分支<br>git branch -D 分支名    强制删除分支<br>git checkout -b 分支名 origin&#x2F;分支名    拉取远程到本地</p>\n\n        <h2 id=\"git-stash-暂存\"   >\n          <a href=\"#git-stash-暂存\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#git-stash-暂存\" class=\"headerlink\" title=\"git stash 暂存\"></a>git stash 暂存</h2>\n      <p>git stash   把本地的改动暂存<br>git stash save “message”    执行存储时，添加备注<br>git stash pop   应用最近一次暂存，并删除暂存记录<br>git stash apply     应用某个存储,但不会把删除，默认使用第一个,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} 。<br>git stash list     查看stash列表<br>git stash clear     删除所有stash</p>\n\n        <h2 id=\"合并前几次commit为一次\"   >\n          <a href=\"#合并前几次commit为一次\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#合并前几次commit为一次\" class=\"headerlink\" title=\"合并前几次commit为一次\"></a>合并前几次commit为一次</h2>\n      <p><img   src=\"http://mms2.baidu.com/it/u=2534115628,2023806309&fm=253&app=138&f=PNG&fmt=auto&q=75?w=417&h=203\" style=\"\"  alt=\"avatar\"></p>\n<p>git rebase -i <base-commit></p>\n<p>以base-commit为基准，合并基准之后的所有commit</p>\n<p>将类似</p>\n<p>pick  第一次提交<br>pick  第二次提交<br>pick  第三次提交<br>pick  第四次提交</p>\n<p>改成</p>\n<p>pick  第一次提交<br>s     第二次提交<br>s     第三次提交<br>s     第四次提交</p>\n<p>然后会弹出提交commit注释的编辑，保存后会保留注释并合并成一条</p>\n\n        <h2 id=\"git-rebase\"   >\n          <a href=\"#git-rebase\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2>\n      <p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7db69f93ee440a8a5b9b62dd68668c~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"avatar\"></p>\n\n        <h3 id=\"拉取远程的新代码\"   >\n          <a href=\"#拉取远程的新代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#拉取远程的新代码\" class=\"headerlink\" title=\"拉取远程的新代码\"></a>拉取远程的新代码</h3>\n      <p>git pull –rebase</p>\n<p>rebase 会将两个分支进行合并，同时合并之前的 commit 历史。如果出现冲突，解决冲突后执行以下命令即可：</p>\n<p>git add<br>git rebase –continue   继续变基</p>\n\n        <h3 id=\"公共代码库提交PR，拉取新代码\"   >\n          <a href=\"#公共代码库提交PR，拉取新代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#公共代码库提交PR，拉取新代码\" class=\"headerlink\" title=\"公共代码库提交PR，拉取新代码\"></a>公共代码库提交PR，拉取新代码</h3>\n      <p>git pull –rebase upstream master</p>\n<p>修改后 git add . &amp;&amp; git commit -m “”</p>\n<p>git push -f 即可</p>\n","site":{"data":{}},"excerpt":"<p>工作中常用到的git使用命令和技巧</p>","more":"<h2 id=\"基本命令\"   >\n          <a href=\"#基本命令\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2>\n      <p>git add .   添加全部到暂存区<br>git commit -m “备注信息”    提交暂存的修改<br>git commit –am     合并提交<br>git pull    拉取代码并合入 &#x3D;&#x3D;&#x3D; git fetch &amp;&amp; git merge<br>git fetch   只拉取，不合入<br>git checkout .  放弃所有没加入暂存区的代码</p>\n<p>github上创建仓库<br>git remote add origin <span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://github.com/blue-squirrel/%E4%BB%93%E5%BA%93%E5%90%8D.git\" >https://github.com/blue-squirrel/仓库名.git</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>   设置远程仓库<br>git push -u origin master   推送到远程分支</p>\n\n        <h2 id=\"分支\"   >\n          <a href=\"#分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2>\n      <p>git branch  列出本地分支<br>git branch -a   列出本地和远程分支<br>git branch -D 分支名    强制删除分支<br>git checkout -b 分支名 origin&#x2F;分支名    拉取远程到本地</p>\n\n        <h2 id=\"git-stash-暂存\"   >\n          <a href=\"#git-stash-暂存\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#git-stash-暂存\" class=\"headerlink\" title=\"git stash 暂存\"></a>git stash 暂存</h2>\n      <p>git stash   把本地的改动暂存<br>git stash save “message”    执行存储时，添加备注<br>git stash pop   应用最近一次暂存，并删除暂存记录<br>git stash apply     应用某个存储,但不会把删除，默认使用第一个,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} 。<br>git stash list     查看stash列表<br>git stash clear     删除所有stash</p>\n\n        <h2 id=\"合并前几次commit为一次\"   >\n          <a href=\"#合并前几次commit为一次\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#合并前几次commit为一次\" class=\"headerlink\" title=\"合并前几次commit为一次\"></a>合并前几次commit为一次</h2>\n      <p><img   src=\"http://mms2.baidu.com/it/u=2534115628,2023806309&fm=253&app=138&f=PNG&fmt=auto&q=75?w=417&h=203\" style=\"\"  alt=\"avatar\"></p>\n<p>git rebase -i <base-commit></p>\n<p>以base-commit为基准，合并基准之后的所有commit</p>\n<p>将类似</p>\n<p>pick  第一次提交<br>pick  第二次提交<br>pick  第三次提交<br>pick  第四次提交</p>\n<p>改成</p>\n<p>pick  第一次提交<br>s     第二次提交<br>s     第三次提交<br>s     第四次提交</p>\n<p>然后会弹出提交commit注释的编辑，保存后会保留注释并合并成一条</p>\n\n        <h2 id=\"git-rebase\"   >\n          <a href=\"#git-rebase\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#git-rebase\" class=\"headerlink\" title=\"git rebase\"></a>git rebase</h2>\n      <p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7db69f93ee440a8a5b9b62dd68668c~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"avatar\"></p>\n\n        <h3 id=\"拉取远程的新代码\"   >\n          <a href=\"#拉取远程的新代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#拉取远程的新代码\" class=\"headerlink\" title=\"拉取远程的新代码\"></a>拉取远程的新代码</h3>\n      <p>git pull –rebase</p>\n<p>rebase 会将两个分支进行合并，同时合并之前的 commit 历史。如果出现冲突，解决冲突后执行以下命令即可：</p>\n<p>git add<br>git rebase –continue   继续变基</p>\n\n        <h3 id=\"公共代码库提交PR，拉取新代码\"   >\n          <a href=\"#公共代码库提交PR，拉取新代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#公共代码库提交PR，拉取新代码\" class=\"headerlink\" title=\"公共代码库提交PR，拉取新代码\"></a>公共代码库提交PR，拉取新代码</h3>\n      <p>git pull –rebase upstream master</p>\n<p>修改后 git add . &amp;&amp; git commit -m “”</p>\n<p>git push -f 即可</p>"},{"title":"hexo使用帮助","_content":"\n## Quick Start\n\n### 创建静态文件\n\n``` bash\n$ hexo g\n```\n\n### 部署到git\n\n``` bash\n$ hexo d\n```\n\n### 切换主题时，清空缓存\n\n``` bash\n$ hexo clean\n```\n","source":"_posts/hexo使用帮助.md","raw":"---\ntitle: hexo使用帮助\n---\n\n## Quick Start\n\n### 创建静态文件\n\n``` bash\n$ hexo g\n```\n\n### 部署到git\n\n``` bash\n$ hexo d\n```\n\n### 切换主题时，清空缓存\n\n``` bash\n$ hexo clean\n```\n","slug":"hexo使用帮助","published":1,"date":"2022-02-05T16:56:28.666Z","updated":"2022-02-27T08:54:43.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0ez0azu0001aott140j5vh7","content":"\n        <h2 id=\"Quick-Start\"   >\n          <a href=\"#Quick-Start\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2>\n      \n        <h3 id=\"创建静态文件\"   >\n          <a href=\"#创建静态文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#创建静态文件\" class=\"headerlink\" title=\"创建静态文件\"></a>创建静态文件</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"部署到git\"   >\n          <a href=\"#部署到git\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#部署到git\" class=\"headerlink\" title=\"部署到git\"></a>部署到git</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"切换主题时，清空缓存\"   >\n          <a href=\"#切换主题时，清空缓存\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#切换主题时，清空缓存\" class=\"headerlink\" title=\"切换主题时，清空缓存\"></a>切换主题时，清空缓存</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></div></figure>\n","site":{"data":{}},"excerpt":"","more":"\n        <h2 id=\"Quick-Start\"   >\n          <a href=\"#Quick-Start\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2>\n      \n        <h3 id=\"创建静态文件\"   >\n          <a href=\"#创建静态文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#创建静态文件\" class=\"headerlink\" title=\"创建静态文件\"></a>创建静态文件</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"部署到git\"   >\n          <a href=\"#部署到git\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#部署到git\" class=\"headerlink\" title=\"部署到git\"></a>部署到git</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"切换主题时，清空缓存\"   >\n          <a href=\"#切换主题时，清空缓存\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#切换主题时，清空缓存\" class=\"headerlink\" title=\"切换主题时，清空缓存\"></a>切换主题时，清空缓存</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></div></figure>\n"},{"title":"postman参数类型","_content":"\npostman软件中的四种请求类型\n<!-- more -->\n\n# postman中 form-data、x-www-form-urlencoded、raw、binary的区别\n\n### form-data\n\n![avatar](https://img-blog.csdn.net/20151118130933756?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n就是http请求中的multipart/form-data,它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。\n既可以上传键值对，也可以上传文件。\n当上传的字段是文件时，会有Content-Type来说明文件类型；content-disposition，用来说明字段的一些信息；\n\n由于有boundary隔离，所以multipart/form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。\n\n### x-www-form-urlencoded\n\n![avatar](https://img-blog.csdn.net/20151118131219584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n就是application/x-www-from-urlencoded,会将表单内的数据转换为键值对，&分隔。\n当form的action为get时，浏览器用x-www-form-urlencoded的编码方式，将表单数据编码为(name1=value1&name2=value2…)，然后把这个字符串append到url后面，用?分隔，跳转到这个新的url。\n\n当form的action为post时，浏览器将form数据封装到http body中，然后发送到server。\n\n这个格式不能提交文件。\n\n### raw\n\n可以上传任意格式的文本，可以上传text、json、xml、html等\n\n### binary\n\n相当于Content-Type:application/octet-stream,从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以，一次只能上传一个文件。\n\n## multipart/form-data与x-www-form-urlencoded区别\n\nmultipart/form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；\n\nx-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。\n","source":"_posts/postman参数类型.md","raw":"---\ntitle: postman参数类型\n---\n\npostman软件中的四种请求类型\n<!-- more -->\n\n# postman中 form-data、x-www-form-urlencoded、raw、binary的区别\n\n### form-data\n\n![avatar](https://img-blog.csdn.net/20151118130933756?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n就是http请求中的multipart/form-data,它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。\n既可以上传键值对，也可以上传文件。\n当上传的字段是文件时，会有Content-Type来说明文件类型；content-disposition，用来说明字段的一些信息；\n\n由于有boundary隔离，所以multipart/form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。\n\n### x-www-form-urlencoded\n\n![avatar](https://img-blog.csdn.net/20151118131219584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n就是application/x-www-from-urlencoded,会将表单内的数据转换为键值对，&分隔。\n当form的action为get时，浏览器用x-www-form-urlencoded的编码方式，将表单数据编码为(name1=value1&name2=value2…)，然后把这个字符串append到url后面，用?分隔，跳转到这个新的url。\n\n当form的action为post时，浏览器将form数据封装到http body中，然后发送到server。\n\n这个格式不能提交文件。\n\n### raw\n\n可以上传任意格式的文本，可以上传text、json、xml、html等\n\n### binary\n\n相当于Content-Type:application/octet-stream,从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以，一次只能上传一个文件。\n\n## multipart/form-data与x-www-form-urlencoded区别\n\nmultipart/form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；\n\nx-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。\n","slug":"postman参数类型","published":1,"date":"2022-02-27T05:50:16.640Z","updated":"2022-02-27T08:54:22.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0ez0azw0002aott82ik9rzh","content":"<p>postman软件中的四种请求类型</p>\n<span id=\"more\"></span>\n\n\n        <h1 id=\"postman中-form-data、x-www-form-urlencoded、raw、binary的区别\"   >\n          <a href=\"#postman中-form-data、x-www-form-urlencoded、raw、binary的区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#postman中-form-data、x-www-form-urlencoded、raw、binary的区别\" class=\"headerlink\" title=\"postman中 form-data、x-www-form-urlencoded、raw、binary的区别\"></a>postman中 form-data、x-www-form-urlencoded、raw、binary的区别</h1>\n      \n        <h3 id=\"form-data\"   >\n          <a href=\"#form-data\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#form-data\" class=\"headerlink\" title=\"form-data\"></a>form-data</h3>\n      <p><img   src=\"https://img-blog.csdn.net/20151118130933756?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" style=\"\"  alt=\"avatar\"></p>\n<p>就是http请求中的multipart&#x2F;form-data,它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。<br>既可以上传键值对，也可以上传文件。<br>当上传的字段是文件时，会有Content-Type来说明文件类型；content-disposition，用来说明字段的一些信息；</p>\n<p>由于有boundary隔离，所以multipart&#x2F;form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。</p>\n\n        <h3 id=\"x-www-form-urlencoded\"   >\n          <a href=\"#x-www-form-urlencoded\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#x-www-form-urlencoded\" class=\"headerlink\" title=\"x-www-form-urlencoded\"></a>x-www-form-urlencoded</h3>\n      <p><img   src=\"https://img-blog.csdn.net/20151118131219584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" style=\"\"  alt=\"avatar\"></p>\n<p>就是application&#x2F;x-www-from-urlencoded,会将表单内的数据转换为键值对，&amp;分隔。<br>当form的action为get时，浏览器用x-www-form-urlencoded的编码方式，将表单数据编码为(name1&#x3D;value1&amp;name2&#x3D;value2…)，然后把这个字符串append到url后面，用?分隔，跳转到这个新的url。</p>\n<p>当form的action为post时，浏览器将form数据封装到http body中，然后发送到server。</p>\n<p>这个格式不能提交文件。</p>\n\n        <h3 id=\"raw\"   >\n          <a href=\"#raw\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#raw\" class=\"headerlink\" title=\"raw\"></a>raw</h3>\n      <p>可以上传任意格式的文本，可以上传text、json、xml、html等</p>\n\n        <h3 id=\"binary\"   >\n          <a href=\"#binary\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#binary\" class=\"headerlink\" title=\"binary\"></a>binary</h3>\n      <p>相当于Content-Type:application&#x2F;octet-stream,从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以，一次只能上传一个文件。</p>\n\n        <h2 id=\"multipart-x2F-form-data与x-www-form-urlencoded区别\"   >\n          <a href=\"#multipart-x2F-form-data与x-www-form-urlencoded区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#multipart-x2F-form-data与x-www-form-urlencoded区别\" class=\"headerlink\" title=\"multipart&#x2F;form-data与x-www-form-urlencoded区别\"></a>multipart&#x2F;form-data与x-www-form-urlencoded区别</h2>\n      <p>multipart&#x2F;form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；</p>\n<p>x-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。</p>\n","site":{"data":{}},"excerpt":"<p>postman软件中的四种请求类型</p>","more":"<h1 id=\"postman中-form-data、x-www-form-urlencoded、raw、binary的区别\"   >\n          <a href=\"#postman中-form-data、x-www-form-urlencoded、raw、binary的区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#postman中-form-data、x-www-form-urlencoded、raw、binary的区别\" class=\"headerlink\" title=\"postman中 form-data、x-www-form-urlencoded、raw、binary的区别\"></a>postman中 form-data、x-www-form-urlencoded、raw、binary的区别</h1>\n      \n        <h3 id=\"form-data\"   >\n          <a href=\"#form-data\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#form-data\" class=\"headerlink\" title=\"form-data\"></a>form-data</h3>\n      <p><img   src=\"https://img-blog.csdn.net/20151118130933756?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" style=\"\"  alt=\"avatar\"></p>\n<p>就是http请求中的multipart&#x2F;form-data,它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开。<br>既可以上传键值对，也可以上传文件。<br>当上传的字段是文件时，会有Content-Type来说明文件类型；content-disposition，用来说明字段的一些信息；</p>\n<p>由于有boundary隔离，所以multipart&#x2F;form-data既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。</p>\n\n        <h3 id=\"x-www-form-urlencoded\"   >\n          <a href=\"#x-www-form-urlencoded\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#x-www-form-urlencoded\" class=\"headerlink\" title=\"x-www-form-urlencoded\"></a>x-www-form-urlencoded</h3>\n      <p><img   src=\"https://img-blog.csdn.net/20151118131219584?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" style=\"\"  alt=\"avatar\"></p>\n<p>就是application&#x2F;x-www-from-urlencoded,会将表单内的数据转换为键值对，&amp;分隔。<br>当form的action为get时，浏览器用x-www-form-urlencoded的编码方式，将表单数据编码为(name1&#x3D;value1&amp;name2&#x3D;value2…)，然后把这个字符串append到url后面，用?分隔，跳转到这个新的url。</p>\n<p>当form的action为post时，浏览器将form数据封装到http body中，然后发送到server。</p>\n<p>这个格式不能提交文件。</p>\n\n        <h3 id=\"raw\"   >\n          <a href=\"#raw\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#raw\" class=\"headerlink\" title=\"raw\"></a>raw</h3>\n      <p>可以上传任意格式的文本，可以上传text、json、xml、html等</p>\n\n        <h3 id=\"binary\"   >\n          <a href=\"#binary\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#binary\" class=\"headerlink\" title=\"binary\"></a>binary</h3>\n      <p>相当于Content-Type:application&#x2F;octet-stream,从字面意思得知，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以，一次只能上传一个文件。</p>\n\n        <h2 id=\"multipart-x2F-form-data与x-www-form-urlencoded区别\"   >\n          <a href=\"#multipart-x2F-form-data与x-www-form-urlencoded区别\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#multipart-x2F-form-data与x-www-form-urlencoded区别\" class=\"headerlink\" title=\"multipart&#x2F;form-data与x-www-form-urlencoded区别\"></a>multipart&#x2F;form-data与x-www-form-urlencoded区别</h2>\n      <p>multipart&#x2F;form-data：既可以上传文件等二进制数据，也可以上传表单键值对，只是最后会转化为一条信息；</p>\n<p>x-www-form-urlencoded：只能上传键值对，并且键值对都是间隔分开的。</p>"},{"title":"正则表达式","_content":"\n了解一下常用的正则表达式语法吧~\n<!-- more -->\n\n# 一个正则表达式\n`/^a?b+c*\\d\\D\\w[0-9a-zA-Z_]{1,8}$/ig`\n\n# 语法\n\n| single char | quantifiers(数量) | position(位置) |\n| --- | --- | --- |\n| \\d 匹配数字 | * 0个或者更多 | ^ 一行的开头 |\n| \\D 匹配非数字 | + 1个或更多，至少1个 | $ 一行的结尾 |\n| \\w 匹配word(数字、字母、下划线) | ? 0个或1个,一个Optional | \\b 单词\"结界\"(word bounds) |\n| \\W 匹配非word(数字、字母、下划线) | {min,max}出现次数在一个范围内 |  |\n| \\s 匹配white space(包括空格、tab等) | {n}匹配出现n次的 |  |\n| \\S 匹配非white space(包括空格、tab等) |  |  |\n| . 匹配任何，任何的字符 |  |  |\n\n### 贪婪匹配和惰性匹配\n贪婪匹配：匹配时尽可能多的匹配\n\n```\nvar regex = /\\d{2,5}/g;\nvar string = \"123 1234 12345 123456\";\nconsole.log( string.match(regex) ); \n// => [\"123\", \"1234\", \"12345\", \"12345\"]\n```\n惰性匹配：尽可能少的匹配\n\n```\nvar regex = /\\d{2,5}?/g;\nvar string = \"123 1234 12345 123456\";\nconsole.log( string.match(regex) ); \n// => [\"12\", \"12\", \"34\", \"12\", \"34\", \"12\", \"34\", \"56\"]\n```\n其中/\\d{2,5}?/表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。\n\n### 多选分支\n(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。\n要匹配\"good\"和\"nice\"可以使用/good|nice/\n\n```\nvar regex = /good|nice/g;\nvar string = \"good idea, nice try.\";\nconsole.log( string.match(regex) ); \n// => [\"good\", \"nice\"]\n```\n\n### 单词边界\n\n```\nThe cat scattered his food all over the room.\n```\n只是使用 /cat/ 这个正则，就会同时匹配到cat和scattered这两处文本。改写成 /\\bcat\\b/ 这样就能匹配到cat这个单词了。\n","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式\n---\n\n了解一下常用的正则表达式语法吧~\n<!-- more -->\n\n# 一个正则表达式\n`/^a?b+c*\\d\\D\\w[0-9a-zA-Z_]{1,8}$/ig`\n\n# 语法\n\n| single char | quantifiers(数量) | position(位置) |\n| --- | --- | --- |\n| \\d 匹配数字 | * 0个或者更多 | ^ 一行的开头 |\n| \\D 匹配非数字 | + 1个或更多，至少1个 | $ 一行的结尾 |\n| \\w 匹配word(数字、字母、下划线) | ? 0个或1个,一个Optional | \\b 单词\"结界\"(word bounds) |\n| \\W 匹配非word(数字、字母、下划线) | {min,max}出现次数在一个范围内 |  |\n| \\s 匹配white space(包括空格、tab等) | {n}匹配出现n次的 |  |\n| \\S 匹配非white space(包括空格、tab等) |  |  |\n| . 匹配任何，任何的字符 |  |  |\n\n### 贪婪匹配和惰性匹配\n贪婪匹配：匹配时尽可能多的匹配\n\n```\nvar regex = /\\d{2,5}/g;\nvar string = \"123 1234 12345 123456\";\nconsole.log( string.match(regex) ); \n// => [\"123\", \"1234\", \"12345\", \"12345\"]\n```\n惰性匹配：尽可能少的匹配\n\n```\nvar regex = /\\d{2,5}?/g;\nvar string = \"123 1234 12345 123456\";\nconsole.log( string.match(regex) ); \n// => [\"12\", \"12\", \"34\", \"12\", \"34\", \"12\", \"34\", \"56\"]\n```\n其中/\\d{2,5}?/表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。\n\n### 多选分支\n(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。\n要匹配\"good\"和\"nice\"可以使用/good|nice/\n\n```\nvar regex = /good|nice/g;\nvar string = \"good idea, nice try.\";\nconsole.log( string.match(regex) ); \n// => [\"good\", \"nice\"]\n```\n\n### 单词边界\n\n```\nThe cat scattered his food all over the room.\n```\n只是使用 /cat/ 这个正则，就会同时匹配到cat和scattered这两处文本。改写成 /\\bcat\\b/ 这样就能匹配到cat这个单词了。\n","slug":"正则表达式","published":1,"date":"2022-02-05T18:44:02.608Z","updated":"2022-02-27T08:56:26.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0ez0azx0003aott5f972tmx","content":"<p>了解一下常用的正则表达式语法吧~</p>\n<span id=\"more\"></span>\n\n\n        <h1 id=\"一个正则表达式\"   >\n          <a href=\"#一个正则表达式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一个正则表达式\" class=\"headerlink\" title=\"一个正则表达式\"></a>一个正则表达式</h1>\n      <p><code>/^a?b+c*\\d\\D\\w[0-9a-zA-Z_]&#123;1,8&#125;$/ig</code></p>\n\n        <h1 id=\"语法\"   >\n          <a href=\"#语法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1>\n      <div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>single char</th>\n<th>quantifiers(数量)</th>\n<th>position(位置)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\d 匹配数字</td>\n<td>* 0个或者更多</td>\n<td>^ 一行的开头</td>\n</tr>\n<tr>\n<td>\\D 匹配非数字</td>\n<td>+ 1个或更多，至少1个</td>\n<td>$ 一行的结尾</td>\n</tr>\n<tr>\n<td>\\w 匹配word(数字、字母、下划线)</td>\n<td>? 0个或1个,一个Optional</td>\n<td>\\b 单词”结界”(word bounds)</td>\n</tr>\n<tr>\n<td>\\W 匹配非word(数字、字母、下划线)</td>\n<td>{min,max}出现次数在一个范围内</td>\n<td></td>\n</tr>\n<tr>\n<td>\\s 匹配white space(包括空格、tab等)</td>\n<td>{n}匹配出现n次的</td>\n<td></td>\n</tr>\n<tr>\n<td>\\S 匹配非white space(包括空格、tab等)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>. 匹配任何，任何的字符</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"贪婪匹配和惰性匹配\"   >\n          <a href=\"#贪婪匹配和惰性匹配\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#贪婪匹配和惰性匹配\" class=\"headerlink\" title=\"贪婪匹配和惰性匹配\"></a>贪婪匹配和惰性匹配</h3>\n      <p>贪婪匹配：匹配时尽可能多的匹配</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /\\d&#123;2,5&#125;/g;</span><br><span class=\"line\">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>惰性匹配：尽可能少的匹配</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /\\d&#123;2,5&#125;?/g;</span><br><span class=\"line\">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>其中&#x2F;\\d{2,5}?&#x2F;表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p>\n\n        <h3 id=\"多选分支\"   >\n          <a href=\"#多选分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多选分支\" class=\"headerlink\" title=\"多选分支\"></a>多选分支</h3>\n      <p>(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。<br>要匹配”good”和”nice”可以使用&#x2F;good|nice&#x2F;</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /good|nice/g;</span><br><span class=\"line\">var string = &quot;good idea, nice try.&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;good&quot;, &quot;nice&quot;]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"单词边界\"   >\n          <a href=\"#单词边界\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单词边界\" class=\"headerlink\" title=\"单词边界\"></a>单词边界</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The cat scattered his food all over the room.</span><br></pre></td></tr></table></div></figure>\n<p>只是使用 &#x2F;cat&#x2F; 这个正则，就会同时匹配到cat和scattered这两处文本。改写成 &#x2F;\\bcat\\b&#x2F; 这样就能匹配到cat这个单词了。</p>\n","site":{"data":{}},"excerpt":"<p>了解一下常用的正则表达式语法吧~</p>","more":"<h1 id=\"一个正则表达式\"   >\n          <a href=\"#一个正则表达式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#一个正则表达式\" class=\"headerlink\" title=\"一个正则表达式\"></a>一个正则表达式</h1>\n      <p><code>/^a?b+c*\\d\\D\\w[0-9a-zA-Z_]&#123;1,8&#125;$/ig</code></p>\n\n        <h1 id=\"语法\"   >\n          <a href=\"#语法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1>\n      <div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>single char</th>\n<th>quantifiers(数量)</th>\n<th>position(位置)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\d 匹配数字</td>\n<td>* 0个或者更多</td>\n<td>^ 一行的开头</td>\n</tr>\n<tr>\n<td>\\D 匹配非数字</td>\n<td>+ 1个或更多，至少1个</td>\n<td>$ 一行的结尾</td>\n</tr>\n<tr>\n<td>\\w 匹配word(数字、字母、下划线)</td>\n<td>? 0个或1个,一个Optional</td>\n<td>\\b 单词”结界”(word bounds)</td>\n</tr>\n<tr>\n<td>\\W 匹配非word(数字、字母、下划线)</td>\n<td>{min,max}出现次数在一个范围内</td>\n<td></td>\n</tr>\n<tr>\n<td>\\s 匹配white space(包括空格、tab等)</td>\n<td>{n}匹配出现n次的</td>\n<td></td>\n</tr>\n<tr>\n<td>\\S 匹配非white space(包括空格、tab等)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>. 匹配任何，任何的字符</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"贪婪匹配和惰性匹配\"   >\n          <a href=\"#贪婪匹配和惰性匹配\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#贪婪匹配和惰性匹配\" class=\"headerlink\" title=\"贪婪匹配和惰性匹配\"></a>贪婪匹配和惰性匹配</h3>\n      <p>贪婪匹配：匹配时尽可能多的匹配</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /\\d&#123;2,5&#125;/g;</span><br><span class=\"line\">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;12345&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>惰性匹配：尽可能少的匹配</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /\\d&#123;2,5&#125;?/g;</span><br><span class=\"line\">var string = &quot;123 1234 12345 123456&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;12&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span><br></pre></td></tr></table></div></figure>\n<p>其中&#x2F;\\d{2,5}?&#x2F;表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p>\n\n        <h3 id=\"多选分支\"   >\n          <a href=\"#多选分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多选分支\" class=\"headerlink\" title=\"多选分支\"></a>多选分支</h3>\n      <p>(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。<br>要匹配”good”和”nice”可以使用&#x2F;good|nice&#x2F;</p>\n<figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regex = /good|nice/g;</span><br><span class=\"line\">var string = &quot;good idea, nice try.&quot;;</span><br><span class=\"line\">console.log( string.match(regex) ); </span><br><span class=\"line\">// =&gt; [&quot;good&quot;, &quot;nice&quot;]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"单词边界\"   >\n          <a href=\"#单词边界\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单词边界\" class=\"headerlink\" title=\"单词边界\"></a>单词边界</h3>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The cat scattered his food all over the room.</span><br></pre></td></tr></table></div></figure>\n<p>只是使用 &#x2F;cat&#x2F; 这个正则，就会同时匹配到cat和scattered这两处文本。改写成 &#x2F;\\bcat\\b&#x2F; 这样就能匹配到cat这个单词了。</p>"},{"title":"虚拟列表","_content":"\n进行大量列表的渲染时，过多的DOM元素需要消耗大量的性能，这时使用虚拟列表是个不错的选择！\n<!-- more -->\n\n## 什么是虚拟列表\n\n**虚拟列表**其实是按需显示的一种实现，即只对**可见区域**进行渲染，对**非可见区域**中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。\n\n假设有1万条记录需要同时渲染，我们屏幕的**可见区域**的高度为**500px**,而列表项的高度为**50px**，则此时我们在屏幕中最多只能看到10个列表项。\n\n假设滚动发生，滚动条距顶部的位置为**150px**,则我们可得知在**可见区域**内的列表项为**第4项**至**第13项**。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-watermark.awebp)\n\n## 实现\n\n```\n<div class=\"infinite-list-container\">\n    <div class=\"infinite-list-phantom\"></div>\n    <div class=\"infinite-list\">\n      <!-- item-1 -->\n      <!-- item-2 -->\n      <!-- ...... -->\n      <!-- item-n -->\n    </div>\n</div>\n```\n\n\n1. 设置占位容器，用于撑起滚动条。infinite-list-phantom 为容器内的占位。\n2. 渲染屏幕内能够容纳的元素，根据索引对总数据进行截取。infinite-list 为列表项的渲染区域\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-watermark.awebp)\n\n1. 计算当前可视区域**起始数据索引****startIndex**\n2. 计算当前可视区域**结束数据索引****endIndex**\n3. 计算**当前可视区域的数据**，并渲染到页面中\n4. 计算**startIndex**对应的数据在整个列表中的**偏移位置startOffset**并设置到列表上\n\n\n\n- 列表总高度listHeight = listData.length * itemSize\n- 可显示的列表项数visibleCount = Math.ceil(screenHeight / itemSize)，数量为(500 / 50) + 1，**多一个偏移项**。\n- 数据的起始索引startIndex = Math.floor(scrollTop / itemSize)\n- 数据的结束索引endIndex = startIndex + visibleCount，最大为数据总长度。\n- 列表显示数据为visibleData = listData.slice(startIndex,endIndex)\n\n当滚动后，由于渲染区域相对于可视区域已经发生了偏移，此时我需要获取一个偏移量startOffset，通过**样式控制**将渲染区域偏移至可视区域中。\n\n- 偏移量startOffset = scrollTop - (scrollTop % itemSize);不超过一个，不用偏移，超过一个，偏移超过的floor值。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-watermark.awebp)\n\n\n\n监听容器内的滚动事件，不断的对上面的数据进行重新赋值即可。\n\n以上思路仅适用于固定高度列表。","source":"_posts/虚拟列表.md","raw":"---\ntitle: 虚拟列表\n---\n\n进行大量列表的渲染时，过多的DOM元素需要消耗大量的性能，这时使用虚拟列表是个不错的选择！\n<!-- more -->\n\n## 什么是虚拟列表\n\n**虚拟列表**其实是按需显示的一种实现，即只对**可见区域**进行渲染，对**非可见区域**中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。\n\n假设有1万条记录需要同时渲染，我们屏幕的**可见区域**的高度为**500px**,而列表项的高度为**50px**，则此时我们在屏幕中最多只能看到10个列表项。\n\n假设滚动发生，滚动条距顶部的位置为**150px**,则我们可得知在**可见区域**内的列表项为**第4项**至**第13项**。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-watermark.awebp)\n\n## 实现\n\n```\n<div class=\"infinite-list-container\">\n    <div class=\"infinite-list-phantom\"></div>\n    <div class=\"infinite-list\">\n      <!-- item-1 -->\n      <!-- item-2 -->\n      <!-- ...... -->\n      <!-- item-n -->\n    </div>\n</div>\n```\n\n\n1. 设置占位容器，用于撑起滚动条。infinite-list-phantom 为容器内的占位。\n2. 渲染屏幕内能够容纳的元素，根据索引对总数据进行截取。infinite-list 为列表项的渲染区域\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-watermark.awebp)\n\n1. 计算当前可视区域**起始数据索引****startIndex**\n2. 计算当前可视区域**结束数据索引****endIndex**\n3. 计算**当前可视区域的数据**，并渲染到页面中\n4. 计算**startIndex**对应的数据在整个列表中的**偏移位置startOffset**并设置到列表上\n\n\n\n- 列表总高度listHeight = listData.length * itemSize\n- 可显示的列表项数visibleCount = Math.ceil(screenHeight / itemSize)，数量为(500 / 50) + 1，**多一个偏移项**。\n- 数据的起始索引startIndex = Math.floor(scrollTop / itemSize)\n- 数据的结束索引endIndex = startIndex + visibleCount，最大为数据总长度。\n- 列表显示数据为visibleData = listData.slice(startIndex,endIndex)\n\n当滚动后，由于渲染区域相对于可视区域已经发生了偏移，此时我需要获取一个偏移量startOffset，通过**样式控制**将渲染区域偏移至可视区域中。\n\n- 偏移量startOffset = scrollTop - (scrollTop % itemSize);不超过一个，不用偏移，超过一个，偏移超过的floor值。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-watermark.awebp)\n\n\n\n监听容器内的滚动事件，不断的对上面的数据进行重新赋值即可。\n\n以上思路仅适用于固定高度列表。","slug":"虚拟列表","published":1,"date":"2022-03-05T17:03:13.675Z","updated":"2022-03-05T17:08:08.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0ez0azx0004aottdwpk7qov","content":"<p>进行大量列表的渲染时，过多的DOM元素需要消耗大量的性能，这时使用虚拟列表是个不错的选择！</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"什么是虚拟列表\"   >\n          <a href=\"#什么是虚拟列表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是虚拟列表\" class=\"headerlink\" title=\"什么是虚拟列表\"></a>什么是虚拟列表</h2>\n      <p><strong>虚拟列表</strong>其实是按需显示的一种实现，即只对<strong>可见区域</strong>进行渲染，对<strong>非可见区域</strong>中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。</p>\n<p>假设有1万条记录需要同时渲染，我们屏幕的<strong>可见区域</strong>的高度为<strong>500px</strong>,而列表项的高度为<strong>50px</strong>，则此时我们在屏幕中最多只能看到10个列表项。</p>\n<p>假设滚动发生，滚动条距顶部的位置为<strong>150px</strong>,则我们可得知在<strong>可见区域</strong>内的列表项为<strong>第4项</strong>至<strong>第13项</strong>。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n\n        <h2 id=\"实现\"   >\n          <a href=\"#实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;infinite-list-container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;infinite-list-phantom&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;infinite-list&quot;&gt;</span><br><span class=\"line\">      &lt;!-- item-1 --&gt;</span><br><span class=\"line\">      &lt;!-- item-2 --&gt;</span><br><span class=\"line\">      &lt;!-- ...... --&gt;</span><br><span class=\"line\">      &lt;!-- item-n --&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n\n\n<ol>\n<li>设置占位容器，用于撑起滚动条。infinite-list-phantom 为容器内的占位。</li>\n<li>渲染屏幕内能够容纳的元素，根据索引对总数据进行截取。infinite-list 为列表项的渲染区域</li>\n</ol>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n<ol>\n<li>计算当前可视区域<strong>起始数据索引****startIndex</strong></li>\n<li>计算当前可视区域<strong>结束数据索引****endIndex</strong></li>\n<li>计算<strong>当前可视区域的数据</strong>，并渲染到页面中</li>\n<li>计算<strong>startIndex</strong>对应的数据在整个列表中的<strong>偏移位置startOffset</strong>并设置到列表上</li>\n</ol>\n<ul>\n<li>列表总高度listHeight &#x3D; listData.length * itemSize</li>\n<li>可显示的列表项数visibleCount &#x3D; Math.ceil(screenHeight &#x2F; itemSize)，数量为(500 &#x2F; 50) + 1，<strong>多一个偏移项</strong>。</li>\n<li>数据的起始索引startIndex &#x3D; Math.floor(scrollTop &#x2F; itemSize)</li>\n<li>数据的结束索引endIndex &#x3D; startIndex + visibleCount，最大为数据总长度。</li>\n<li>列表显示数据为visibleData &#x3D; listData.slice(startIndex,endIndex)</li>\n</ul>\n<p>当滚动后，由于渲染区域相对于可视区域已经发生了偏移，此时我需要获取一个偏移量startOffset，通过<strong>样式控制</strong>将渲染区域偏移至可视区域中。</p>\n<ul>\n<li>偏移量startOffset &#x3D; scrollTop - (scrollTop % itemSize);不超过一个，不用偏移，超过一个，偏移超过的floor值。</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n<p>监听容器内的滚动事件，不断的对上面的数据进行重新赋值即可。</p>\n<p>以上思路仅适用于固定高度列表。</p>\n","site":{"data":{}},"excerpt":"<p>进行大量列表的渲染时，过多的DOM元素需要消耗大量的性能，这时使用虚拟列表是个不错的选择！</p>","more":"<h2 id=\"什么是虚拟列表\"   >\n          <a href=\"#什么是虚拟列表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是虚拟列表\" class=\"headerlink\" title=\"什么是虚拟列表\"></a>什么是虚拟列表</h2>\n      <p><strong>虚拟列表</strong>其实是按需显示的一种实现，即只对<strong>可见区域</strong>进行渲染，对<strong>非可见区域</strong>中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。</p>\n<p>假设有1万条记录需要同时渲染，我们屏幕的<strong>可见区域</strong>的高度为<strong>500px</strong>,而列表项的高度为<strong>50px</strong>，则此时我们在屏幕中最多只能看到10个列表项。</p>\n<p>假设滚动发生，滚动条距顶部的位置为<strong>150px</strong>,则我们可得知在<strong>可见区域</strong>内的列表项为<strong>第4项</strong>至<strong>第13项</strong>。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n\n        <h2 id=\"实现\"   >\n          <a href=\"#实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;infinite-list-container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;infinite-list-phantom&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;infinite-list&quot;&gt;</span><br><span class=\"line\">      &lt;!-- item-1 --&gt;</span><br><span class=\"line\">      &lt;!-- item-2 --&gt;</span><br><span class=\"line\">      &lt;!-- ...... --&gt;</span><br><span class=\"line\">      &lt;!-- item-n --&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></div></figure>\n\n\n<ol>\n<li>设置占位容器，用于撑起滚动条。infinite-list-phantom 为容器内的占位。</li>\n<li>渲染屏幕内能够容纳的元素，根据索引对总数据进行截取。infinite-list 为列表项的渲染区域</li>\n</ol>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n<ol>\n<li>计算当前可视区域<strong>起始数据索引****startIndex</strong></li>\n<li>计算当前可视区域<strong>结束数据索引****endIndex</strong></li>\n<li>计算<strong>当前可视区域的数据</strong>，并渲染到页面中</li>\n<li>计算<strong>startIndex</strong>对应的数据在整个列表中的<strong>偏移位置startOffset</strong>并设置到列表上</li>\n</ol>\n<ul>\n<li>列表总高度listHeight &#x3D; listData.length * itemSize</li>\n<li>可显示的列表项数visibleCount &#x3D; Math.ceil(screenHeight &#x2F; itemSize)，数量为(500 &#x2F; 50) + 1，<strong>多一个偏移项</strong>。</li>\n<li>数据的起始索引startIndex &#x3D; Math.floor(scrollTop &#x2F; itemSize)</li>\n<li>数据的结束索引endIndex &#x3D; startIndex + visibleCount，最大为数据总长度。</li>\n<li>列表显示数据为visibleData &#x3D; listData.slice(startIndex,endIndex)</li>\n</ul>\n<p>当滚动后，由于渲染区域相对于可视区域已经发生了偏移，此时我需要获取一个偏移量startOffset，通过<strong>样式控制</strong>将渲染区域偏移至可视区域中。</p>\n<ul>\n<li>偏移量startOffset &#x3D; scrollTop - (scrollTop % itemSize);不超过一个，不用偏移，超过一个，偏移超过的floor值。</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n<p>监听容器内的滚动事件，不断的对上面的数据进行重新赋值即可。</p>\n<p>以上思路仅适用于固定高度列表。</p>"},{"title":"JS简化技巧","_content":"\n一些JS的简写技巧，可以有效提高工作效率和代码可读性。\n<!-- more -->\n\n## 简化技巧\n\n#### 同时声明多个变量时，可简写成一行\n\n```\n//Longhand\nlet x;\nlet y = 20;\n\n//Shorthand\nlet x, y = 20;\n```\n\n#### 过滤空值，不含0\n\n```\n//Longhand\nif(!!a || a === 0 ){\n\tb = a;\n}\n\n//Shorthand\nb = a ?? 666;\n```\n\n#### ~ 按位非判断是否存在于数组\n\n```\n// JavaScript代码\nif ( !~items.indexOf( item ) ) {  \n    items.push(item);  \n}  \n\n// 如果在集合中查找到了item，则该函数返回对应下标,是一个大于0的整数，该整数按位非的结果一定不为0，取逻辑非后，表达式结果为假。\n// 如果在集合中没找到item，则该函数返回-1这个值。而恰好，-1这个值按位非的结果刚好是0,再取逻辑非后，表达式结果为真。\n```\n\n#### 使用双波浪线运算符（~~）代替Math.floor()\n\n```\n//Longhand\nconst floor = Math.floor(6.8); // 6\n\n// Shorthand\nconst floor = ~~6.8; // 6\n\n// ~~两次取反码，将会获取到int值\n```\n\n#### 利用解构，可为多个变量同时赋值\n\n```\n//Longhand\nlet a, b, c;\n\na = 5;\nb = 8;\nc = 12;\n\n//Shorthand\nlet [a, b, c] = [5, 8, 12];\n```\n\n#### 使用解构交换两个变量的值\n\n```\nlet x = 'Hello', y = 55;\n\n//Longhand\nconst temp = x;\nx = y;\ny = temp;\n\n//Shorthand\n[x, y] = [y, x];\n```\n\n#### 使用&&运算符简化if语句\n\n```\n//Longhand\nif (isLoggedin) {\n    goToHomepage();\n }\n\n//Shorthand\nisLoggedin && goToHomepage();\n```\n\n#### 对于多值匹配，可将所有值放在数组中\n\n```\n//Longhand\nif (value === 1 || value === 'one' || value === 2 || value === 'two') {\n  // Execute some code\n}\n\n// Shorthand 2\nif ([1, 'one', 2, 'two'].includes(value)) { \n    // Execute some code \n}\n```\n\n#### 使用repeat()方法简化重复一个字符串\n\n```\n//Longhand\nlet str = '';\nfor(let i = 0; i < 5; i ++) {\n  str += 'Hello ';\n}\nconsole.log(str); // Hello Hello Hello Hello Hello\n\n// Shorthand\n'Hello '.repeat(5);\n```\n\n#### 简化数组合并\n\n```\nlet arr1 = [20, 30];\n\n//Longhand\nlet arr2 = arr1.concat([60, 80]); // [20, 30, 60, 80]\n\n//Shorthand\nlet arr2 = [...arr1, 60, 80]; // [20, 30, 60, 80]\n```\n\n#### 单层对象的拷贝\n\n```\nlet obj = {x: 20, y: {z: 30}};\n\n//Shorthand\nconst cloneObj = JSON.parse(JSON.stringify(obj));\n\n//Shorthand for single level object\nlet obj = {x: 20, y: 'hello'};\nconst cloneObj = {...obj};\n```\n\n#### 寻找数组中的最大和最小值\n\n```\n// Shorthand\nconst arr = [2, 8, 15, 4];\nMath.max(...arr); // 15\nMath.min(...arr); // 2\n```\n\n#### 简化获取字符串中的某个字符\n\n```\nlet str = 'jscurious.com';\n\n//Longhand\nstr.charAt(2); // c\n\n//Shorthand\nstr[2]; // c\n```\n\n#### 移除对象属性\n\n```\nlet obj = {x: 45, y: 72, z: 68, p: 98};\n\n// Longhand\ndelete obj.x;\ndelete obj.p;\nconsole.log(obj); // {y: 72, z: 68}\n\n// Shorthand\nlet {x, p, ...newObj} = obj;\nconsole.log(newObj); // {y: 72, z: 68}\n```\n\n","source":"_posts/JS简化技巧.md","raw":"---\ntitle: JS简化技巧\n---\n\n一些JS的简写技巧，可以有效提高工作效率和代码可读性。\n<!-- more -->\n\n## 简化技巧\n\n#### 同时声明多个变量时，可简写成一行\n\n```\n//Longhand\nlet x;\nlet y = 20;\n\n//Shorthand\nlet x, y = 20;\n```\n\n#### 过滤空值，不含0\n\n```\n//Longhand\nif(!!a || a === 0 ){\n\tb = a;\n}\n\n//Shorthand\nb = a ?? 666;\n```\n\n#### ~ 按位非判断是否存在于数组\n\n```\n// JavaScript代码\nif ( !~items.indexOf( item ) ) {  \n    items.push(item);  \n}  \n\n// 如果在集合中查找到了item，则该函数返回对应下标,是一个大于0的整数，该整数按位非的结果一定不为0，取逻辑非后，表达式结果为假。\n// 如果在集合中没找到item，则该函数返回-1这个值。而恰好，-1这个值按位非的结果刚好是0,再取逻辑非后，表达式结果为真。\n```\n\n#### 使用双波浪线运算符（~~）代替Math.floor()\n\n```\n//Longhand\nconst floor = Math.floor(6.8); // 6\n\n// Shorthand\nconst floor = ~~6.8; // 6\n\n// ~~两次取反码，将会获取到int值\n```\n\n#### 利用解构，可为多个变量同时赋值\n\n```\n//Longhand\nlet a, b, c;\n\na = 5;\nb = 8;\nc = 12;\n\n//Shorthand\nlet [a, b, c] = [5, 8, 12];\n```\n\n#### 使用解构交换两个变量的值\n\n```\nlet x = 'Hello', y = 55;\n\n//Longhand\nconst temp = x;\nx = y;\ny = temp;\n\n//Shorthand\n[x, y] = [y, x];\n```\n\n#### 使用&&运算符简化if语句\n\n```\n//Longhand\nif (isLoggedin) {\n    goToHomepage();\n }\n\n//Shorthand\nisLoggedin && goToHomepage();\n```\n\n#### 对于多值匹配，可将所有值放在数组中\n\n```\n//Longhand\nif (value === 1 || value === 'one' || value === 2 || value === 'two') {\n  // Execute some code\n}\n\n// Shorthand 2\nif ([1, 'one', 2, 'two'].includes(value)) { \n    // Execute some code \n}\n```\n\n#### 使用repeat()方法简化重复一个字符串\n\n```\n//Longhand\nlet str = '';\nfor(let i = 0; i < 5; i ++) {\n  str += 'Hello ';\n}\nconsole.log(str); // Hello Hello Hello Hello Hello\n\n// Shorthand\n'Hello '.repeat(5);\n```\n\n#### 简化数组合并\n\n```\nlet arr1 = [20, 30];\n\n//Longhand\nlet arr2 = arr1.concat([60, 80]); // [20, 30, 60, 80]\n\n//Shorthand\nlet arr2 = [...arr1, 60, 80]; // [20, 30, 60, 80]\n```\n\n#### 单层对象的拷贝\n\n```\nlet obj = {x: 20, y: {z: 30}};\n\n//Shorthand\nconst cloneObj = JSON.parse(JSON.stringify(obj));\n\n//Shorthand for single level object\nlet obj = {x: 20, y: 'hello'};\nconst cloneObj = {...obj};\n```\n\n#### 寻找数组中的最大和最小值\n\n```\n// Shorthand\nconst arr = [2, 8, 15, 4];\nMath.max(...arr); // 15\nMath.min(...arr); // 2\n```\n\n#### 简化获取字符串中的某个字符\n\n```\nlet str = 'jscurious.com';\n\n//Longhand\nstr.charAt(2); // c\n\n//Shorthand\nstr[2]; // c\n```\n\n#### 移除对象属性\n\n```\nlet obj = {x: 45, y: 72, z: 68, p: 98};\n\n// Longhand\ndelete obj.x;\ndelete obj.p;\nconsole.log(obj); // {y: 72, z: 68}\n\n// Shorthand\nlet {x, p, ...newObj} = obj;\nconsole.log(newObj); // {y: 72, z: 68}\n```\n\n","slug":"JS简化技巧","published":1,"date":"2022-03-06T11:44:17.967Z","updated":"2022-03-06T11:45:21.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0f7lobl0000igttdh6i8d8z","content":"<p>一些JS的简写技巧，可以有效提高工作效率和代码可读性。</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"简化技巧\"   >\n          <a href=\"#简化技巧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化技巧\" class=\"headerlink\" title=\"简化技巧\"></a>简化技巧</h2>\n      \n        <h4 id=\"同时声明多个变量时，可简写成一行\"   >\n          <a href=\"#同时声明多个变量时，可简写成一行\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#同时声明多个变量时，可简写成一行\" class=\"headerlink\" title=\"同时声明多个变量时，可简写成一行\"></a>同时声明多个变量时，可简写成一行</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let x;</span><br><span class=\"line\">let y = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let x, y = 20;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"过滤空值，不含0\"   >\n          <a href=\"#过滤空值，不含0\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#过滤空值，不含0\" class=\"headerlink\" title=\"过滤空值，不含0\"></a>过滤空值，不含0</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if(!!a || a === 0 )&#123;</span><br><span class=\"line\">\tb = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">b = a ?? 666;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"按位非判断是否存在于数组\"   >\n          <a href=\"#按位非判断是否存在于数组\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#按位非判断是否存在于数组\" class=\"headerlink\" title=\"~ 按位非判断是否存在于数组\"></a>~ 按位非判断是否存在于数组</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JavaScript代码</span><br><span class=\"line\">if ( !~items.indexOf( item ) ) &#123;  </span><br><span class=\"line\">    items.push(item);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">// 如果在集合中查找到了item，则该函数返回对应下标,是一个大于0的整数，该整数按位非的结果一定不为0，取逻辑非后，表达式结果为假。</span><br><span class=\"line\">// 如果在集合中没找到item，则该函数返回-1这个值。而恰好，-1这个值按位非的结果刚好是0,再取逻辑非后，表达式结果为真。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用双波浪线运算符（-）代替Math-floor\"   >\n          <a href=\"#使用双波浪线运算符（-）代替Math-floor\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用双波浪线运算符（-）代替Math-floor\" class=\"headerlink\" title=\"使用双波浪线运算符（~~）代替Math.floor()\"></a>使用双波浪线运算符（~~）代替Math.floor()</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">const floor = Math.floor(6.8); // 6</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">const floor = ~~6.8; // 6</span><br><span class=\"line\"></span><br><span class=\"line\">// ~~两次取反码，将会获取到int值</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"利用解构，可为多个变量同时赋值\"   >\n          <a href=\"#利用解构，可为多个变量同时赋值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#利用解构，可为多个变量同时赋值\" class=\"headerlink\" title=\"利用解构，可为多个变量同时赋值\"></a>利用解构，可为多个变量同时赋值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\">a = 5;</span><br><span class=\"line\">b = 8;</span><br><span class=\"line\">c = 12;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let [a, b, c] = [5, 8, 12];</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用解构交换两个变量的值\"   >\n          <a href=\"#使用解构交换两个变量的值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用解构交换两个变量的值\" class=\"headerlink\" title=\"使用解构交换两个变量的值\"></a>使用解构交换两个变量的值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = &#x27;Hello&#x27;, y = 55;</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">const temp = x;</span><br><span class=\"line\">x = y;</span><br><span class=\"line\">y = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用-amp-amp-运算符简化if语句\"   >\n          <a href=\"#使用-amp-amp-运算符简化if语句\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用-amp-amp-运算符简化if语句\" class=\"headerlink\" title=\"使用&amp;&amp;运算符简化if语句\"></a>使用&amp;&amp;运算符简化if语句</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if (isLoggedin) &#123;</span><br><span class=\"line\">    goToHomepage();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">isLoggedin &amp;&amp; goToHomepage();</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"对于多值匹配，可将所有值放在数组中\"   >\n          <a href=\"#对于多值匹配，可将所有值放在数组中\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#对于多值匹配，可将所有值放在数组中\" class=\"headerlink\" title=\"对于多值匹配，可将所有值放在数组中\"></a>对于多值匹配，可将所有值放在数组中</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if (value === 1 || value === &#x27;one&#x27; || value === 2 || value === &#x27;two&#x27;) &#123;</span><br><span class=\"line\">  // Execute some code</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand 2</span><br><span class=\"line\">if ([1, &#x27;one&#x27;, 2, &#x27;two&#x27;].includes(value)) &#123; </span><br><span class=\"line\">    // Execute some code </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用repeat-方法简化重复一个字符串\"   >\n          <a href=\"#使用repeat-方法简化重复一个字符串\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用repeat-方法简化重复一个字符串\" class=\"headerlink\" title=\"使用repeat()方法简化重复一个字符串\"></a>使用repeat()方法简化重复一个字符串</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let str = &#x27;&#x27;;</span><br><span class=\"line\">for(let i = 0; i &lt; 5; i ++) &#123;</span><br><span class=\"line\">  str += &#x27;Hello &#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(str); // Hello Hello Hello Hello Hello</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">&#x27;Hello &#x27;.repeat(5);</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"简化数组合并\"   >\n          <a href=\"#简化数组合并\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化数组合并\" class=\"headerlink\" title=\"简化数组合并\"></a>简化数组合并</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 = [20, 30];</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">let arr2 = arr1.concat([60, 80]); // [20, 30, 60, 80]</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let arr2 = [...arr1, 60, 80]; // [20, 30, 60, 80]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"单层对象的拷贝\"   >\n          <a href=\"#单层对象的拷贝\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单层对象的拷贝\" class=\"headerlink\" title=\"单层对象的拷贝\"></a>单层对象的拷贝</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;x: 20, y: &#123;z: 30&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">const cloneObj = JSON.parse(JSON.stringify(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand for single level object</span><br><span class=\"line\">let obj = &#123;x: 20, y: &#x27;hello&#x27;&#125;;</span><br><span class=\"line\">const cloneObj = &#123;...obj&#125;;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"寻找数组中的最大和最小值\"   >\n          <a href=\"#寻找数组中的最大和最小值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#寻找数组中的最大和最小值\" class=\"headerlink\" title=\"寻找数组中的最大和最小值\"></a>寻找数组中的最大和最小值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Shorthand</span><br><span class=\"line\">const arr = [2, 8, 15, 4];</span><br><span class=\"line\">Math.max(...arr); // 15</span><br><span class=\"line\">Math.min(...arr); // 2</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"简化获取字符串中的某个字符\"   >\n          <a href=\"#简化获取字符串中的某个字符\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化获取字符串中的某个字符\" class=\"headerlink\" title=\"简化获取字符串中的某个字符\"></a>简化获取字符串中的某个字符</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &#x27;jscurious.com&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">str.charAt(2); // c</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">str[2]; // c</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"移除对象属性\"   >\n          <a href=\"#移除对象属性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#移除对象属性\" class=\"headerlink\" title=\"移除对象属性\"></a>移除对象属性</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;x: 45, y: 72, z: 68, p: 98&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Longhand</span><br><span class=\"line\">delete obj.x;</span><br><span class=\"line\">delete obj.p;</span><br><span class=\"line\">console.log(obj); // &#123;y: 72, z: 68&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">let &#123;x, p, ...newObj&#125; = obj;</span><br><span class=\"line\">console.log(newObj); // &#123;y: 72, z: 68&#125;</span><br></pre></td></tr></table></div></figure>\n\n","site":{"data":{}},"excerpt":"<p>一些JS的简写技巧，可以有效提高工作效率和代码可读性。</p>","more":"<h2 id=\"简化技巧\"   >\n          <a href=\"#简化技巧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化技巧\" class=\"headerlink\" title=\"简化技巧\"></a>简化技巧</h2>\n      \n        <h4 id=\"同时声明多个变量时，可简写成一行\"   >\n          <a href=\"#同时声明多个变量时，可简写成一行\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#同时声明多个变量时，可简写成一行\" class=\"headerlink\" title=\"同时声明多个变量时，可简写成一行\"></a>同时声明多个变量时，可简写成一行</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let x;</span><br><span class=\"line\">let y = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let x, y = 20;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"过滤空值，不含0\"   >\n          <a href=\"#过滤空值，不含0\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#过滤空值，不含0\" class=\"headerlink\" title=\"过滤空值，不含0\"></a>过滤空值，不含0</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if(!!a || a === 0 )&#123;</span><br><span class=\"line\">\tb = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">b = a ?? 666;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"按位非判断是否存在于数组\"   >\n          <a href=\"#按位非判断是否存在于数组\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#按位非判断是否存在于数组\" class=\"headerlink\" title=\"~ 按位非判断是否存在于数组\"></a>~ 按位非判断是否存在于数组</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// JavaScript代码</span><br><span class=\"line\">if ( !~items.indexOf( item ) ) &#123;  </span><br><span class=\"line\">    items.push(item);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">// 如果在集合中查找到了item，则该函数返回对应下标,是一个大于0的整数，该整数按位非的结果一定不为0，取逻辑非后，表达式结果为假。</span><br><span class=\"line\">// 如果在集合中没找到item，则该函数返回-1这个值。而恰好，-1这个值按位非的结果刚好是0,再取逻辑非后，表达式结果为真。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用双波浪线运算符（-）代替Math-floor\"   >\n          <a href=\"#使用双波浪线运算符（-）代替Math-floor\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用双波浪线运算符（-）代替Math-floor\" class=\"headerlink\" title=\"使用双波浪线运算符（~~）代替Math.floor()\"></a>使用双波浪线运算符（~~）代替Math.floor()</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">const floor = Math.floor(6.8); // 6</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">const floor = ~~6.8; // 6</span><br><span class=\"line\"></span><br><span class=\"line\">// ~~两次取反码，将会获取到int值</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"利用解构，可为多个变量同时赋值\"   >\n          <a href=\"#利用解构，可为多个变量同时赋值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#利用解构，可为多个变量同时赋值\" class=\"headerlink\" title=\"利用解构，可为多个变量同时赋值\"></a>利用解构，可为多个变量同时赋值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\">a = 5;</span><br><span class=\"line\">b = 8;</span><br><span class=\"line\">c = 12;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let [a, b, c] = [5, 8, 12];</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用解构交换两个变量的值\"   >\n          <a href=\"#使用解构交换两个变量的值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用解构交换两个变量的值\" class=\"headerlink\" title=\"使用解构交换两个变量的值\"></a>使用解构交换两个变量的值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let x = &#x27;Hello&#x27;, y = 55;</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">const temp = x;</span><br><span class=\"line\">x = y;</span><br><span class=\"line\">y = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用-amp-amp-运算符简化if语句\"   >\n          <a href=\"#使用-amp-amp-运算符简化if语句\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用-amp-amp-运算符简化if语句\" class=\"headerlink\" title=\"使用&amp;&amp;运算符简化if语句\"></a>使用&amp;&amp;运算符简化if语句</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if (isLoggedin) &#123;</span><br><span class=\"line\">    goToHomepage();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">isLoggedin &amp;&amp; goToHomepage();</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"对于多值匹配，可将所有值放在数组中\"   >\n          <a href=\"#对于多值匹配，可将所有值放在数组中\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#对于多值匹配，可将所有值放在数组中\" class=\"headerlink\" title=\"对于多值匹配，可将所有值放在数组中\"></a>对于多值匹配，可将所有值放在数组中</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">if (value === 1 || value === &#x27;one&#x27; || value === 2 || value === &#x27;two&#x27;) &#123;</span><br><span class=\"line\">  // Execute some code</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand 2</span><br><span class=\"line\">if ([1, &#x27;one&#x27;, 2, &#x27;two&#x27;].includes(value)) &#123; </span><br><span class=\"line\">    // Execute some code </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"使用repeat-方法简化重复一个字符串\"   >\n          <a href=\"#使用repeat-方法简化重复一个字符串\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#使用repeat-方法简化重复一个字符串\" class=\"headerlink\" title=\"使用repeat()方法简化重复一个字符串\"></a>使用repeat()方法简化重复一个字符串</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Longhand</span><br><span class=\"line\">let str = &#x27;&#x27;;</span><br><span class=\"line\">for(let i = 0; i &lt; 5; i ++) &#123;</span><br><span class=\"line\">  str += &#x27;Hello &#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(str); // Hello Hello Hello Hello Hello</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">&#x27;Hello &#x27;.repeat(5);</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"简化数组合并\"   >\n          <a href=\"#简化数组合并\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化数组合并\" class=\"headerlink\" title=\"简化数组合并\"></a>简化数组合并</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 = [20, 30];</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">let arr2 = arr1.concat([60, 80]); // [20, 30, 60, 80]</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">let arr2 = [...arr1, 60, 80]; // [20, 30, 60, 80]</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"单层对象的拷贝\"   >\n          <a href=\"#单层对象的拷贝\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#单层对象的拷贝\" class=\"headerlink\" title=\"单层对象的拷贝\"></a>单层对象的拷贝</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;x: 20, y: &#123;z: 30&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">const cloneObj = JSON.parse(JSON.stringify(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand for single level object</span><br><span class=\"line\">let obj = &#123;x: 20, y: &#x27;hello&#x27;&#125;;</span><br><span class=\"line\">const cloneObj = &#123;...obj&#125;;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"寻找数组中的最大和最小值\"   >\n          <a href=\"#寻找数组中的最大和最小值\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#寻找数组中的最大和最小值\" class=\"headerlink\" title=\"寻找数组中的最大和最小值\"></a>寻找数组中的最大和最小值</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Shorthand</span><br><span class=\"line\">const arr = [2, 8, 15, 4];</span><br><span class=\"line\">Math.max(...arr); // 15</span><br><span class=\"line\">Math.min(...arr); // 2</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"简化获取字符串中的某个字符\"   >\n          <a href=\"#简化获取字符串中的某个字符\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#简化获取字符串中的某个字符\" class=\"headerlink\" title=\"简化获取字符串中的某个字符\"></a>简化获取字符串中的某个字符</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str = &#x27;jscurious.com&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">//Longhand</span><br><span class=\"line\">str.charAt(2); // c</span><br><span class=\"line\"></span><br><span class=\"line\">//Shorthand</span><br><span class=\"line\">str[2]; // c</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"移除对象属性\"   >\n          <a href=\"#移除对象属性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#移除对象属性\" class=\"headerlink\" title=\"移除对象属性\"></a>移除对象属性</h4>\n      <figure class=\"highlight plaintext\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;x: 45, y: 72, z: 68, p: 98&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Longhand</span><br><span class=\"line\">delete obj.x;</span><br><span class=\"line\">delete obj.p;</span><br><span class=\"line\">console.log(obj); // &#123;y: 72, z: 68&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Shorthand</span><br><span class=\"line\">let &#123;x, p, ...newObj&#125; = obj;</span><br><span class=\"line\">console.log(newObj); // &#123;y: 72, z: 68&#125;</span><br></pre></td></tr></table></div></figure>"},{"title":"HTTP2.0","_content":"\n你应该了解的HTTP2.0~\n<!-- more -->\n\n## HTTP1.1存在的问题\n\n现在我们先不聊HTTP2, 看一下HTTP发展到1.1存在有哪些问题：\n\n1. **线头阻塞：**TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。\n2. **多个TCP连接：**虽然HTTP/1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。\n3. **头部冗余，采用文本格式：**HTTP/1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。\n4. **客户端需要主动请求**\n\n## HTTP2.0新特性\n\n### 二进制分帧\n\n#### 什么是二进制分帧\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/9/16792b2d88c55af5~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n在二进制分帧层上，HTTP2.0会将所有传输信息分割为更小的消息和帧，并对它们采用二进制格式的编码将其封装。其中，HTTP1.X中的首部信息header封装到Headers帧中，而request body将被封装到Data帧中。\n\n#### 二进制分帧如何工作\n\nHTTP2.0通信都在一个TCP连接上完成，这个连接可以承载**任意数量的双向数据流**，相应的每个数据流以**消息的形式**发送。而消息由一或多个帧组成，这些帧可以乱序发送，然后根据每个帧首部的流标识符重新组装。\n\n#### 二进制分帧对性能优化工作的贡献\n\n二进制分帧主要是为下文中的各种特性提供了基础。它能把一个数据划分封装为更小更便捷的数据。首先是在单链接多资源方式中，减少了服务端的链接压力，内存占用更少，链接吞吐量更大。另一方面，由于**TCP链接的减少而使网络拥塞状态得以改善**，同时慢启动时间的减少。使拥塞和丢包恢复的速度更快\n\n### 首部压缩\n\nHTTP1.1并不支持HTTP首部压缩，为此SPDY和HTTP2.0出现了。SPDY是用的是DEFLATE算法，而HTTP2.0则使用了专门为首部压缩设计的**HPACK算法**。\n\n#### 什么是首部压缩\n\nHTTP1.x每次通讯（请求或响应）都会携带首部信息用于描述资源属性。而HTTP2.0在客户端和服务端之间使用**首部表**来跟踪和存储之前发送的键值对。请求与响应首部的定义在HTTP2.0中基本没有变，只是所有首部键必须全部小写。\n\n#### 首部压缩如何工作\n\n对于相同的数据，不再重新通过每次请求和响应发送。每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。首部表在HTTP2.0的链接存续期内始终存在，由客户端和服务端共同渐进的更新。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c570596a277bf~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n\n\n#### 首部压缩性能优化工作的贡献\n\n首部表在HTTP2.0使用了首部压缩的技术。使报头更紧凑，更快速传输，有利于移动网络环境。减少每次通讯的数据量，使网络拥塞状态得以改善。\n\n### 多路复用\n\n在**HTTP1.1**中，浏览器客户端在同一时间，针对**同一域名下的请求有一定数量的限制**。超过限制数目的请求会被阻塞。而HTTP2.0中的多路复用优化了这一性能。\n\n#### 什么是多路复用\n\n**基于二进制分帧层**，HTTP2.0可以在共享TCP链接的基础上同时发送请求和响应。**HTTP消息被分解为独立的帧**，而不破坏消息本身的语义，交错发出去，在另一端根据**流标识符**和**首部**将他们重新组装起来。\n\n#### 多路复用如何工作\n\n我们来通过与HTTP1.X的对比来看看他是如何工作的。\n\n- HTTP1.x\n\n  ![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b5d678210bb~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n- HTTP2.0\n\n  ![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b6a596f82fe~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n#### 多路复用对性能优化工作的贡献\n\n1. 可以并行交错的发送请求和响应，这些请求和响应之间互不影响\n2. 只使用一个链接即可并行发送多个请求和响应\n3. 消除不必要的延迟，从而减少页面加载的时间\n4. 不必再为绕过HTTP1.x限制而多做很多工作\n\n### 服务器端推送\n\nHTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。这被称为\"服务器推送\"（Server Push）\n\n例如下图所示,服务端主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/2/28/16934a8dd0ad7485~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。\n\n### 请求优先级\n\n把HTTP消息分为很多独立帧之后，就可以通过优化这些帧的交错和传输顺序进一步优化性能。\n\n#### 什么是请求优先级\n\n每个流都可以带有一个31bit的优先值：0表示最高优先级；2的31次方-1表示最低优先级。\n\n客户端明确指定优先级，服务端可以根据这个优先级作为交互数据的依据，比如客户端优先设置为.css>.js>.jpg。\n\n## HTTP/1 的几种优化可以弃用\n\n**合并文件、内联资源、雪碧图、域名分片**对于 HTTP/2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多","source":"_posts/HTTP2.0.md","raw":"---\ntitle: HTTP2.0\n---\n\n你应该了解的HTTP2.0~\n<!-- more -->\n\n## HTTP1.1存在的问题\n\n现在我们先不聊HTTP2, 看一下HTTP发展到1.1存在有哪些问题：\n\n1. **线头阻塞：**TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。\n2. **多个TCP连接：**虽然HTTP/1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。\n3. **头部冗余，采用文本格式：**HTTP/1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。\n4. **客户端需要主动请求**\n\n## HTTP2.0新特性\n\n### 二进制分帧\n\n#### 什么是二进制分帧\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/9/16792b2d88c55af5~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n在二进制分帧层上，HTTP2.0会将所有传输信息分割为更小的消息和帧，并对它们采用二进制格式的编码将其封装。其中，HTTP1.X中的首部信息header封装到Headers帧中，而request body将被封装到Data帧中。\n\n#### 二进制分帧如何工作\n\nHTTP2.0通信都在一个TCP连接上完成，这个连接可以承载**任意数量的双向数据流**，相应的每个数据流以**消息的形式**发送。而消息由一或多个帧组成，这些帧可以乱序发送，然后根据每个帧首部的流标识符重新组装。\n\n#### 二进制分帧对性能优化工作的贡献\n\n二进制分帧主要是为下文中的各种特性提供了基础。它能把一个数据划分封装为更小更便捷的数据。首先是在单链接多资源方式中，减少了服务端的链接压力，内存占用更少，链接吞吐量更大。另一方面，由于**TCP链接的减少而使网络拥塞状态得以改善**，同时慢启动时间的减少。使拥塞和丢包恢复的速度更快\n\n### 首部压缩\n\nHTTP1.1并不支持HTTP首部压缩，为此SPDY和HTTP2.0出现了。SPDY是用的是DEFLATE算法，而HTTP2.0则使用了专门为首部压缩设计的**HPACK算法**。\n\n#### 什么是首部压缩\n\nHTTP1.x每次通讯（请求或响应）都会携带首部信息用于描述资源属性。而HTTP2.0在客户端和服务端之间使用**首部表**来跟踪和存储之前发送的键值对。请求与响应首部的定义在HTTP2.0中基本没有变，只是所有首部键必须全部小写。\n\n#### 首部压缩如何工作\n\n对于相同的数据，不再重新通过每次请求和响应发送。每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。首部表在HTTP2.0的链接存续期内始终存在，由客户端和服务端共同渐进的更新。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c570596a277bf~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n\n\n#### 首部压缩性能优化工作的贡献\n\n首部表在HTTP2.0使用了首部压缩的技术。使报头更紧凑，更快速传输，有利于移动网络环境。减少每次通讯的数据量，使网络拥塞状态得以改善。\n\n### 多路复用\n\n在**HTTP1.1**中，浏览器客户端在同一时间，针对**同一域名下的请求有一定数量的限制**。超过限制数目的请求会被阻塞。而HTTP2.0中的多路复用优化了这一性能。\n\n#### 什么是多路复用\n\n**基于二进制分帧层**，HTTP2.0可以在共享TCP链接的基础上同时发送请求和响应。**HTTP消息被分解为独立的帧**，而不破坏消息本身的语义，交错发出去，在另一端根据**流标识符**和**首部**将他们重新组装起来。\n\n#### 多路复用如何工作\n\n我们来通过与HTTP1.X的对比来看看他是如何工作的。\n\n- HTTP1.x\n\n  ![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b5d678210bb~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n- HTTP2.0\n\n  ![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b6a596f82fe~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n#### 多路复用对性能优化工作的贡献\n\n1. 可以并行交错的发送请求和响应，这些请求和响应之间互不影响\n2. 只使用一个链接即可并行发送多个请求和响应\n3. 消除不必要的延迟，从而减少页面加载的时间\n4. 不必再为绕过HTTP1.x限制而多做很多工作\n\n### 服务器端推送\n\nHTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。这被称为\"服务器推送\"（Server Push）\n\n例如下图所示,服务端主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。\n\n![img](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/2/28/16934a8dd0ad7485~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp)\n\n另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。\n\n### 请求优先级\n\n把HTTP消息分为很多独立帧之后，就可以通过优化这些帧的交错和传输顺序进一步优化性能。\n\n#### 什么是请求优先级\n\n每个流都可以带有一个31bit的优先值：0表示最高优先级；2的31次方-1表示最低优先级。\n\n客户端明确指定优先级，服务端可以根据这个优先级作为交互数据的依据，比如客户端优先设置为.css>.js>.jpg。\n\n## HTTP/1 的几种优化可以弃用\n\n**合并文件、内联资源、雪碧图、域名分片**对于 HTTP/2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多","slug":"HTTP2.0","published":1,"date":"2022-03-07T16:24:59.192Z","updated":"2022-03-07T16:27:07.723Z","_id":"cl0gx013r0000ycttgg2g99fq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>你应该了解的HTTP2.0~</p>\n<span id=\"more\"></span>\n\n\n        <h2 id=\"HTTP1-1存在的问题\"   >\n          <a href=\"#HTTP1-1存在的问题\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP1-1存在的问题\" class=\"headerlink\" title=\"HTTP1.1存在的问题\"></a>HTTP1.1存在的问题</h2>\n      <p>现在我们先不聊HTTP2, 看一下HTTP发展到1.1存在有哪些问题：</p>\n<ol>\n<li><strong>线头阻塞：</strong>TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。</li>\n<li><strong>多个TCP连接：</strong>虽然HTTP&#x2F;1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。</li>\n<li><strong>头部冗余，采用文本格式：</strong>HTTP&#x2F;1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。</li>\n<li><strong>客户端需要主动请求</strong></li>\n</ol>\n\n        <h2 id=\"HTTP2-0新特性\"   >\n          <a href=\"#HTTP2-0新特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP2-0新特性\" class=\"headerlink\" title=\"HTTP2.0新特性\"></a>HTTP2.0新特性</h2>\n      \n        <h3 id=\"二进制分帧\"   >\n          <a href=\"#二进制分帧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧\" class=\"headerlink\" title=\"二进制分帧\"></a>二进制分帧</h3>\n      \n        <h4 id=\"什么是二进制分帧\"   >\n          <a href=\"#什么是二进制分帧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是二进制分帧\" class=\"headerlink\" title=\"什么是二进制分帧\"></a>什么是二进制分帧</h4>\n      <p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/9/16792b2d88c55af5~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<p>在二进制分帧层上，HTTP2.0会将所有传输信息分割为更小的消息和帧，并对它们采用二进制格式的编码将其封装。其中，HTTP1.X中的首部信息header封装到Headers帧中，而request body将被封装到Data帧中。</p>\n\n        <h4 id=\"二进制分帧如何工作\"   >\n          <a href=\"#二进制分帧如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧如何工作\" class=\"headerlink\" title=\"二进制分帧如何工作\"></a>二进制分帧如何工作</h4>\n      <p>HTTP2.0通信都在一个TCP连接上完成，这个连接可以承载<strong>任意数量的双向数据流</strong>，相应的每个数据流以<strong>消息的形式</strong>发送。而消息由一或多个帧组成，这些帧可以乱序发送，然后根据每个帧首部的流标识符重新组装。</p>\n\n        <h4 id=\"二进制分帧对性能优化工作的贡献\"   >\n          <a href=\"#二进制分帧对性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧对性能优化工作的贡献\" class=\"headerlink\" title=\"二进制分帧对性能优化工作的贡献\"></a>二进制分帧对性能优化工作的贡献</h4>\n      <p>二进制分帧主要是为下文中的各种特性提供了基础。它能把一个数据划分封装为更小更便捷的数据。首先是在单链接多资源方式中，减少了服务端的链接压力，内存占用更少，链接吞吐量更大。另一方面，由于<strong>TCP链接的减少而使网络拥塞状态得以改善</strong>，同时慢启动时间的减少。使拥塞和丢包恢复的速度更快</p>\n\n        <h3 id=\"首部压缩\"   >\n          <a href=\"#首部压缩\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩\" class=\"headerlink\" title=\"首部压缩\"></a>首部压缩</h3>\n      <p>HTTP1.1并不支持HTTP首部压缩，为此SPDY和HTTP2.0出现了。SPDY是用的是DEFLATE算法，而HTTP2.0则使用了专门为首部压缩设计的<strong>HPACK算法</strong>。</p>\n\n        <h4 id=\"什么是首部压缩\"   >\n          <a href=\"#什么是首部压缩\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是首部压缩\" class=\"headerlink\" title=\"什么是首部压缩\"></a>什么是首部压缩</h4>\n      <p>HTTP1.x每次通讯（请求或响应）都会携带首部信息用于描述资源属性。而HTTP2.0在客户端和服务端之间使用<strong>首部表</strong>来跟踪和存储之前发送的键值对。请求与响应首部的定义在HTTP2.0中基本没有变，只是所有首部键必须全部小写。</p>\n\n        <h4 id=\"首部压缩如何工作\"   >\n          <a href=\"#首部压缩如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩如何工作\" class=\"headerlink\" title=\"首部压缩如何工作\"></a>首部压缩如何工作</h4>\n      <p>对于相同的数据，不再重新通过每次请求和响应发送。每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。首部表在HTTP2.0的链接存续期内始终存在，由客户端和服务端共同渐进的更新。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c570596a277bf~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n\n        <h4 id=\"首部压缩性能优化工作的贡献\"   >\n          <a href=\"#首部压缩性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩性能优化工作的贡献\" class=\"headerlink\" title=\"首部压缩性能优化工作的贡献\"></a>首部压缩性能优化工作的贡献</h4>\n      <p>首部表在HTTP2.0使用了首部压缩的技术。使报头更紧凑，更快速传输，有利于移动网络环境。减少每次通讯的数据量，使网络拥塞状态得以改善。</p>\n\n        <h3 id=\"多路复用\"   >\n          <a href=\"#多路复用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h3>\n      <p>在<strong>HTTP1.1</strong>中，浏览器客户端在同一时间，针对<strong>同一域名下的请求有一定数量的限制</strong>。超过限制数目的请求会被阻塞。而HTTP2.0中的多路复用优化了这一性能。</p>\n\n        <h4 id=\"什么是多路复用\"   >\n          <a href=\"#什么是多路复用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是多路复用\" class=\"headerlink\" title=\"什么是多路复用\"></a>什么是多路复用</h4>\n      <p><strong>基于二进制分帧层</strong>，HTTP2.0可以在共享TCP链接的基础上同时发送请求和响应。<strong>HTTP消息被分解为独立的帧</strong>，而不破坏消息本身的语义，交错发出去，在另一端根据<strong>流标识符</strong>和<strong>首部</strong>将他们重新组装起来。</p>\n\n        <h4 id=\"多路复用如何工作\"   >\n          <a href=\"#多路复用如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用如何工作\" class=\"headerlink\" title=\"多路复用如何工作\"></a>多路复用如何工作</h4>\n      <p>我们来通过与HTTP1.X的对比来看看他是如何工作的。</p>\n<ul>\n<li><p>HTTP1.x</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b5d678210bb~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n</li>\n<li><p>HTTP2.0</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b6a596f82fe~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n</li>\n</ul>\n\n        <h4 id=\"多路复用对性能优化工作的贡献\"   >\n          <a href=\"#多路复用对性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用对性能优化工作的贡献\" class=\"headerlink\" title=\"多路复用对性能优化工作的贡献\"></a>多路复用对性能优化工作的贡献</h4>\n      <ol>\n<li>可以并行交错的发送请求和响应，这些请求和响应之间互不影响</li>\n<li>只使用一个链接即可并行发送多个请求和响应</li>\n<li>消除不必要的延迟，从而减少页面加载的时间</li>\n<li>不必再为绕过HTTP1.x限制而多做很多工作</li>\n</ol>\n\n        <h3 id=\"服务器端推送\"   >\n          <a href=\"#服务器端推送\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#服务器端推送\" class=\"headerlink\" title=\"服务器端推送\"></a>服务器端推送</h3>\n      <p>HTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。这被称为”服务器推送”（Server Push）</p>\n<p>例如下图所示,服务端主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/2/28/16934a8dd0ad7485~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<p>另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p>\n\n        <h3 id=\"请求优先级\"   >\n          <a href=\"#请求优先级\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#请求优先级\" class=\"headerlink\" title=\"请求优先级\"></a>请求优先级</h3>\n      <p>把HTTP消息分为很多独立帧之后，就可以通过优化这些帧的交错和传输顺序进一步优化性能。</p>\n\n        <h4 id=\"什么是请求优先级\"   >\n          <a href=\"#什么是请求优先级\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是请求优先级\" class=\"headerlink\" title=\"什么是请求优先级\"></a>什么是请求优先级</h4>\n      <p>每个流都可以带有一个31bit的优先值：0表示最高优先级；2的31次方-1表示最低优先级。</p>\n<p>客户端明确指定优先级，服务端可以根据这个优先级作为交互数据的依据，比如客户端优先设置为.css&gt;.js&gt;.jpg。</p>\n\n        <h2 id=\"HTTP-x2F-1-的几种优化可以弃用\"   >\n          <a href=\"#HTTP-x2F-1-的几种优化可以弃用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP-x2F-1-的几种优化可以弃用\" class=\"headerlink\" title=\"HTTP&#x2F;1 的几种优化可以弃用\"></a>HTTP&#x2F;1 的几种优化可以弃用</h2>\n      <p><strong>合并文件、内联资源、雪碧图、域名分片</strong>对于 HTTP&#x2F;2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多</p>\n","site":{"data":{}},"excerpt":"<p>你应该了解的HTTP2.0~</p>","more":"<h2 id=\"HTTP1-1存在的问题\"   >\n          <a href=\"#HTTP1-1存在的问题\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP1-1存在的问题\" class=\"headerlink\" title=\"HTTP1.1存在的问题\"></a>HTTP1.1存在的问题</h2>\n      <p>现在我们先不聊HTTP2, 看一下HTTP发展到1.1存在有哪些问题：</p>\n<ol>\n<li><strong>线头阻塞：</strong>TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。</li>\n<li><strong>多个TCP连接：</strong>虽然HTTP&#x2F;1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。</li>\n<li><strong>头部冗余，采用文本格式：</strong>HTTP&#x2F;1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。</li>\n<li><strong>客户端需要主动请求</strong></li>\n</ol>\n\n        <h2 id=\"HTTP2-0新特性\"   >\n          <a href=\"#HTTP2-0新特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP2-0新特性\" class=\"headerlink\" title=\"HTTP2.0新特性\"></a>HTTP2.0新特性</h2>\n      \n        <h3 id=\"二进制分帧\"   >\n          <a href=\"#二进制分帧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧\" class=\"headerlink\" title=\"二进制分帧\"></a>二进制分帧</h3>\n      \n        <h4 id=\"什么是二进制分帧\"   >\n          <a href=\"#什么是二进制分帧\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是二进制分帧\" class=\"headerlink\" title=\"什么是二进制分帧\"></a>什么是二进制分帧</h4>\n      <p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/9/16792b2d88c55af5~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<p>在二进制分帧层上，HTTP2.0会将所有传输信息分割为更小的消息和帧，并对它们采用二进制格式的编码将其封装。其中，HTTP1.X中的首部信息header封装到Headers帧中，而request body将被封装到Data帧中。</p>\n\n        <h4 id=\"二进制分帧如何工作\"   >\n          <a href=\"#二进制分帧如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧如何工作\" class=\"headerlink\" title=\"二进制分帧如何工作\"></a>二进制分帧如何工作</h4>\n      <p>HTTP2.0通信都在一个TCP连接上完成，这个连接可以承载<strong>任意数量的双向数据流</strong>，相应的每个数据流以<strong>消息的形式</strong>发送。而消息由一或多个帧组成，这些帧可以乱序发送，然后根据每个帧首部的流标识符重新组装。</p>\n\n        <h4 id=\"二进制分帧对性能优化工作的贡献\"   >\n          <a href=\"#二进制分帧对性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#二进制分帧对性能优化工作的贡献\" class=\"headerlink\" title=\"二进制分帧对性能优化工作的贡献\"></a>二进制分帧对性能优化工作的贡献</h4>\n      <p>二进制分帧主要是为下文中的各种特性提供了基础。它能把一个数据划分封装为更小更便捷的数据。首先是在单链接多资源方式中，减少了服务端的链接压力，内存占用更少，链接吞吐量更大。另一方面，由于<strong>TCP链接的减少而使网络拥塞状态得以改善</strong>，同时慢启动时间的减少。使拥塞和丢包恢复的速度更快</p>\n\n        <h3 id=\"首部压缩\"   >\n          <a href=\"#首部压缩\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩\" class=\"headerlink\" title=\"首部压缩\"></a>首部压缩</h3>\n      <p>HTTP1.1并不支持HTTP首部压缩，为此SPDY和HTTP2.0出现了。SPDY是用的是DEFLATE算法，而HTTP2.0则使用了专门为首部压缩设计的<strong>HPACK算法</strong>。</p>\n\n        <h4 id=\"什么是首部压缩\"   >\n          <a href=\"#什么是首部压缩\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是首部压缩\" class=\"headerlink\" title=\"什么是首部压缩\"></a>什么是首部压缩</h4>\n      <p>HTTP1.x每次通讯（请求或响应）都会携带首部信息用于描述资源属性。而HTTP2.0在客户端和服务端之间使用<strong>首部表</strong>来跟踪和存储之前发送的键值对。请求与响应首部的定义在HTTP2.0中基本没有变，只是所有首部键必须全部小写。</p>\n\n        <h4 id=\"首部压缩如何工作\"   >\n          <a href=\"#首部压缩如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩如何工作\" class=\"headerlink\" title=\"首部压缩如何工作\"></a>首部压缩如何工作</h4>\n      <p>对于相同的数据，不再重新通过每次请求和响应发送。每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。首部表在HTTP2.0的链接存续期内始终存在，由客户端和服务端共同渐进的更新。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c570596a277bf~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n\n        <h4 id=\"首部压缩性能优化工作的贡献\"   >\n          <a href=\"#首部压缩性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#首部压缩性能优化工作的贡献\" class=\"headerlink\" title=\"首部压缩性能优化工作的贡献\"></a>首部压缩性能优化工作的贡献</h4>\n      <p>首部表在HTTP2.0使用了首部压缩的技术。使报头更紧凑，更快速传输，有利于移动网络环境。减少每次通讯的数据量，使网络拥塞状态得以改善。</p>\n\n        <h3 id=\"多路复用\"   >\n          <a href=\"#多路复用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h3>\n      <p>在<strong>HTTP1.1</strong>中，浏览器客户端在同一时间，针对<strong>同一域名下的请求有一定数量的限制</strong>。超过限制数目的请求会被阻塞。而HTTP2.0中的多路复用优化了这一性能。</p>\n\n        <h4 id=\"什么是多路复用\"   >\n          <a href=\"#什么是多路复用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是多路复用\" class=\"headerlink\" title=\"什么是多路复用\"></a>什么是多路复用</h4>\n      <p><strong>基于二进制分帧层</strong>，HTTP2.0可以在共享TCP链接的基础上同时发送请求和响应。<strong>HTTP消息被分解为独立的帧</strong>，而不破坏消息本身的语义，交错发出去，在另一端根据<strong>流标识符</strong>和<strong>首部</strong>将他们重新组装起来。</p>\n\n        <h4 id=\"多路复用如何工作\"   >\n          <a href=\"#多路复用如何工作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用如何工作\" class=\"headerlink\" title=\"多路复用如何工作\"></a>多路复用如何工作</h4>\n      <p>我们来通过与HTTP1.X的对比来看看他是如何工作的。</p>\n<ul>\n<li><p>HTTP1.x</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b5d678210bb~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n</li>\n<li><p>HTTP2.0</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/5/160c5b6a596f82fe~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n</li>\n</ul>\n\n        <h4 id=\"多路复用对性能优化工作的贡献\"   >\n          <a href=\"#多路复用对性能优化工作的贡献\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#多路复用对性能优化工作的贡献\" class=\"headerlink\" title=\"多路复用对性能优化工作的贡献\"></a>多路复用对性能优化工作的贡献</h4>\n      <ol>\n<li>可以并行交错的发送请求和响应，这些请求和响应之间互不影响</li>\n<li>只使用一个链接即可并行发送多个请求和响应</li>\n<li>消除不必要的延迟，从而减少页面加载的时间</li>\n<li>不必再为绕过HTTP1.x限制而多做很多工作</li>\n</ol>\n\n        <h3 id=\"服务器端推送\"   >\n          <a href=\"#服务器端推送\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#服务器端推送\" class=\"headerlink\" title=\"服务器端推送\"></a>服务器端推送</h3>\n      <p>HTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。这被称为”服务器推送”（Server Push）</p>\n<p>例如下图所示,服务端主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/2/28/16934a8dd0ad7485~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp\" alt=\"img\"></p>\n<p>另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p>\n\n        <h3 id=\"请求优先级\"   >\n          <a href=\"#请求优先级\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#请求优先级\" class=\"headerlink\" title=\"请求优先级\"></a>请求优先级</h3>\n      <p>把HTTP消息分为很多独立帧之后，就可以通过优化这些帧的交错和传输顺序进一步优化性能。</p>\n\n        <h4 id=\"什么是请求优先级\"   >\n          <a href=\"#什么是请求优先级\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#什么是请求优先级\" class=\"headerlink\" title=\"什么是请求优先级\"></a>什么是请求优先级</h4>\n      <p>每个流都可以带有一个31bit的优先值：0表示最高优先级；2的31次方-1表示最低优先级。</p>\n<p>客户端明确指定优先级，服务端可以根据这个优先级作为交互数据的依据，比如客户端优先设置为.css&gt;.js&gt;.jpg。</p>\n\n        <h2 id=\"HTTP-x2F-1-的几种优化可以弃用\"   >\n          <a href=\"#HTTP-x2F-1-的几种优化可以弃用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#HTTP-x2F-1-的几种优化可以弃用\" class=\"headerlink\" title=\"HTTP&#x2F;1 的几种优化可以弃用\"></a>HTTP&#x2F;1 的几种优化可以弃用</h2>\n      <p><strong>合并文件、内联资源、雪碧图、域名分片</strong>对于 HTTP&#x2F;2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}